# Editor permissions
Source: https://mintlify.com/docs/advanced/dashboard/permissions

Allow more members of your team to update your docs

An editor has access to your dashboard and web editor.

Anyone can contribute to your documentation by working locally and pushing changes to your repository, but there are key differences in how changes get deployed:

* **Editor changes**: When an editor publishes through the web editor or merges a pull request into your docs repository, changes deploy to your live site automatically.
* **Non-editor changes**: When a non-editor merges a pull request into your repository, you must manually trigger a deployment from your dashboard for those changes to appear on your live site.

## Add editors

By default, the team member who created your Mintlify organization has editor access. Add additional editors in the [Members](https://dashboard.mintlify.com/settings/organization/members) page of your dashboard.

Editor seats are billed based on usage, and you can have as many editors as you need. See our [pricing page](https://mintlify.com/pricing) for more details.


# Roles
Source: https://mintlify.com/docs/advanced/dashboard/roles

Control access to your dashboard with roles.

<Info>
  RBAC functionality is available on [Enterprise plan](https://mintlify.com/pricing?ref=rbac).
</Info>

Mintlify provides two dashboard access levels: Editor and Admin.

The following describes actions that are limited to the Admin role:

|                         | Editor | Admin |
| ----------------------- | :----: | :---: |
| Update user roles       |    ❌   |   ✅   |
| Delete users            |    ❌   |   ✅   |
| Invite admin users      |    ❌   |   ✅   |
| Manage & update billing |    ❌   |   ✅   |
| Update custom domain    |    ❌   |   ✅   |
| Update Git source       |    ❌   |   ✅   |
| Delete org              |    ❌   |   ✅   |

Other actions on the dashboard are available to both roles.

You can invite as many admins as you want, but we recommend limiting admin
access to users who need it.


# Single sign-on (SSO)
Source: https://mintlify.com/docs/advanced/dashboard/sso

Customize how your team can login to your admin dashboard

<Info>
  SSO functionality is available on [Enterprise plan](https://mintlify.com/pricing?ref=sso).
</Info>

Use single sign-on to your dashboard via SAML and OIDC. If you use Okta, Google Workspace, or Microsoft Entra, we have provider-specific documentation for setting up SSO. If you use another provider, please [contact us](mailto:support@mintlify.com).

## Okta

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        Under `Applications`, click to create a new app integration using SAML 2.0.
      </Step>

      <Step title="Configure integration">
        Enter the following:

        * Single sign-on URL (provided by Mintlify)
        * Audience URI (provided by Mintlify)
        * Name ID Format: `EmailAddress`
        * Attribute Statements:
          | Name        | Name format | Value            |
          | ----------- | ----------- | ---------------- |
          | `firstName` | Basic       | `user.firstName` |
          | `lastName`  | Basic       | `user.lastName`  |
      </Step>

      <Step title="Send us your IdP information">
        Once the application is set up, navigate to the sign-on tab and send us the metadata URL.
        We'll enable the connection from our side using this information.
      </Step>
    </Steps>
  </Tab>

  <Tab title="OIDC">
    <Steps>
      <Step title="Create an application">
        Under `Applications`, click to create a new app integration using OIDC.
        You should choose the `Web Application` application type.
      </Step>

      <Step title="Configure integration">
        Select the authorization code grant type and enter the Redirect URI provided by Mintlify.
      </Step>

      <Step title="Send us your IdP information">
        Once the application is set up, navigate to the General tab and locate the client ID & client secret.
        Please securely provide us with these, along with your Okta instance URL (e.g. `<your-tenant-name>.okta.com`). You can send these via a service like 1Password or SendSafely.
      </Step>
    </Steps>
  </Tab>
</Tabs>

## Google Workspace

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        Under `Web and mobile apps`, select `Add custom SAML app` from the `Add app` dropdown.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gsuite-add-custom-saml-app.png)
        </Frame>
      </Step>

      <Step title="Send us your IdP information">
        Copy the provided SSO URL, Entity ID, and x509 certificate and send it to the Mintlify team.

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gsuite-saml-metadata.png)
        </Frame>
      </Step>

      <Step title="Configure integration">
        On the Service provider details page, enter the following:

        * ACS URL (provided by Mintlify)
        * Entity ID (provided by Mintlify)
        * Name ID format: `EMAIL`
        * Name ID: `Basic Information > Primary email`

        <Frame>
          ![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gsuite-sp-details.png)
        </Frame>

        On the next page, enter the following attribute statements:

        | Google Directory Attribute | App Attribute |
        | -------------------------- | ------------- |
        | `First name`               | `firstName`   |
        | `Last name`                | `lastName`    |

        Once this step is complete and users are assigned to the application, let our team know and we'll enable SSO for your account!
      </Step>
    </Steps>
  </Tab>
</Tabs>

## Microsoft Entra

<Tabs>
  <Tab title="SAML">
    <Steps>
      <Step title="Create an application">
        1. Under "Enterprise applications", select **New application**.
        2. Select **Create your own application** and choose "Integrate any other application you don't find in the gallery (Non-gallery)."
      </Step>

      <Step title="Configure SAML">
        Navigate to the Single Sign-On setup page and select **SAML**. Under "Basic SAML Configuration," enter the following:

        * Identifier (Entity ID): The Audience URI provided by Mintlify.
        * Reply URL (Assertion Consumer Service URL): The ACS URL provided by Mintlify.

        Leave the other values blank and select **Save**.
      </Step>

      <Step title="Configure Attributes & Claims">
        Edit the Attributes & Claims section:

        1. Select **Unique User Identifier (Name ID)** under "Required Claim."
        2. Change the Source attribute to use `user.primaryauthoritativeemail`.
        3. Under Additional claims, create the following claims:
           | Name        | Value            |
           | ----------- | ---------------- |
           | `firstName` | `user.givenname` |
           | `lastName`  | `user.surname`   |
      </Step>

      <Step title="Send Mintlify your IdP information">
        Once the application is set up, navigate to the "SAML Certificates" section and send us the App Federation Metadata URL.
        We'll enable the connection from our side using this information.
      </Step>

      <Step title="Assign Users">
        Navigate to "Users and groups" in your Entra application and add the users who should have access to your dashboard.
      </Step>
    </Steps>
  </Tab>
</Tabs>


# Cloudflare
Source: https://mintlify.com/docs/advanced/subpath/cloudflare

Host documentation at a /docs subpath using Cloudflare Workers

To host your documentation at a `/docs` subpath using Cloudflare, you will need to create and configure a Cloudflare Worker.

<Info>
  Before you begin, you need a Cloudflare account and a domain name (can be managed on or off Cloudflare).
</Info>

## Set up a Cloudflare Worker

Create a Cloudflare Worker by following the [Cloudflare Workers getting started guide](https://developers.cloudflare.com/workers/get-started/dashboard/), if you have not already.

<Warning>
  If your DNS provider is Cloudflare, do not use proxying for the CNAME record.
</Warning>

### Configure routing

In your Cloudflare dashboard, select **Edit Code** and add the following script into your Worker's code. See the [Cloudflare documentation](https://developers.cloudflare.com/workers-ai/get-started/dashboard/#development) for more information on editing a Worker.

<Tip>
  Replace `[SUBDOMAIN]` with your unique subdomain and `[YOUR_DOMAIN]` with your website's base URL.
</Tip>

```javascript
addEventListener("fetch", (event) => {
  event.respondWith(handleRequest(event.request));
});

async function handleRequest(request) {
  try {
    const urlObject = new URL(request.url);
    // If the request is to the docs subdirectory
    if (/^\/docs/.test(urlObject.pathname)) {
      // Then Proxy to Mintlify
      const DOCS_URL = "[SUBDOMAIN].mintlify.dev";
      const CUSTOM_URL = "[YOUR_DOMAIN]";

      let url = new URL(request.url);
      url.hostname = DOCS_URL;

      let proxyRequest = new Request(url, request);

      proxyRequest.headers.set("Host", DOCS_URL);
      proxyRequest.headers.set("X-Forwarded-Host", CUSTOM_URL);
      proxyRequest.headers.set("X-Forwarded-Proto", "https");

      return await fetch(proxyRequest);
    }
  } catch (error) {
    // if no action found, play the regular request
    return await fetch(request);
  }
}
```

Select **Deploy** and wait for the changes to propagate.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>

### Test your Worker

After your code deploys, test your Worker to ensure it routes to your Mintlify docs.

1. Test using the Worker's preview URL: `your-worker.your-subdomain.workers.dev/docs`
2. Verify the Worker routes to your Mintlify docs and your website.

### Add custom domain

1. In your [Cloudflare dashboard](https://dash.cloudflare.com/), navigate to your Worker.
2. Go to **Settings > Domains & Routes > Add > Custom Domain**.
3. Add your domain.

<Tip>
  We recommend you add your domain both with and without `www.` prepended.
</Tip>

See [Add a custom domain](https://developers.cloudflare.com/workers/configuration/routing/custom-domains/#add-a-custom-domain) in the Cloudflare documentation for more information.

### Resolve DNS conflicts

If your domain already points to another service, you must remove the existing DNS record. Your Cloudflare Worker must be configured to control all traffic for your domain.

1. Delete the existing DNS record for your domain. See [Delete DNS records](https://developers.cloudflare.com/dns/manage-dns-records/how-to/create-dns-records/#delete-dns-records) in the Cloudflare documentation for more information.
2. Return to your Worker and add your custom domain.

## Webflow custom routing

If you use Webflow to host your main site and want to serve Mintlify docs at `/docs` on the same domain, you'll need to configure custom routing through Cloudflare Workers to proxy all non-docs traffic to your main site.

<Warning>
  Make sure your main site is set up on a landing page before deploying this Worker, or visitors to your main site will see errors.
</Warning>

1. In Webflow, set up a landing page for your main site like `landing.yoursite.com`. This will be the page that visitors see when they visit your site.
2. Deploy your main site to the landing page. This ensures that your main site remains accessible while you configure the Worker.
3. To avoid conflicts, update any absolute URLs in your main site to be relative.
4. In Cloudflare, select **Edit Code** and add the following script into your Worker's code.

<Tip> Replace `[SUBDOMAIN]` with your unique subdomain, `[YOUR_DOMAIN]` with your website's base URL, and `[LANDING_DOMAIN]` with your landing page URL. </Tip>

```javascript
addEventListener("fetch", (event) => {
event.respondWith(handleRequest(event.request));
});
async function handleRequest(request) {
try {
  const urlObject = new URL(request.url);
  // If the request is to the docs subdirectory
  if (/^\/docs/.test(urlObject.pathname)) {
    // Proxy to Mintlify
    const DOCS_URL = "[SUBDOMAIN].mintlify.dev";
    const CUSTOM_URL = "[YOUR_DOMAIN]";
    let url = new URL(request.url);
    url.hostname = DOCS_URL;
    let proxyRequest = new Request(url, request);
    proxyRequest.headers.set("Host", DOCS_URL);
    proxyRequest.headers.set("X-Forwarded-Host", CUSTOM_URL);
    proxyRequest.headers.set("X-Forwarded-Proto", "https");
    return await fetch(proxyRequest);
  }
  // Route everything else to main site
  const MAIN_SITE_URL = "[LANDING_DOMAIN]";
  if (MAIN_SITE_URL && MAIN_SITE_URL !== "[LANDING_DOMAIN]") {
    let mainSiteUrl = new URL(request.url);
    mainSiteUrl.hostname = MAIN_SITE_URL;
    return await fetch(mainSiteUrl, {
      method: request.method,
      headers: request.headers,
      body: request.body
    });
  }
} catch (error) {
  // If no action found, serve the regular request
  return await fetch(request);
}
}
```

5. Select **Deploy** and wait for the changes to propagate.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>


# AWS Route 53 and Cloudfront
Source: https://mintlify.com/docs/advanced/subpath/route53-cloudfront

Host documentation at a /docs subdirectory using AWS services

## Create Cloudfront Distribution

Navigate to [Cloudfront](https://aws.amazon.com/cloudfront) inside the AWS console and click on `Create distribution`

<Frame>
  ![Cloudfront Create Distribution](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/create-distribution.png)
</Frame>

For the Origin domain, input `[SUBDOMAIN].mintlify.dev` where `[SUBDOMAIN]` is the project's unique subdomain. Click on `Use: [SUBDOMAIN].mintlify.dev`

<Frame>![Cloudfront Origin name](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/origin-name.png)</Frame>

For **Cache key and origin requests**, select `Caching Optimized`.

<Frame>
  ![Cloudfront Caching policy](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/caching-policy.png)
</Frame>

And for **Web Application Firewall (WAF)**, enable security protections

<Frame>
  ![Cloudfront Caching
  policy](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/enable-security-protections.png)
</Frame>

The remaining settings should be default. Click `Create distribution`.

## Add Default Origin

After creating the distribution, navigate to the `Origins` tab.

<Frame>![Cloudfront Origins](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/origins.png)</Frame>

We want to find a staging URL that mirrors where the main domain (example.com). This is highly variant depending on how your landing page is hosted.

<Info>
  For instance, if your landing page is hosted on Webflow, you can use the
  Webflow's staging URL. It would look like `.webflow.io`.

  If you use Vercel, you use the `.vercel.app` domain available for every project.
</Info>

<Note>
  If you're unsure on how to get a staging URL for your landing page, [contact
  support](/contact-support) and we'd be happy to help
</Note>

Once you have the staging URL, ours for instance is [mintlify-landing-page.vercel.app](https://mintlify-landing-page.vercel.app), create a new Origin and add it as the **Origin domain**.

<Frame>
  ![Cloudfront Default Origins](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/default-origin.png)
</Frame>

By this point, you should have two Origins - one with `[SUBDOMAIN].mintlify.app` and another with with staging URL.

## Set Behaviors

Behaviors in Cloudfront enables control over the subpath logic. At a high level, we're looking to create the following logic.

* **If a user lands on /docs**, go to `[SUBDOMAIN].mintlify.dev`
* **If a user lands on any other page**, go the current landing page

We're going to create three behaviors by clicking on the `Create behavior` button.

### `/docs/*`

The first behavior should have a **Path pattern** of `/docs/*` with **Origin and origin groups** pointing to the `.mintlify.dev` URL (in our case `acme.mintlify.dev`)

<Frame>![Cloudfront Behavior 1](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/behavior-1.png)</Frame>

For **Cache policy**, select `CachingOptimized` and create behavior.

### `/docs`

The second behavior should be the same as the first one but with a **Path pattern** of `/docs` and **Origin and origin groups** pointing to the same `.mintlify.dev` URL.

<Frame>![Cloudfront Behavior 2](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/behavior-2.png)</Frame>

### `Default (*)`

Lastly, we're going to edit the `Default (*)` behavior.

<Frame>
  ![Cloudfront Behavior Default 1](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/default-behavior-1.png)
</Frame>

We're going to change the default behavior's **Origin and origin groups** to the staging URL (in our case `mintlify-landing-page.vercel.app`).

<Frame>
  ![Cloudfront Behavior Default 2](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/default-behavior-2.png)
</Frame>

Click on `Save changes`.

## Preview Distribution

You can now test if your distribution is set up properly by going to the `General` tab and visiting the **Distribution domain name** URL.

<Frame>
  ![Cloudfront Preview
  distribution](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/preview-distribution.png)
</Frame>

All pages should be directing to your main landing page, but if you append `/docs` to the URL, you should see it going to the Mintlify documentation instance.

## Connecting it with Route53

Now, we're going to bring the functionality of the Cloudfront distribution into your primary domain.

<Note>
  For this section, you can also refer to AWS's official guide on [Configuring
  Amazon Route 53 to route traffic to a CloudFront
  distribution](https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/routing-to-cloudfront-distribution.html#routing-to-cloudfront-distribution-config)
</Note>

Navigate to [Route53](https://aws.amazon.com/route53) inside the AWS console, and click into the `Hosted zone` for your primary domain. Click on `Create record`

<Frame>
  ![Route 53 create record](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/route53-create-record.png)
</Frame>

Toggle `Alias` and then **Route traffic to** the `Alias to CloudFront distribution` option.

<Frame>
  ![Route 53 create record alias](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/cloudfront/create-record-alias.png)
</Frame>

Click `Create records`.

<Note>
  You may need to remove the existing A record if one currently exists.
</Note>

And voila! Your documentation will be served at `/docs` for your primary domain.

<Note>
  After configuring your DNS, custom subdomains are usually available within a few minutes. DNS propagation can sometimes take 1-4 hours, and in rare cases up to 48 hours. If your subdomain is not immediately available, please wait before troubleshooting.
</Note>


# Vercel
Source: https://mintlify.com/docs/advanced/subpath/vercel

Host documentation at a /docs subpath using Vercel

## vercel.json Configuration

To host your documentation at a custom subpath using Vercel, you need to add the
following configuration to your `vercel.json` file.

```json
{
  "rewrites": [
    {
      "source": "/docs",
      "destination": "https://[subdomain].mintlify.dev/docs"
    },
    {
      "source": "/docs/:match*",
      "destination": "https://[subdomain].mintlify.dev/docs/:match*"
    }
  ]
}
```

<Note>
  For more information, you can also refer to Vercel's offical guide on
  rewrites: [Project Configuration:
  Rewrites](https://vercel.com/docs/projects/project-configuration#rewrites)
</Note>


# AI ingestion
Source: https://mintlify.com/docs/ai-ingestion

Prepare your documentation for LLMs and AI tools

export const PreviewButton = ({children, href}) => {
  return <a href={href} className="text-sm font-medium text-white dark:!text-zinc-950 bg-zinc-900 hover:bg-zinc-700 dark:bg-zinc-100 hover:dark:bg-zinc-300 rounded-full px-3.5 py-1.5 not-prose">
      {children}
    </a>;
};


Generate optimized formats and provide shortcuts that help users get faster, more accurate responses when using your documentation as context for LLMs and AI tools.

## Contextual menu

Provide quick access to AI-optimized content and direct integrations with popular AI tools from a contextual menu on your pages.

* **Copy page**: Copies the current page as Markdown for pasting as context into AI tools.
* **View as Markdown**: Opens the current page as Markdown.
* **Open in ChatGPT**: Creates a ChatGPT conversation with the current page as context.
* **Open in Claude**: Creates a Claude conversation with the current page as context.
* **Ask Perplexity**: Creates a Perplexity conversation with the current page as context.
* [**Your custom options**](#adding-custom-options): Add your own options to the contextual menu.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/contextual-menu/contextual-menu.png" alt="The expanded contextual menu showing the Copy page, View as Markdown, Open in ChatGPT, and Open in Claude menu items." />
</Frame>

### Enabling the contextual menu

Add the `contextual` field to your `docs.json` and specify which options you want to include in your menu.

```json
{
 "contextual": {
   "options": [
     "copy",
     "view",
     "chatgpt",
     "claude",
     "perplexity"
   ]
 }
}
```

### Adding custom options

Create custom options in the contextual menu by adding an object to the `options` array. Each custom option requires these properties:

<ResponseField name="title" type="string" required>
  The title of the option.
</ResponseField>

<ResponseField name="description" type="string" required>
  The description of the option. Displayed beneath the title when the contextual menu is expanded.
</ResponseField>

<ResponseField name="icon" type="string" required>
  The icon of the option. Accepts any icon from the [Icons](/components/icons) collection.
</ResponseField>

<ResponseField name="href" type="string | object" required>
  The href of the option. Use a string for simple links or an object for dynamic links with query parameters.

  <Expandable title="href object">
    <ResponseField name="base" type="string" required>
      The base URL for the option.
    </ResponseField>

    <ResponseField name="query" type="object" required>
      The query parameters for the option.

      <Expandable title="query object">
        <ResponseField name="key" type="string" required>
          The query parameter key.
        </ResponseField>

        <ResponseField name="value" type="string" required>
          The query parameter value. Use `$page` to insert the current page content in Markdown or `$path` to insert the current page path.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

Example custom option:

```json {7-20} Example with Perplexity icon="search"
"contextual": {
  "options": [
    "copy",
    "view",
    "chatgpt",
    "claude",
    {
      "title": "Ask Perplexity",
      "description": "Ask Perplexity about the current page",
      "icon": "search",
      "href": {
        "base": "https://www.perplexity.ai/search",
        "query": [
          {
            "key": "q",
            "value": "Ask question about https://mintlify.com/docs$path.md"
          }
        ]
      }
    }
  ]
}
```

## /llms.txt

The [/llms.txt file](https://llmstxt.org) is an industry standard that helps general-purpose LLMs index more efficiently, similar to how a sitemap helps search engines.

Every documentation site automatically hosts an `/llms.txt` file at the root that lists all available pages in your documentation. AI tools can use this file to understand your documentation structure and find relevant content to user prompts.

<PreviewButton href="https://mintlify.com/docs/llms.txt">Open llms.txt for this site</PreviewButton>

## /llms-full.txt

The `/llms-full.txt` file combines your entire documentation site into a single file as context for AI tools.

Every documentation site automatically hosts an `/llms-full.txt` file at the root.

<PreviewButton href="https://mintlify.com/docs/llms-full.txt">Open llms-full.txt for this site</PreviewButton>

## Generating Markdown versions of pages

Markdown provides structured text that AI tools can process more efficiently than HTML, which results in better response times and lower token usage.

### .md extension

Add a `.md` to a page's URL to display a Markdown version of that page.

<PreviewButton href="https://mintlify.com/docs/quickstart.md">Open quickstart.md</PreviewButton>

### Command + C shortcut

Select Command + C (Ctrl + C on Windows) to copy any page as Markdown.


# Playground
Source: https://mintlify.com/docs/api-playground/asyncapi/playground

Enable users to interact with your websockets



# AsyncAPI setup
Source: https://mintlify.com/docs/api-playground/asyncapi/setup

Create websocket reference pages with AsyncAPI

## Add an AsyncAPI specification file

To begin to create pages for your websockets, make sure you have a valid AsyncAPI schema document in either JSON or YAML format that follows the [AsyncAPI specification](https://www.asyncapi.com/docs/reference/specification/v3.0.0). Your schema must follow the AsyncAPI specification 3.0+.

<Tip>
  To make sure your AsyncAPI schema is valid, you can paste it into the
  [AsyncAPI Studio](https://studio.asyncapi.com/)
</Tip>

## Auto-populate websockets pages

You can add an `asyncapi` field to any tab or group in the navigation of your `docs.json`. This field can contain either the path to an AsyncAPI schema document in your docs repo, the URL of a hosted AsyncAPI schema document, or an array of links to AsyncAPI schema documents. Mintlify will automatically generate a page for each AsyncAPI websocket channel.

**Examples with Tabs:**

<CodeGroup>
  ```json Local File {5}
  "navigation": {
    "tabs": [
      {
          "tab": "API Reference",
          "asyncapi": "/path/to/asyncapi.json"
      }
    ]
  }

  ```

  ```json Remote URL {5}
  "navigation": {
    "tabs": [
      {
          "tab": "API Reference",
          "asyncapi": "https://github.com/asyncapi/spec/blob/master/examples/simple-asyncapi.yml"
      }
    ]
  }
  ```
</CodeGroup>

**Examples with Groups:**

```json {8-11}
"navigation": {
  "tabs": [
    {
      "tab": "AsyncAPI",
      "groups": [
        {
          "group": "Websockets",
          "asyncapi": {
            "source": "/path/to/asyncapi.json",
            "directory": "api-reference"
          }
        }
      ]
    }
  ]
}
```

<Note>
  The directory field is optional. If not specified, the files will be placed in
  the **api-reference** folder of the docs repo.
</Note>

## Channel page

If you want more control over how you order your channels or if you want to just reference a single channel, you can create an MDX file with the `asyncapi` field in the frontmatter.

```mdx
---
title: "Websocket Channel"
asyncapi: "/path/to/asyncapi.json channelName"
---
```


# Adding SDK examples
Source: https://mintlify.com/docs/api-playground/customization/adding-sdk-examples

Display language-specific code samples alongside your API endpoints to show developers how to use your SDKs

If your users interact with your API using an SDK rather than directly through a network request, you can use the `x-codeSamples` extension to add code samples to your OpenAPI document and display them in your OpenAPI pages.

This property can be added to any request method and has the following schema.

<ParamField body="lang" type="string" required>
  The language of the code sample.
</ParamField>

<ParamField body="label" type="string">
  The label for the sample. This is useful when providing multiple examples for a single endpoint.
</ParamField>

<ParamField body="source" type="string" required>
  The source code of the sample.
</ParamField>

Here is an example of code samples for a plant tracking app, which has both a Bash CLI tool and a JavaScript SDK.

```yaml
paths:
  /plants:
    get:
      # ...
      x-codeSamples:
        - lang: bash
          label: List all unwatered plants
          source: |
            planter list -u
        - lang: javascript
          label: List all unwatered plants
          source: |
            const planter = require('planter');
            planter.list({ unwatered: true });
        - lang: bash
          label: List all potted plants
          source: |
            planter list -p
        - lang: javascript
          label: List all potted plants
          source: |
            const planter = require('planter');
            planter.list({ potted: true });
```


# Complex data types
Source: https://mintlify.com/docs/api-playground/customization/complex-data-types

Describe APIs with flexible schemas, optional properties, and multiple data formats using `oneOf`, `anyOf`, and `allOf` keywords

When your API accepts multiple data formats, has conditional fields, or uses inheritance patterns, OpenAPI's schema composition keywords help you document these flexible structures. Using `oneOf`, `anyOf`, and `allOf`, you can describe APIs that handle different input types or combine multiple schemas into comprehensive data models.

## `oneOf`, `anyOf`, `allOf` keywords

For complex data types, OpenAPI provides keywords for combining schemas:

* `allOf`: Combines multiple schemas (like merging objects or extending a base schema). Functions like an `and` operator.
* `anyOf`: Accepts data matching any of the provided schemas. Functions like an `or` operator.
* `oneOf`: Accepts data matching exactly one of the provided schemas. Functions like an `exclusive-or` operator.

<Warning>Mintlify treats `oneOf` and `anyOf` identically since the practical difference rarely affects using the API.</Warning>

For detailed specifications of these keywords see the [OpenAPI documentation](https://swagger.io/docs/specification/data-models/oneof-anyof-allof-not/).

<Info>The `not` keyword is currently unsupported.</Info>

### Combining schemas with `allOf`

When you use `allOf`, Mintlify performs some preprocessing on your OpenAPI document to display complex combinations in a readable way. For example, when you combine two object schemas with `allOf`, Mintlify combines the properties of both into a single object. This becomes especially useful when leveraging OpenAPI's reusable [components](https://swagger.io/docs/specification/components/).

```yaml
org_with_users:
  allOf:
    - $ref: '#/components/schemas/Org'
    - type: object
      properties:
        users:
          type: array
          description: An array containing all users in the organization
# ...
components:
  schemas:
    Org:
      type: object
      properties:
        id:
          type: string
          description: The ID of the organization
```

<ParamField body="org_with_users" type="object">
  <Expandable>
    <ParamField body="id" type="string">
      The ID of the organization
    </ParamField>

    <ParamField body="users" type="object[]">
      An array containing all users in the organization
    </ParamField>
  </Expandable>
</ParamField>

### Providing options with `oneOf` and `anyOf`

When you use `oneOf` or `anyOf`, the options are displayed in a tabbed container. Specify a `title` field in each subschema to give your options names. For example, here's how you might display two different types of delivery addresses:

```yaml
delivery_address:
  oneOf:
    - title: StreetAddress
      type: object
      properties:
        address_line_1:
          type: string
          description: The street address of the recipient
        # ...
    - title: POBox
      type: object
      properties:
        box_number:
          type: string
          description: The number of the PO Box
        # ...
```

<ParamField body="delivery_address" type="object">
  <div className="mt-4 rounded-xl border border-gray-100 px-4 pb-4 pt-2 dark:border-white/10">
    <Tabs>
      <Tab title="StreetAddress">
        <ParamField body="address_line_1" type="string">
          The street address of the residence
        </ParamField>
      </Tab>

      <Tab title="POBox">
        <ParamField body="box_number" type="string">
          The number of the PO Box
        </ParamField>
      </Tab>
    </Tabs>
  </div>
</ParamField>


# Managing page visibility
Source: https://mintlify.com/docs/api-playground/customization/managing-page-visibility

Control which endpoints from your OpenAPI specification appear in your documentation navigation

You can control which OpenAPI operations get published as documentation pages and their visibility in navigation. This is useful for internal-only endpoints, deprecated operations, beta features, or endpoints that should be accessible via direct URL but not discoverable through site navigation.

If your pages are autogenerated from an OpenAPI document, you can manage page visibility with the `x-hidden` and `x-excluded` extensions.

## `x-hidden`

The `x-hidden` extension creates a page for an endpoint, but hides it from navigation. The page is only accessible by navigating directly to its URL.

Common use cases for `x-hidden` are:

* Endpoints you want to document, but not promote.
* Pages that you will link to from other content.
* Endpoints for specific users.

## `x-excluded`

The `x-excluded` extension completely excludes an endpoint from your documentation.

Common use cases for `x-excluded` are:

* Internal-only endpoints.
* Deprecated endpoints that you don't want to document.
* Beta features that are not ready for public documentation.

## Implementation

Add the `x-hidden` or `x-excluded` extension under the HTTP method in your OpenAPI specification.

Here are examples of how to use each property in an OpenAPI schema document for an endpoint and a webhook path.

```json {11, 19}
"paths": {
  "/plants": {
    "get": {
      "description": "Returns all plants from the store",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  },
  "/hidden_plants": {
    "get": {
      "x-hidden": true,
      "description": "Returns all somewhat secret plants from the store",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  },
  "/secret_plants": {
    "get": {
      "x-excluded": true,
      "description": "Returns all top secret plants from the store (do not publish this endpoint!)",
      "parameters": { /*...*/ },
      "responses": { /*...*/ }
    }
  }
},
```

```json {9, 15}
"webhooks": {
  "/plants_hook": {
    "post": {
      "description": "Webhook for information about a new plant added to the store",
    }
  },
  "/hidden_plants_hook": {
    "post": {
      "x-hidden": true,
      "description": "Webhook for somewhat secret information about a new plant added to the store"
    }
  },
  "/secret_plants_hook": {
    "post": {
      "x-excluded": true,
      "description": "Webhook for top secret information about a new plant added to the store (do not publish this endpoint!)"
    }
  }
}
```


# Multiple responses
Source: https://mintlify.com/docs/api-playground/customization/multiple-responses

Show response variations for the same endpoint

If your API returns different responses based on input parameters, user context, or other conditions of the request, you can document multiple response examples with the `examples` property.

This property can be added to any response and has the following schema.

```yaml
responses:
  "200":
    description: Successful response
    content:
      application/json:
        schema:
          $ref: "#/components/schemas/YourResponseSchema"
        examples:
          us:
            summary: Response for United States
            value:
              countryCode: "US"
              currencyCode: "USD"
              taxRate: 0.0825
          gb:
            summary: Response for United Kingdom
            value:
              countryCode: "GB"
              currencyCode: "GBP"
              taxRate: 0.20
```


# Authentication
Source: https://mintlify.com/docs/api-playground/mdx/authentication

You can set authentication parameters to let users use their real API keys.

## Enabling authentication

You can add an authentication method to your `docs.json` to enable it globally on every page or you can set it on a per-page basis.

A page's authentication method will override a global method if both are set.

### Bearer token

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "bearer"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "bearer"
  ---
  ```
</CodeGroup>

### Basic authentication

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "basic"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "basic"
  ---
  ```
</CodeGroup>

### API key

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "key",
          "name": "x-api-key"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "key"
  ---
  ```
</CodeGroup>

### None

The "none" authentication method is useful to disable authentication on a specific endpoint after setting a default in docs.json.

<CodeGroup>
  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "none"
  ---
  ```
</CodeGroup>


# MDX setup
Source: https://mintlify.com/docs/api-playground/mdx/configuration

Generate docs pages for your API endpoints using `MDX`

You can manually define API endpoints in individual `MDX` files rather than using an OpenAPI specification. This method provides flexibility for custom content, but we recommend generating API documentation from an OpenAPI specification file for most API documentation projects as it's more maintainable and feature-rich. However, MDX can be useful for documenting small APIs, prototyping, or when you want to feature API endpoints alongside other content.

To generate pages for API endpoints using `MDX`, configure your API settings in `docs.json`, create individual `MDX` files for each endpoint, and use components like `<ParamFields />` to define parameters. From these definitions, Mintlify generates interactive API playgrounds, request examples, and response examples.

<Steps>
  <Step title="Configure your API">
    In your `docs.json` file, define your base URL and auth method:

    ```json
     "api": {
      "mdx": {
        "server": "https://mintlify.com/api", // string array for multiple base URLs
        "auth": {
          "method": "key",
          "name": "x-api-key" // options: bearer, basic, key.
        }
      }
    }
    ```

    If you want to hide the API playground, use the `display` field. You do not need to include an auth method if you hide the playground.

    ```json
    "api": {
      "playground": {
        "display": "none"
      }
    }
    ```

    Find a full list of API configurations in [Settings](/settings#api-configurations).
  </Step>

  <Step title="Create your endpoint pages">
    Each API endpoint page should have a corresponding `MDX` file. At the top of each file, define `title` and `api`:

    ```mdx
    ---
    title: 'Create new user'
    api: 'POST https://api.mintlify.com/user'
    ---
    ```

    You can specify path parameters by adding the parameter name to the path, wrapped with `{}`:

    ```bash
    https://api.example.com/v1/endpoint/{userId}
    ```

    <Note>
      If you have a `server` field configured in `docs.json`, you can use relative paths like `/v1/endpoint`.
    </Note>

    You can override the globally-defined display mode for the API playground for a page by adding `playground` to the frontmatter:

    ```mdx
    ---
    title: 'Create new user'
    api: 'POST https://api.mintlify.com/user'
    playground: 'none'
    ---
    ```

    * `playground: 'interactive'` - Display the interactive playground.
    * `playground: 'simple'` - Display a copyable endpoint with no playground.
    * `playground: 'none'` - Hide the playground.
  </Step>

  <Step title="Add your endpoints to your docs">
    Add your endpoint pages to the sidebar by adding the paths to the `navigation` field in your `docs.json`. Learn more about structuring your docs in [Navigation](/navigation).
  </Step>
</Steps>

## Enabling authentication

You can add an authentication method to your `docs.json` to enable it globally on every page or you can set it on a per-page basis.

A page's authentication method will override a global method if both are set.

### Bearer token

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "bearer"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "bearer"
  ---
  ```
</CodeGroup>

### Basic authentication

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "basic"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "basic"
  ---
  ```
</CodeGroup>

### API key

<CodeGroup>
  ```json docs.json
  "api": {
      "mdx": {
        "auth": {
          "method": "key",
          "name": "x-api-key"
        }
      }
  }
  ```

  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "key"
  ---
  ```
</CodeGroup>

### None

The `none` authentication method is useful to disable authentication on a specific endpoint after setting a default in docs.json.

<CodeGroup>
  ```mdx Page Metadata
  ---
  title: "Your page title"
  authMethod: "none"
  ---
  ```
</CodeGroup>


# OpenAPI setup
Source: https://mintlify.com/docs/api-playground/openapi-setup

Reference OpenAPI endpoints in your docs pages

OpenAPI is a specification for describing REST APIs. Mintlify supports OpenAPI 3.0+ documents to generate interactive API documentation and keep it up to date.

## Add an OpenAPI specification file

To document your endpoints with OpenAPI, you need a valid OpenAPI document in either JSON or YAML format that follows the [OpenAPI specification 3.0+](https://swagger.io/specification/).

### Describing your API

We recommend the following resources to learn about and construct your OpenAPI documents.

* [Swagger's OpenAPI Guide](https://swagger.io/docs/specification/v3_0/basic-structure/) to learn the OpenAPI syntax.
* [The OpenAPI specification Markdown sources](https://github.com/OAI/OpenAPI-Specification/blob/main/versions/) to reference details of the latest OpenAPI specification.
* [Swagger Editor](https://editor.swagger.io/) to edit, validate, and debug your OpenAPI document.
* [The Mint CLI](https://www.npmjs.com/package/mint) to validate your OpenAPI document with the command: `mint openapi-check <openapiFilenameOrUrl>`.

<Note>
  Swagger's OpenAPI Guide is for OpenAPI v3.0, but nearly all of the information is applicable to v3.1. For more information on the differences between v3.0 and v3.1, see [Migrating from OpenAPI 3.0 to 3.1.0](https://www.openapis.org/blog/2021/02/16/migrating-from-openapi-3-0-to-3-1-0) in the OpenAPI blog.
</Note>

### Specifying the URL for your API

To enable Mintlify features like the API playground, add a `servers` field to your OpenAPI document with your API's base URL.

```json
{
  "servers": [
    {
      "url": "https://api.example.com/v1"
    }
  ]
}
```

In an OpenAPI document, different API endpoints are specified by their paths, like `/users/{id}` or simply `/`. The base URL defines where these paths should be appended. For more information on how to configure the `servers` field, see [API Server and Base Path](https://swagger.io/docs/specification/api-host-and-base-path/) in the OpenAPI documentation.

The API playground uses these server URLs to determine where to send requests. If you specify multiple servers, a dropdown will allow users to toggle between servers. If you do not specify a server, the API playground will use simple mode since it cannot send requests without a base URL.

If your API has endpoints that exist at different URLs, you can [override the server field](https://swagger.io/docs/specification/v3_0/api-host-and-base-path/#overriding-servers) for a given path or operation.

### Specifying authentication

To enable authentication in your API documentation and playground, configure the `securitySchemes` and `security` fields in your OpenAPI document. The API descriptions and API Playground will add authentication fields based on the security configurations in your OpenAPI document.

<Steps>
  <Step title="Define your authentication method.">
    Add a `securitySchemes` field to define how users authenticate.

    This example shows a configuration for bearer authentication.

    ```json
    {
      "components": {
        "securitySchemes": {
          "bearerAuth": {
          "type": "http",
          "scheme": "bearer"
          }
        }
      }
    }
    ```
  </Step>

  <Step title="Apply authentication to your endpoints.">
    Add a `security` field to require authentication.

    ```json
    {
      "security": [
        {
          "bearerAuth": []
        }
      ]
    }
    ```
  </Step>
</Steps>

Common authentication types include:

* [API Keys](https://swagger.io/docs/specification/authentication/api-keys/): For header, query, or cookie-based keys.
* [Bearer](https://swagger.io/docs/specification/authentication/bearer-authentication/): For JWT or OAuth tokens.
* [Basic](https://swagger.io/docs/specification/authentication/basic-authentication/): For username and password.

If different endpoints within your API require different methods of authentication, you can [override the security field](https://swagger.io/docs/specification/authentication/#:~:text=you%20can%20apply%20them%20to%20the%20whole%20API%20or%20individual%20operations%20by%20adding%20the%20security%20section%20on%20the%20root%20level%20or%20operation%20level%2C%20respectively.) for a given operation.

For more information on defining and applying authentication, see [Authentication](https://swagger.io/docs/specification/authentication/) in the OpenAPI documentation.

## Auto-populate API pages

You can add an `openapi` field to any navigation element in your `docs.json` to auto-populate your docs with a page for each specified endpoint. The `openapi` field can contain the path to an OpenAPI document in your docs repo or the URL of a hosted OpenAPI document.

The metadata for the generated pages will have the following default values:

* `title`: The `summary` field from the OpenAPI operation, if present. Otherwise a title generated from the HTTP method and endpoint.
* `description`: The `description` field from the OpenAPI operation, if present.
* `version`: The `version` value from the anchor or tab, if present.
* `deprecated`: The `deprecated` field from the OpenAPI operation, if present. If `true`, a deprecated label will appear next to the endpoint title in the side navigation and on the endpoint page.

<Tip>
  If you have some endpoints in your OpenAPI schema that you want to exclude from your auto-populated API pages, add the [x-hidden](/api-playground/customization/managing-page-visibility#x-hidden) property to the endpoint.
</Tip>

### Example with navigation tabs

```json {5}
"navigation": {
  "tabs": [
    {
        "tab": "API Reference",
        "openapi": "https://petstore3.swagger.io/api/v3/openapi.json"
    }
  ]
}
```

### Example with navigation groups

```json {8-11}
"navigation": {
  "tabs": [
    {
      "tab": "API Reference",
      "groups": [
        {
          "group": "Endpoints",
          "openapi": {
            "source": "/path/to/openapi-1.json",
            "directory": "api-reference"
          }
        }
      ]
    }
  ]
}
```

<Note>
  The directory field is optional. If not specified, the files will be placed in the `api-reference` directory of the docs repo.
</Note>

## Create `MDX` files for API pages

If you want to customize the page metadata, add additional content, omit certain OpenAPI operations, or reorder OpenAPI pages in your navigation, you can create `MDX` pages for each operation. See an [example MDX OpenAPI page from MindsDB](https://github.com/mindsdb/mindsdb/blob/main/docs/rest/databases/create-databases.mdx?plain=1) and how it appears in their [live documentation](https://docs.mindsdb.com/rest/databases/create-databases).

### Manually specify files

Create an `MDX` page for each endpoint and specify which OpenAPI operation to display using the `openapi` field in the frontmatter.

When you reference an OpenAPI operation this way, the name, description, parameters, responses, and API playground are automatically generated from your OpenAPI document.

If you have multiple OpenAPI files, include the file path in your reference to ensure Mintlify finds the correct OpenAPI document. If you have only one OpenAPI file, Mintlify will detect it automatically.

If you want to reference an external OpenAPI file, add the file's URL to your `docs.json`.

<CodeGroup>
  ```mdx Example
  ---
  title: "Get users"
  description: "Returns all plants from the system that the user has access to"
  openapi: "/path/to/openapi-1.json GET /users"
  deprecated: true
  version: "1.0"
  ---
  ```

  ```mdx Format
  ---
  title: "title of the page"
  description: "description of the page"
  openapi: openapi-file-path method path
  deprecated: boolean (not required)
  version: "version-string" (not required)
  ---
  ```
</CodeGroup>

<Note>
  The method and path must exactly match the definition in your OpenAPI specification. If the endpoint doesn't exist in the OpenAPI file, the page will be empty.

  For webhooks, use `webhook` (case insensitive) instead of the HTTP method (like `GET` or `POST`) in your reference.
</Note>

### Autogenerate `MDX` files

Use our Mintlify [scraper](https://www.npmjs.com/package/@mintlify/scraping) to autogenerate `MDX` pages for large OpenAPI documents.

<Note>
  Your OpenAPI document must be valid or the files will not autogenerate.
</Note>

The scraper generates:

* An `MDX` page for each operation in the `paths` field of your OpenAPI document.
* If your OpenAPI document is version 3.1+, an `MDX` page for each operation in the `webhooks` field of your OpenAPI document.
* An array of navigation entries that you can add to your `docs.json`.

<Steps>
  <Step title="Generate `MDX` files.">
    ```bash
    npx @mintlify/scraping@latest openapi-file <path-to-openapi-file>
    ```
  </Step>

  <Step title="Specify an output folder.">
    ```bash
    npx @mintlify/scraping@latest openapi-file <path-to-openapi-file> -o api-reference
    ```

    Add the `-o` flag to specify a folder to populate the files into. If a folder is not specified, the files will populate in the working directory.
  </Step>
</Steps>

### Create `MDX` files for OpenAPI schemas

You can create individual pages for any OpenAPI schema defined in an OpenAPI document's `components.schema` field:

<CodeGroup>
  ```mdx Example
  ---
  openapi-schema: OrderItem
  ---
  ```

  ```mdx Format
  ---
  openapi-schema: "schema-key"
  ---
  ```
</CodeGroup>


# Playground
Source: https://mintlify.com/docs/api-playground/overview

Enable users to interact with your API

## Overview

The API playground is an interactive environment that lets users test and explore your API endpoints. Developers can craft API requests, submit them, and view responses without leaving your documentation.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/playground/API-playground-light.png" alt="API playground for the trigger an update endpoint." className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/playground/API-playground-dark.png" alt="API playground for the trigger an update endpoint." className="hidden dark:block" />
</Frame>

The playground is automatically generated from your OpenAPI specification or AsyncAPI schema so any updates to your API are automatically reflected in the playground. You can also manually create API reference pages after defining a base URL and authentication method in your `docs.json`.

We recommend generating your API playground from an OpenAPI specification. See [OpenAPI Setup](/api-playground/openapi-setup) for more information on creating your OpenAPI document.

## Getting started

<Steps>
  <Step title="Add your OpenAPI specification file.">
    <Info>
      Make sure that your OpenAPI specification file is valid using the [Swagger Editor](https://editor.swagger.io/) or [Mint CLI](https://www.npmjs.com/package/mint).
    </Info>

    ```bash {2}
    /your-project
      |- docs.json
      |- openapi.json
    ```
  </Step>

  <Step title="Configure `docs.json`.">
    Update your `docs.json` to reference your OpenAPI specification. You can add an `openapi` property to any navigation element to auto-populate your docs with a page for each endpoint specified in your OpenAPI document.

    In this example, Mintlify will generate a page for each endpoint specified in `openapi.json` and organize them under the "API reference" group in your navigation.

    ```json
    {
        "navigation": [
          {
            "group": "API reference",
            "openapi": "openapi.json"
          }
      ]
    }
    ```
  </Step>
</Steps>

## Customizing your playground

You can customize your API playground by defining the following properties in your `docs.json`.

<ResponseField name="playground" type="object">
  Configurations for the API playground.

  <Expandable title="playground" defaultOpen="True">
    <ResponseField name="display" type="&#x22;interactive&#x22; | &#x22;simple&#x22; | &#x22;none&#x22;">
      The display mode of the API playground.

      * `"interactive"`: Display the interactive playground.
      * `"simple"`: Display a copyable endpoint with no playground.
      * `"none"`: Display nothing.

      Defaults to `interactive`.
    </ResponseField>

    <ResponseField name="proxy" type="boolean" defaultOpen="True">
      Whether to pass API requests through a proxy server. Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="examples" type="object">
  Configurations for the autogenerated API examples.

  <Expandable title="examples" defaultOpen="True">
    <ResponseField name="languages" type="array of string">
      Example languages for the autogenerated API snippets.

      Languages display in the order specified.
    </ResponseField>

    <ResponseField name="defaults" type="&#x22;required&#x22; | &#x22;all&#x22;">
      Whether to show optional parameters in API examples. Defaults to `all`.
    </ResponseField>
  </Expandable>
</ResponseField>

### Example configuration

```json
{
 "api": {
   "playground": {
     "display": "interactive"
   },
   "examples": {
     "languages": ["curl", "python", "javascript"],
     "defaults": "required"
   }
 }
}
```

This example configures the API playground to be interactive with example code snippets for cURL, Python, and JavaScript. Only required parameters are shown in the code snippets.

### Custom `MDX` pages

When you need more control over your API documentation, create individual `MDX` pages for your endpoints. This allows you to:

* Customize page metadata
* Add additional content like examples
* Hide specific operations
* Reorder pages in your navigation
* Control playground behavior per page

See [MDX Setup](/api-playground/mdx/configuration) for more information on creating individual pages for your API endpoints.

## Further reading

* [AsyncAPI Setup](/api-playground/asyncapi/setup) for more information on creating your AsyncAPI schema to generate WebSocket reference pages.


# Troubleshooting
Source: https://mintlify.com/docs/api-playground/troubleshooting

Common issues with API References

If your API pages aren't displaying correctly, check these common configuration issues:

<AccordionGroup>
  <Accordion title="All of my OpenAPI pages are completely blank">
    In this scenario, it's likely that either Mintlify cannot find your OpenAPI document,
    or your OpenAPI document is invalid.

    Running `mint dev` locally should reveal some of these issues.

    To verify your OpenAPI document will pass validation:

    1. Visit [this validator](https://editor.swagger.io/)
    2. Switch to the "Validate text" tab
    3. Paste in your OpenAPI document
    4. Click "Validate it!"

    If the text box that appears below has a green border, your document has passed validation.
    This is the exact validation package Mintlify uses to validate OpenAPI documents, so if your document
    passes validation here, there's a great chance the problem is elsewhere.

    Additionally, Mintlify does not support OpenAPI 2.0. If your document uses this version of the specification,
    you could encounter this issue. You can convert your document at [editor.swagger.io](https://editor.swagger.io/) (under Edit > Convert to OpenAPI 3):

    <Frame>
      ![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/convert-oas-3.png)
    </Frame>
  </Accordion>

  <Accordion title="One of my OpenAPI pages is completely blank">
    This is usually caused by a misspelled `openapi` field in the page metadata. Make sure
    the HTTP method and path match the HTTP method and path in the OpenAPI document exactly.

    Here's an example of how things might go wrong:

    ```mdx get-user.mdx
    ---
    openapi: "GET /users/{id}/"
    ---
    ```

    ```yaml openapi.yaml
    paths:
      "/users/{id}":
        get: ...
    ```

    Notice that the path in the `openapi` field has a trailing slash, whereas the path in the OpenAPI
    document does not.

    Another common issue is a misspelled filename. If you are specifying a particular OpenAPI document
    in the `openapi` field, ensure the filename is correct. For example, if you have two OpenAPI
    documents `openapi/v1.json` and `openapi/v2.json`, your metadata might look like this:

    ```mdx api-reference/v1/users/get-user.mdx
    ---
    openapi: "v1 GET /users/{id}"
    ---
    ```
  </Accordion>

  <Accordion title="Requests from the API Playground don't work">
    If you have a custom domain configured, this could be an issue with your reverse proxy. By
    default, requests made via the API Playground start with a `POST` request to the
    `/api/request` path on the docs site. If your reverse proxy is configured to only allow `GET`
    requests, then all of these requests will fail. To fix this, configure your reverse proxy to
    allow `POST` requests to the `/api/request` path.

    Alternatively, if your reverse proxy prevents you from accepting `POST` requests, you can configure Mintlify to send requests directly to your backend with the `api.playground.proxy` setting in the `docs.json`, as described in the [settings documentation](/settings#param-proxy). When using this configuration, you will need to configure CORS on your server since requests will come directly from users' browsers rather than through your proxy.
  </Accordion>
</AccordionGroup>


# Create Assistant Chat Topic
Source: https://mintlify.com/docs/api-reference/chat/create-topic

POST /chat/topic
Creates a topic to manage message history for a given AI assistant conversation



# Create Assistant Chat Message
Source: https://mintlify.com/docs/api-reference/chat/generate-message

POST /chat/message
Generate a completion in response to a user query



# Introduction
Source: https://mintlify.com/docs/api-reference/introduction



## Trigger Updates

You can leverage the REST API to programmatically trigger an update when desired.

## Authentication

You can generate an API key through
[the dashboard](https://dashboard.mintlify.com/settings/organization/api-keys). The API key is
associated with the entire org and can be used across multiple deployments.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/external-api-key.png" />
</Frame>

## Admin API key

The Admin API key is used for the majority of the API. It is used to trigger updates via the [Update endpoint](/api-reference/update/trigger).

## Assistant API key

The Assistant API allows you to embed the AI assistant experience grounded in your docs and continually kept up to date into any application of your choosing.

Responses include citations so you can point your users to the right places they need to get help.

<Note>
  The Assistant API token is a public token that can be referenced in your
  frontend code whereas the API key is a server-side token that should be kept
  secret.
</Note>

Now that you have an API key, check out our [example](https://github.com/mintlify/discovery-api-example) for how to use
the API for AI assistant. You can also see a deployed version of this example at [chat.mintlify.com](https://chat.mintlify.com).


# Get Update Status
Source: https://mintlify.com/docs/api-reference/update/status

GET /project/update-status/{statusId}
Get the status of an update from the status ID



# Trigger Update
Source: https://mintlify.com/docs/api-reference/update/trigger

POST /project/update/{projectId}
Trigger an update after updating your OpenAPI document by calling this endpoint in a CI check



# Authentication setup
Source: https://mintlify.com/docs/authentication-personalization/authentication-setup

Guarantee privacy of your docs by authenticating users

Authentication requires users to log in before accessing your documentation. This guide covers setup for each available handshake method.

**Need help choosing?** See the [overview](/authentication-personalization/overview) to compare options.

<Info>
  Authentication methods are available on [Growth and Enterprise plans](https://mintlify.com/pricing?ref=authentication).
</Info>

## Configuring authentication

Select the handshake method that you want to configure.

<Tabs>
  <Tab title="JWT">
    ### Prerequisites

    * An authentication system that can generate and sign JWTs.
    * A backend service that can create redirect URLs.

    ### Implementation

    <Steps>
      <Step title="Generate a private key.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **JWT**.
        4. Enter the URL of your existing login flow and select **Save changes**.
        5. Select **Generate new key**.
        6. Store your key securely where it can be accessed by your backend.
      </Step>

      <Step title="Integrate Mintlify authentication into your login flow.">
        Modify your existing login flow to include these steps after user authentication:

        * Create a JWT containing the authenticated user's info in the `User` format. See [Sending Data](/authentication-personalization/sending-data) for more information.
        * Sign the JWT with your secret key, using the EdDSA algorithm.
        * Create a redirect URL back to the `/login/jwt-callback` path of your docs, including the JWT as the hash.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com` with an existing authentication system at `foo.com`. You want to extend your login flow to grant access to the docs while keeping your docs separate from your dashboard (or you don't have a dashboard).

    Create a login endpoint at `https://foo.com/docs-login` that extends your existing authentication.

    After verifying user credentials:

    * Generate a JWT with user data in Mintlify's format.
    * Sign the JWT and redirect to `https://docs.foo.com/login/jwt-callback#{SIGNED_JWT}`.

    <CodeGroup>
      ```ts TypeScript
      import * as jose from 'jose';
      import { Request, Response } from 'express';

      const TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;

      const signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'EdDSA');

      export async function handleRequest(req: Request, res: Response) {
        const user = {
          expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000), // 2 week session expiration
          groups: res.locals.user.groups,
          content: {
            firstName: res.locals.user.firstName,
            lastName: res.locals.user.lastName,
          },
        };

        const jwt = await new jose.SignJWT(user)
          .setProtectedHeader({ alg: 'EdDSA' })
          .setExpirationTime('10 s') // 10 second JWT expiration
          .sign(signingKey);

        return res.redirect(`https://docs.foo.com/login/jwt-callback#${jwt}`);
      }
      ```

      ```python Python
      import jwt # pyjwt
      import os

      from datetime import datetime, timedelta
      from fastapi.responses import RedirectResponse

      private_key = os.getenv(MINTLIFY_JWT_PEM_SECRET_NAME, '')

      @router.get('/auth')
      async def return_mintlify_auth_status(current_user):
        jwt_token = jwt.encode(
          payload={
            'exp': int((datetime.now() + timedelta(seconds=10)).timestamp()),    # 10 second JWT expiration
            'expiresAt': int((datetime.now() + timedelta(weeks=2)).timestamp()), # 1 week session expiration
            'groups': ['admin'] if current_user.is_admin else [],
            'content': {
              'firstName': current_user.first_name,
              'lastName': current_user.last_name,
            },
          },
          key=private_key,
          algorithm='EdDSA'
        )

        return RedirectResponse(url=f'https://docs.foo.com/login/jwt-callback#{jwt_token}', status_code=302)
      ```
    </CodeGroup>

    ### Redirecting unauthenticated users

    When an unauthenticated user tries to access a protected page, their intended destination is preserved in the redirect to your login URL:

    1. User attempts to visit a protected page: `https://docs.foo.com/quickstart`.
    2. Redirect to your login URL with a redirect query parameter: `https://foo.com/docs-login?redirect=%2Fquickstart`.
    3. After authentication, redirect to `https://docs.foo.com/login/jwt-callback?redirect=%2Fquickstart#{SIGNED_JWT}`.
    4. User lands in their original destination.
  </Tab>

  <Tab title="OAuth 2.0">
    ### Prerequisites

    * An OAuth server that supports the Authorization Code Flow.
    * Ability to create an API endpoint accessible by OAuth access tokens (optional, to enable personalization features).

    ### Implementation

    <Steps>
      <Step title="Configure your OAuth settings.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **OAuth** and configure these fields:

        * **Authorization URL**: Your OAuth endpoint.
        * **Client ID**: Your OAuth 2.0 client identifier.
        * **Client Secret**: Your OAuth 2.0 client secret.
        * **Scopes**: Permissions to request. Use multiple scopes if you need different access levels.
        * **Token URL**: Your OAuth token exchange endpoint.
        * **Info API URL** (optional): Endpoint to retrieve user info for personalization. If omitted, the OAuth flow will only be used to verify identity and the user info will be empty.

        4. Select **Save changes**.
      </Step>

      <Step title="Configure your OAuth server.">
        1. Copy the **Redirect URL** from your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Add the redirect URL as an authorized redirect URL for your OAuth server.
      </Step>

      <Step title="Create your user info endpoint (optional).">
        To enable personalization features, create an API endpoint that:

        * Accepts OAuth access tokens for authentication.
        * Returns user data in the `User` format. See [Sending Data](/authentication-personalization/sending-data) for more information.

        Add this endpoint URL to the **Info API URL** field in your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `foo.com/docs` and you have an existing OAuth server at `auth.foo.com` that supports the Authorization Code Flow.

    **Configure your OAuth server details** in your dashboard:

    * **Authorization URL**: `https://auth.foo.com/authorization`
    * **Client ID**: `ydybo4SD8PR73vzWWd6S0ObH`
    * **Scopes**: `['docs-user-info']`
    * **Token URL**: `https://auth.foo.com/exchange`
    * **Info API URL**: `https://api.foo.com/docs/user-info`

    **Create a user info endpoint** at `api.foo.com/docs/user-info`, which requires an OAuth access token with the `docs-user-info` scope, and returns:

    ```json
    {
      "content": {
        "firstName": "Jane",
        "lastName": "Doe"
      },
      "groups": ["engineering", "admin"]
    }
    ```

    **Configure your OAuth server to allow redirects** to your callback URL.
  </Tab>

  <Tab title="Mintlify Dashboard">
    ### Prerequisites

    * Your documentation users are also your documentation editors.

    ### Implementation

    <Steps>
      <Step title="Enable Mintlify dashboard authentication.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **Mintlify Auth**.
        4. Select **Enable Mintlify Auth**.
      </Step>

      <Step title="Add authorized users.">
        1. In your dashboard, go to [Members](https://dashboard.mintlify.com/settings/organization/members).
        2. Add each person who should have access to your documentation.
        3. Assign appropriate roles based on their editing permissions.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com` and your team uses the dashboard to edit your docs. You want to restrict access to team members only.

    **Enable Mintlify authentication** in your dashboard settings.

    **Verify team access** by checking that all team members are added to your organization.
  </Tab>

  <Tab title="Password">
    <Info>
      Password authentication provides access control only and does **not** support content personalization.
    </Info>

    ### Prerequisites

    * Your security requirements allow sharing passwords among users.

    ### Implementation

    <Steps>
      <Step title="Create a password.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Full Authentication** or **Partial Authentication**.
        3. Select **Password**.
        4. Enter a secure password.
        5. Select **Save changes**.
      </Step>

      <Step title="Distribute access.">
        Securely share the password and documentation URL with authorized users.
      </Step>
    </Steps>

    ## Example

    Your documentation is hosted at `docs.foo.com` and you need basic access control without tracking individual users. You want to prevent public access while keeping setup simple.

    **Create a strong password** in your dashboard. **Share credentials** with authorized users. That's it!
  </Tab>
</Tabs>


# Overview
Source: https://mintlify.com/docs/authentication-personalization/overview

Control who sees your documentation and customize their experience

<Info>
  Authentication methods are available on the [Growth and Enterprise
  plans](https://mintlify.com/pricing?ref=authentication).
</Info>

There are three approaches to manage access and customize your documentation based on user information.

* **Authentication**: Complete privacy protection for all content with full content customization.
* **Partial authentication**: Page-by-page access control with full content customization.
* **Personalization**: Content customization with **no security guarantees**. All content remains publicly accessible.

**Choose authentication** if you need complete security and privacy for all your documentation, including pages, images, search results, and AI assistant features.

**Choose partial authentication** if you want some pages to be public and others private.

**Choose personalization** if you want to customize content based on user information and your documentation can be publicly accessible.

## Handshake methods

Authentication and personalization offer multiple handshake methods for controlling access to your content.

### Available for all methods

**JSON Web Token (JWT)**: Custom system where you manage user tokens with full control over the login flow.

* Pros of JWT:
  * Reduced risk of API endpoint abuse.
  * No CORS configuration.
  * No restrictions on API URLs.
* Cons of JWT:
  * Must be compatible with your existing login flow.
  * Dashboard sessions and docs authentication are decoupled, so your team will log into your dashboard and your docs separately.
  * When you refresh user data, users must log into your docs again. If your users' data changes frequently, they must log in frequently or risk having stale data in your docs.

**OAuth 2.0**: Third-party login integration like Google, GitHub, or other OAuth providers.

* Pros of OAuth 2.0:
  * Heightened security standard.
  * No restrictions on API URLs.
* Cons of OAuth 2.0:
  * Requires significant work if setting up an OAuth server for the first time.
  * Dashboard sessions and docs authentication are decoupled, so your team will log into your dashboard and your docs separately.

### Available for authentication and partial authentication

**Mintlify dashboard**: Allow all of your dashboard users to access your docs.

* Pros of Mintlify dashboard:
  * No configuration required.
  * Enables private preview deployments, restricting access to authenticated users only.
* Cons of Mintlify dashboard:
  * Requires all users of your docs to have an account in your Mintlify dashboard.

**Password**: Shared access with a single global password. Used for access control only. Does not allow for personalization.

* Pros of password:
  * Simple setup with no configuration required to add new users, just share the password.
* Cons of password:
  * Lose personalization features since there is no way to differentiate users with the same password.
  * Must change the password to revoke access.

### Available for personalization

**Shared session**: Use the same session token as your dashboard to personalize content.

* Pros of shared session:
  * Users that are logged into your dashboard are automatically logged into your docs.
  * User sessions are persistent so you can refresh data without requiring a new login.
  * Minimal setup.
* Cons of shared session:
  * Your docs will make a request to your backend.
  * You must have a dashboard that uses session authentication.
  * CORS configuration is generally required.

## Content customization

All three methods allow you to customize content with these features.

### Dynamic `MDX` content

Display dynamic content based on user information like name, plan, or organization.

The `user` variable contains information sent to your docs from logged in users. See [Sending data](/authentication-personalization/sending-data) for more information.

**Example**: Hello, {user.name ?? 'reader'}!

```jsx
Hello, {user.name ?? 'reader'}!
```

This feature is more powerful when you pair it with custom data about your users. For example, you can give different instructions based on a user's plan.

**Example**: Authentication is an enterprise feature. {
  user.org === undefined
  ? <>To access this feature, first create an account at the <a href="https://dashboard.mintlify.com/login">Mintlify dashboard</a>.</>
  : user.org.plan !== 'enterprise'
  ? <>You are currently on the ${user.org.plan ?? 'free'} plan. To speak to our team about upgrading, <a href="mailto:sales@mintlify.com">contact our sales team</a>.</>
  : <>To request this feature for your enterprise org, <a href="mailto:sales@mintlify.com">contact our team</a>.</>
}

```jsx
Authentication is an enterprise feature. {
  user.org === undefined
    ? <>To access this feature, first create an account at the <a href="https://dashboard.mintlify.com/login">Mintlify dashboard</a>.</>
    : user.org.plan !== 'enterprise'
      ? <>You are currently on the ${user.org.plan ?? 'free'} plan. To speak to our team about upgrading, <a href="mailto:sales@mintlify.com">contact our sales team</a>.</>
      : <>To request this feature for your enterprise org, <a href="mailto:sales@mintlify.com">contact our team</a>.</>
}
```

<Note>
  The information in `user` is only available for logged in users. For logged
  out users, the value of `user` will be `{}`. To prevent the page from crashing
  for logged out users, always use optional chaining on your `user` fields. For
  example, `{user.org?.plan}`.
</Note>

### API key prefilling

Automatically populate API playground fields with user-specific values by returning matching field names in your user data. The field names in your user data must exactly match the names in the API playground for automatic prefilling to work.

### Page visibility

Restrict which pages are visible to your users by adding `groups` fields to your pages' frontmatter. By default, every page is visible to every user.

Users will only see pages for `groups` that they are in.

```mdx
---
title: "Managing your users"
description: "Adding and removing users from your organization"
groups: ["admin"]
---
```


# Partial authentication setup
Source: https://mintlify.com/docs/authentication-personalization/partial-authentication-setup

Control access to specific pages

Partial authentication lets you protect private documentation while keeping other pages publicly viewable. Users can browse public content freely and authenticate only when accessing protected pages.

Partial authentication shares all the same features as authentication, but with the ability to allow unauthenticated users to view certain pages.

## Setup

Follow the [Authentication Setup](/authentication-personalization/authentication-setup) guide and select **Partial Authentication** when configuring your chosen handshake method.

## Making pages public

By default, all pages are protected. Add the `public` property to the page's frontmatter to make it viewable without authentication:

```mdx
---
title: "My Page"
public: true
---
```


# Personalization setup
Source: https://mintlify.com/docs/authentication-personalization/personalization-setup

Let users log in for customized documentation experiences

Personalization lets you customize your documentation based on user information. This guide covers setup for each available handshake method.

**Need help choosing?** See the [overview](/authentication-personalization/overview) to compare options.

## Configuring personalization

Select the handshake method that you want to configure.

<Tabs>
  <Tab title="JWT">
    ### Prerequisites

    * A login system that can generate and sign JWTs.
    * A backend service that can create redirect URLs.

    ### Implementation

    <Steps>
      <Step title="Generate a private key.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **JWT**.
        4. Enter the URL of your existing login flow and select **Save changes**.
        5. Select **Generate new key**.
        6. Store your key securely where it can be accessed by your backend.
      </Step>

      <Step title="Integrate Mintlify personalization into your login flow.">
        Modify your existing login flow to include these steps after user login:

        * Create a JWT containing the logged in user's info in the `User` format. See [Sending Data](/authentication-personalization/sending-data) for more information.
        * Sign the JWT with the secret key, using the ES256 algorithm.
        * Create a redirect URL back to your docs, including the JWT as the hash.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `docs.foo.com`. You want your docs to be separate from your dashboard (or you don't have a dashboard) and enable personalization.

    Generate a JWT secret. Then create a login endpoint at `https://foo.com/docs-login` that initiates a login flow to your documentation.

    After verifying user credentials:

    * Generate a JWT with user data in Mintlify's format.
    * Sign the JWT and redirect to `https://docs.foo.com#{SIGNED_JWT}`.

    ```ts
    import * as jose from 'jose';
    import { Request, Response } from 'express';

    const TWO_WEEKS_IN_MS = 1000 * 60 * 60 * 24 * 7 * 2;

    const signingKey = await jose.importPKCS8(process.env.MINTLIFY_PRIVATE_KEY, 'ES256');

    export async function handleRequest(req: Request, res: Response) {
      const user = {
        expiresAt: Math.floor((Date.now() + TWO_WEEKS_IN_MS) / 1000),
        groups: res.locals.user.groups,
        content: {
          firstName: res.locals.user.firstName,
          lastName: res.locals.user.lastName,
        },
      };

      const jwt = await new jose.SignJWT(user)
        .setProtectedHeader({ alg: 'ES256' })
        .setExpirationTime('10 s')
        .sign(signingKey);

      return res.redirect(`https://docs.foo.com#${jwt}`);
    }
    ```

    ### Preserving page anchors

    To redirect users to specific sections after login, use this URL format: `https://docs.foo.com/page#jwt={SIGNED_JWT}&anchor={ANCHOR}`.

    **Example**:

    * Original URL: `https://docs.foo.com/quickstart#step-one`
    * Redirect URL: `https://docs.foo.com/quickstart#jwt={SIGNED_JWT}&anchor=step-one`
  </Tab>

  <Tab title="OAuth 2.0">
    ### Prerequisites

    * An OAuth server that supports the Auth Code with PKCE Flow.
    * Ability to create an API endpoint accessible by OAuth access tokens.

    ### Implementation

    <Steps>
      <Step title="Create user info API endpoint.">
        Create an API endpoint that:

        * Accepts OAuth access tokens for authentication.
        * Returns user data in the `User` format. See [Sending Data](/authentication-personalization/sending-data) for more information.
        * Defines the scopes for access.
      </Step>

      <Step title="Configure your OAuth personalization settings.">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **OAuth** and configure these fields:

        * **Authorization URL**: Your OAuth authorization endpoint.
        * **Client ID**: Your OAuth 2.0 client identifier.
        * **Scopes**: Permissions to request. Must match the scopes of the endpoint that you configured in the first step.
        * **Token URL**: Your OAuth token exchange endpoint.
        * **Info API URL**: Endpoint to retrieve user data for personalization. Created in the first step.

        4. Select **Save changes**
      </Step>

      <Step title="Configure your OAuth server.">
        1. Copy the **Redirect URL** from your [authentication settings](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Add this URL as an authorized redirect URL in your OAuth server configuration.
      </Step>
    </Steps>

    ### Example

    Your documentation is hosted at `foo.com/docs` and you have an existing OAuth server that supports the PKCE flow. You want to personalize your docs based on user data.

    **Create a user info endpoint** at `api.foo.com/docs/user-info`, which requires an OAuth access token with the `docs-user-info` scope and responds with the user's custom data:

    ```json
    {
      "content": {
        "firstName": "Jane",
        "lastName": "Doe"
      },
      "groups": ["engineering", "admin"]
    }
    ```

    **Configure your OAuth server details** in your dashboard:

    * **Authorization URL**: `https://auth.foo.com/authorization`
    * **Client ID**: `ydybo4SD8PR73vzWWd6S0ObH`
    * **Scopes**: `['docs-user-info']`
    * **Token URL**: `https://auth.foo.com/exchange`
    * **Info API URL**: `https://api.foo.com/docs/user-info`

    **Configure your OAuth server** to allow redirects to your callback URL.
  </Tab>

  <Tab title="Shared session">
    ### Prerequisites

    * A dashboard or user portal with cookie-based session authentication.
    * Ability to create an API endpoint at the same origin or subdomain as your dashboard.
      * If your dashboard is at `foo.com`, the **API URL** must start with `foo.com` or `*.foo.com`.
      * If your dashboard is at `dash.foo.com`, the **API URL** must start with `dash.foo.com` or `*.dash.foo.com`.
    * Your docs are hosted at the same domain or subdomain as your dashboard.
      * If your dashboard is at `foo.com`, your **docs** must be hosted at `foo.com` or `*.foo.com`.
      * If your dashboard is at `*.foo.com`, your **docs** must be hosted at `foo.com` or `*.foo.com`.

    ### Implementation

    <Steps>
      <Step title="Create user info API endpoint.">
        Create an API endpoint that:

        * Uses your existing session authentication to identify users
        * Returns user data in the `User` format (see [Sending Data](/authentication-personalization/sending-data))
        * If the API domain and the docs domain **do not exactly match**:
          * Add the docs domain to your API's `Access-Control-Allow-Origin` header (must not be `*`).
          * Set your API's `Access-Control-Allow-Credentials` header to `true`.
          <Warning>
            Only enable CORS headers on this specific endpoint, not your entire dashboard API.
          </Warning>
      </Step>

      <Step title="Configure your personalization settings">
        1. In your dashboard, go to [Authentication](https://dashboard.mintlify.com/settings/deployment/authentication).
        2. Select **Personalization**.
        3. Select **Shared Session**.
        4. Enter your **Info API URL**, which is the endpoint from the first step.
        5. Enter your **Login URL**, where users log into your dashboard.
        6. Select **Save changes**.
      </Step>
    </Steps>

    ### Examples

    #### Dashboard at subdomain, docs at subdomain

    You have a dashboard at `dash.foo.com`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `dash.foo.com/api`. You want to set up personalization for your docs hosted at `docs.foo.com`.

    **Setup process**:

    1. **Create endpoint** `dash.foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Add CORS headers** for this route only:
       * `Access-Control-Allow-Origin`: `https://docs.foo.com`
       * `Access-Control-Allow-Credentials`: `true`
    3. **Configure API URL** in authentication settings: `https://dash.foo.com/api/docs/user-info`.

    #### Dashboard at subdomain, docs at root

    You have a dashboard at `dash.foo.com`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `dash.foo.com/api`. You want to set up personalization for your docs hosted at `foo.com/docs`.

    **Setup process**:

    1. **Create endpoint** `dash.foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Add CORS headers** for this route only:
       * `Access-Control-Allow-Origin`: `https://foo.com`
       * `Access-Control-Allow-Credentials`: `true`
    3. **Configure API URL** in authentication settings: `https://dash.foo.com/api/docs/user-info`.

    #### Dashboard at root, docs at root

    You have a dashboard at `foo.com/dashboard`, which uses cookie-based session authentication. Your dashboard API routes are hosted at `foo.com/api`. You want to set up personalization for your docs hosted at `foo.com/docs`.

    **Setup process**:

    1. **Create endpoint** `foo.com/api/docs/user-info` that identifies users via session authentication and responds with their user data.
    2. **Configure API URL** in authentication settings: `https://foo.com/api/docs/user-info`

    <Note>
      No CORS configuration is needed since the dashboard and docs share the same domain.
    </Note>
  </Tab>
</Tabs>


# Sending data
Source: https://mintlify.com/docs/authentication-personalization/sending-data

User data format for personalizing your documentation

When implementing authentication or personalization, your system returns user data in a specific format that enables content customization. This data can be sent as either a raw JSON object or within a signed JWT, depending on your handshake method. The shape of the data is the same for both.

## User data format

```tsx
type User = {
  expiresAt?: number;
  groups?: string[];
  content?: Record<string, any>;
  apiPlaygroundInputs?: {
    header?: Record<string, any>;
    query?: Record<string, any>;
    cookie?: Record<string, any>;
    server?: Record<string, string>;
  };
};
```

<ParamField path="expiresAt" type="number">
  Session expiration time in **seconds since epoch**. If the user loads a page after this time, their stored data is automatically deleted and they must reauthenticate.
  <Warning><b>For JWT handshakes:</b> This differs from the JWT's `exp` claim, which determines when a JWT is considered invalid. Set the JWT `exp` claim to a short duration (10 seconds or less) for security. Use `expiresAt` for the actual session length (hours to weeks).</Warning>
</ParamField>

<ParamField path="groups" type="string[]">
  A list of groups that the user belongs to. Pages with a matching `groups` field in their metadata will be visible to this user.

  **Example**: User with `groups: ["admin", "engineering"]` can access pages tagged with either the `admin` or `engineering` groups.
</ParamField>

<ParamField path="content" type="object">
  Custom data accessible in your `MDX` content via the `user` variable. Use this for dynamic personalization throughout your documentation.

  **Example**:

  ```json
  { "firstName": "Ronan", "company": "Acme Corp", "plan": "Enterprise" }
  ```

  **Usage in `MDX`**:

  ```mdx
  Welcome back, {user.firstName}! Your {user.plan} plan includes...
  ```

  With the example `user` data, this would render as: Welcome back, Ronan! Your Enterprise plan includes...
</ParamField>

<ParamField path="apiPlaygroundInputs" type="object">
  User-specific values that will be prefilled in the API playground if supplied. Save users time when testing your APIs with their own data.

  **Example**:

  ```json
  {
  "header": { "X-API-Key": "user_api_key_123" },
  "server": { "subdomain": "foo" },
  "query": { "org_id": "12345" }
  }
  ```

  If a user makes requests at a specific subdomain, you can send `{ server: { subdomain: 'foo' } }` as an `apiPlaygroundInputs` field. This value will be prefilled on any API page with the `subdomain` value.

  <Note>The `header`, `query`, and `cookie` fields will only prefill if they are part of your [OpenAPI security scheme](https://swagger.io/docs/specification/authentication/). If a field is in either the `Authorization` or `Server` sections, it will prefill. Creating a standard header parameter named `Authorization` will not enable this feature.</Note>
</ParamField>

## Example user data

```json
{
  "expiresAt": 1735689600,
  "groups": ["admin", "beta-users"],
  "content": {
    "firstName": "Jane",
    "lastName": "Smith",
    "company": "TechCorp",
    "plan": "Enterprise",
    "region": "us-west"
  },
  "apiPlaygroundInputs": {
    "header": {
      "Authorization": "Bearer abc123",
      "X-Org-ID": "techcorp"
    },
    "server": {
      "environment": "production",
      "region": "us-west"
    }
  }
}
```


# Product updates
Source: https://mintlify.com/docs/changelog

New updates and improvements

<Update label="June 2025" rss={{ title: "June Product Updates", description: "AI assistant updates and subscribable changelogs" }}>
  ## AI assistant updates

  * Improved accuracy through agentic RAG with tool calling
  * Provides navigable links to referenced pages so that users can go directly to the source of answers
  * Copy shortcut for code examples generated by assistant
  * "Ask AI" shortcut on code blocks in documentation to generate explanations from the assistant

  Learn more in the [assistant docs](/guides/assistant).

  ## Subscribable changelogs

  * Automatically generate an RSS feed from changelog pages
  * Integrate RSS-enabled updates with Slack, email, and other tools

  Learn more in our new [Changelog guide](/guides/changelogs)
</Update>

<Update label="May 2025">
  ## API playground stability updates

  * Search to find an endpoint
  * Indicate a deprecated endpoint with a tag
  * Hide auto-generated API pages from navigation
  * Upload multipart or form data files

  Learn more at [API playground docs.](/api-playground/)

  ## `mint update`

  Can now use `mint update` to update your CLI.
</Update>

<Update label="April 2025">
  ## Web Editor 3.0

  <Frame>
    ![Webeditor3 Jpe](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/webeditor3.jpeg)
  </Frame>

  Overhauled usability in the WYSIWYG editor.

  **Major improvements**

  * Search for file names using ⌘ + P shortcut
  * Pages load 10x faster
  * Faster load times when searching for a branch
  * Page options tab to configure layout, title, & metadata for SEO
  * Floating toolbar when you highlight text

  **Additional fixes**

  * Fixed top margin for changelog components
  * Improved reliability of right click behavior
  * After clicking publish, you’ll stay on the same page instead of being brought to an empty state
  * Standardized colors in file icons
  * Improved reliability after selecting new branches several times in a row
  * Removed Diff mode
  * More consistency when creating a new folder from the dropdown
  * Fixed block quotes creating more block quotes when trying to deselect

  ## AI Translations in beta

  <Frame>
    ![AI Translations graphic](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/translations.png)
  </Frame>

  Translate all of your documentation with AI. [Learn more.](navigation#localization)

  ## Export docs to PDF in beta

  Export all of your documentation, a subdirectory, or a singe page as a PDF.

  ## React hook support

  Bring interactivity to your docs. All standard React hooks are automatically available in your MDX files. [Learn more.](react-components)
</Update>

<Update label="March 2025">
  ## MCP server generator

  <Frame>
    ![screenshot of MCP server generator](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/mcpgenerator.png)
  </Frame>

  Generate MCP servers so that AI applications can interact with your docs or APIs. Written content is automatically generated as an MCP server, and you can generate an MCP server from your OpenAPI spec with one click.
  Check out [docs on getting started with MCP.](/mcp)

  ## Improvements

  * Tag changelog updates so end users can filter updates
  * Sonnet-3.7 supported for AI Chat. Configure your preferred model through the dashboard
  * Change your deployment name directly in dashboard settings

  ## Bug fixes

  * OG images fixed
  * Fixed icon style inconsistency for anchors without container
  * Improved styling nits for dashboard border for mobile-tablet-desktop responsiveness
  * Show code examples even when in simple mode for API playground
  * Support "command + k" shortcut for search in web editor
  * Codeblocks within callouts expand to fill the width of the callout area
</Update>

<Update label="February 2025">
  ## New configuration schema `docs.json`

  <Frame>
    ![docs.json screenshot](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/docsjson.png)
  </Frame>

  We've introduced a new `docs.json` schema as a replacement for `mint.json`, to support better multi-level versioning, easier visual comprehension, and more consistent terminology. For more information on what's changed, [check out our blog](https://mintlify.com/blog/refactoring-mint-json-into-docs-json).

  Upgrade from `mint.json` to `docs.json` with the following steps:

  1. Make sure your CLI is the latest version

  ```bash
  npm i mint@latest -g
  ```

  1. In your docs repository, run

  ```bash
  mint upgrade
  ```

  1. Delete your old `mint.json` file and push your changes

  ## CI Checks

  Automatically lint your docs to find broken links, discover spelling and grammar issues, or enforce writing styles with your own Vale config. Learn more in our [docs](settings/ci).

  ## .md support for LLMs

  All documentation pages are now automatically available as plain Markdown files—just append `.md` to the URL. This makes it easier for LLMs to ingest individual pages from your documentation.

  ## More Themes

  <Frame>
    ![graphic with text "Themes v2"](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/themes.png)
  </Frame>

  New [pre-built themes](themes) to modify the look & feel of your docs. Configure via your [docs.json file](settings).

  Now available:

  * Maple
  * Palm
  * Willow

  ## Other improvements

  * [Guide to Technical Writing:](https://mintlify.com/guides/introduction)Best practices for writing technical documentation, including audience research, content types, and writing tips.
  * [Dropdown component](navigation#dropdowns): Organize navigation with a dropdown, in addition to tabs and anchors.
  * [AI syntax fixer](https://x.com/ricardonunez_io/status/1892334887644123192): The web editor will catch if there’s a parsing error and use AI to suggest fixes.
</Update>

<Update label="January 2025">
  ## AI Assistant Improvements

  * New UI with dedicated chat page & pre-filled prompts
  * Stability improvements, e.g. bug fixes of editing the wrong file or no files at all
  * More robust knowledge for adding & editing components
  * Improved `docs.json` file editing

  ## Partial Authentication

  Customize access to any page or section of content depending on user permissions. Supports connecting with your own authentication system.

  ## Revamped API Playground

  We’ve overhauled the design and performance of the [API Playground](/api-playground/). Updates include:

  * Easier detail expansion for an overview of a field
  * More intuitive nested design, e.g. adding or deleting items
  * Faster response times

  ## Quality Improvements

  * Support for requiring authentication to access preview deployments
</Update>

<Update label="December 2024">
  ## Authentication

  <Frame>
    ![Authentication screenshot](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/authentication.png)
  </Frame>

  Make docs private by setting up authentication via JWT, OAuth, or a universal password. With this privacy, you can create an internal knowledge base or prevent competitors from seeing your docs.
</Update>

<Update label="November 2024">
  ## AI Writer

  <Frame>
    ![AI Assistant](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/ai-assistant.jpg)
  </Frame>

  You can now ask AI to make changes to your docs, with the context of all existing documentation. Type in a prompt and the writer will propose changes by generating a pull request.

  ## GitLab Integration Upgrade

  We've improved our support for syncing with GitLab, such as enabling automated updates and preview deployments. Check out our [docs on GitLab](/settings/gitlab) to get started.

  ## Web Editor

  <Frame>
    ![Web Editor](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/webeditor.jpg)
  </Frame>

  We've revamped our web editor so that you can now update docs with a fully WYSIWYG experience, while syncing with markdown.

  Check out our [docs on getting started with Web Editor](/editor).

  ## /llms.txt support

  <Frame>
    ![llms.txt support](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/llms.jpg)
  </Frame>

  All docs instances are now automatically hosted at /llms.txt and /llms-full.txt so that LLMs can easily ingest your documentation. For more information, read the [docs on the new llms.txt standard.](https://llmstxt.org)

  ## Localization

  You can now localize your docs which operates similarly to versioning. Add a `locale` to a version and fixed content in Mintlify like "Was this page helpful?" will also match the locale.

  ### Quality Improvements

  * Return chat & search results based on the current version that the user is reading
  * Authenticate users with OAuth, in addition to JWT or Shared Session tokens.
</Update>

<Update label="October 2024">
  ## Changelogs

  Launched a new [Update component](/components/update) to make it easier to display and report updates (like this one) to your users.

  <Frame>
    ![Changelog](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/changelog.jpg)
  </Frame>

  ## Code Line Highlighting

  You can now highlight lines of code in your docs to emphasize and bring attention to important parts by adding a special comment after the language identifier. Use curly braces `{}` and specify line numbers or ranges separated by commas.

  ```javascript Line Highlighting Example {1,3-5}
  const greeting = "Hello, World!";
  function sayHello() {
    console.log(greeting);
  }
  sayHello();
  ```

  ````mdx
  ```javascript Line Highlighting Example {1,3-5}
  const greeting = "Hello, World!";
  function sayHello() {
    console.log(greeting);
  }
  sayHello();
  ```
  ````

  ## Light mode code blocks

  Code blocks now have a light mode variant which can be enabled by adding the following to your `docs.json`:

  ```json
  "codeBlock": {
    "mode": "auto"
  }
  ```

  ## Advanced Footer

  <Frame>
    ![Advanced Footer](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/advanced-footer.gif)
  </Frame>

  You can now add more links to the standard footer. This upgrade
  provides more consistency between landing pages and docs, or greater customization
  if you want to spotlight specific pages like socials or status logs.

  ## Filter search based on the current user

  When personalization is enabled, search results are now filtered based on the current logged in user so that they only see the relevant content.

  ## Custom Prompts for AI Chat

  You can now customize the prompts for the AI chat. Please reach out to [support](mailto:support@mintlify.com) if you'd like to customize the prompts.

  ## Dashboard Improvements

  * Added ability to change custom domain to be /docs directly through dashboard settings.
  * Consolidated the login and signup pages to decrease friction and confusion.
  * Implemented the discovery login flow so that users that are members of multiple organizations can now switch between them.
  * Added login with Google OAuth
  * Added ability to add new deployment through dashboard settings.

  ## Bug Fixes

  * Can now use leading slashes in navigation.
  * Can now edit CSS & JS files in the web editor.
  * Fixed `suggestEdit` not showing up even when enabled.
  * Fixed keyboard navigation for Search and Chat such that you can now use the up and down arrow keys to navigate the results.
  * Don't allow search engines to crawl user-auth protected pages.
  * Revalidate the cache when an org is deleted.
  * We now use the Scalar OpenAPI parser to parse OpenAPI definitions which improves the performance, fixes parsing issues, and surfaces better error messages.
  * Top-level descriptions are now supported in API reference pages autogenerated from OpenAPI definitions.
  * Add in-line-style support for icons
  * Fixed the pop-in of custom CSS in docs.
  * Properly show in-line code styling in conjunction with links.
  * Maintain scroll position when you click the back button in a browser.
</Update>

<Update label="September 2024">
  ## Custom Fonts

  <Frame>
    ![Custom Fonts](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/custom-fonts.jpeg)
  </Frame>

  Personalize the font of your docs to your own font hosted on a CDN or by choosing from Google fonts to match your docs with your brand.

  ## Images in Card components

  Add an `img` property to a card to display an image on the top of the card. Learn more about it [here](/components/cards#image-card).

  ## Update Speed Performances

  <Frame>
    ![Performance Improvements](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/performance-improvements.png)
  </Frame>

  For large projects (\~3,000 files), the download step for docs updates is now
  \~440x faster - a 99.8% time reduction. Across the board, file downloads during
  updates are now \~5.5x faster - an 81.8% time reduction.

  ## SEO improvements

  <Frame>
    ![SEO Improvements](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/seo-improvements.jpeg)
  </Frame>

  We've fixed  both the mobile and desktop layout of our docs so that they are more SEO-friendly - including adding proper aria tags to navbar and toggle elements.

  ## Dashboard Improvements

  * App router migration in the dashboard.
  * Search analytics are now available in the dashboard.
  * Delete an org functionality has been added to the dashboard.
  * Shipped GitLab connection UI.
  * Fix incorrect analytics data.
  * Add-on's can now be directly purchased through the dashboard.

  ## Bug Fixes

  * Fixed a bug where the top bar would not stretch to the width of the screen when it's in custom mode and  the sidebar layout is `sidenav`.
  * Fix relative positioning of the AI widget.

  ## More

  * **Troubleshooting for API pages**: API pages could be complicated so we listed
    common issues to help you sort them out quickly —
    [Read the docs](/api-playground/troubleshooting)
</Update>

<Update label="August 2024">
  ## OpenAPI Reference Pages

  * Endpoints defined by OpenAPI that are complex and recursive are now 98%
    smaller.
  * We now show
    [additionalProperties](https://swagger.io/docs/specification/data-models/dictionaries/)
    in OpenAPI pages.

  ## File Uploads in API Playground

  By default, API playground requests are proxied by Mintlify. Now you can use
  `disableProxy` to disable this behavior and support request types like file
  uploads.

  * [Learn more about API configurations](settings#api-configurations)

  ## Mobile SEO improvements

  We've fixed the mobile layout of our docs so that they are more SEO-friendly -
  including adding proper aria tags to elements.

  ## Support Form

  We added a more detailed support form to the Mintlify dashboard. You can now
  submit a form to get in touch with us.

  ## Bug Fixes

  * Fixed a bug for the Segment integration functionality.
  * We now raise more granular error messages for GitHub permissions when
    interacting with the editor.
  * Fixed bugs where the navigation would not properly expand when a direct link
    was used.
</Update>

<Update label="July 2024">
  ## AI Widget

  <Frame>
    ![AI Widget](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog/widget.png)
  </Frame>

  For `Pro` users, we introduced Mintlify Widget, an extension of your docs to
  answer your users' questions when and where they asked. You can add this
  AI-powered chatbot to any web page: your landing page, inside your product, or
  on your existing documentation pages.

  * [Read the blog announcement](https://mintlify.com/blog/widget)

  ## Pro Plan

  We also updated our pricing plans for better customizability and scale.

  * [Read the blog announcement](https://mintlify.com/blog/pro-plan)

  ## API Playground Code Example Sync

  When you browse API docs, the selected code example now syncs across your pages.

  ## Insights

  Currently in beta, this feature summarizes common user questions and patterns
  into easy-to-digest reports with AI-powered suggestions on how to improve your
  product.
</Update>

<Update label="June 2024">
  ## Launch Week Highlights

  * Themes: Customize your styling with pre-configured themes. Just add the theme Quill, Prism, or Venus to your `docs.json` file and it'll update your docs styling.
  * Search V2: directly query OpenAPI endpoint descriptions and titles to reach API Reference pages, remove hidden pages from search, and enjoy our updated search bar UI.
  * Web Editor branching: create branches in our web editor without an IDE.
  * User Personalization: authenticate users with Shared Session or JWT so that you can show them customized content, such as pre-filling API keys or showing specific content for customers.
  * OpenAPI Automation Upgrades: to auto-populate API Playground pages, you can add an `openapi` field to an object in tabs or anchors arrays in the `docs.json`.
</Update>

<Update label="May 2024">
  ## Okta SSO

  We now support sign-on via Okta SAML and OIDC.

  ## Mintlify REST API

  Programmatically rigger updates to your documentation.
</Update>

<Update label="April 2024">
  ## Custom mode

  Add a configuration to the metadata to remove all elements except for the top bar.
  Example use cases:

  * Create a custom global landing page setup with custom components
  * Add full-screen videos or image galleries
  * Embed custom iFrame demo elements to add intractability to your docs

  Check out our [Custom Mode docs](pages#custom-mode).
</Update>

<Update label="March 2024">
  ## Mintlify MDX for VSCode

  Call snippets of our pre-built components and callouts without leaving VSCode. [Install the extension here](https://marketplace.visualstudio.com/items?itemName=mintlify.mintlify-snippets).
</Update>

<Update label="February 2024">
  ## Quality Improvements

  * Dashboard upgrades: view update logs to see what's changed and status of an update, toggle between Mintlify projects to manage deployments
  * Versioning with tabs fully supported
  * Wildcard redirects now supported
  * CLI Error Detection: we now show the position of invalid frontmatter when there are parsing issues during local development
</Update>

<Update label="January 2024">
  ## Launch Week Highlights

  * Preview Deployments: When you create a pull request, we'll generate a unique link that shows a live preview of what your docs look like in prod. You can share this link with teammates.
  * Snippets V2: We now support fully reusable components and variables for snippets.
  * Open-source MDX Engine: We've exposed two APIs—getCompiledMdx and MDXComponent—so you can access Mintlify markdown and code syntax highlighting. [Contributions to the project](https://github.com/mintlify/mdx) are welcome.
  * AI Chat Insights: Segment chat history by date and increase AI Chat quota from the dashboard, and see how often a specific query appears.
</Update>


# Code
Source: https://mintlify.com/docs/code

Display inline code and code blocks

## Adding code samples

You can add inline code snippets or code blocks. Code blocks support meta options for syntax highlighting, titles, line highlighting, icons, and more.

### Inline code

To denote a `word` or `phrase` as code, enclose it in backticks (\`).

```mdx
To denote a `word` or `phrase` as code, enclose it in backticks (`).
```

### Code blocks

Use [fenced code blocks](https://www.markdownguide.org/extended-syntax/#fenced-code-blocks) by enclosing code in three backticks. Code blocks are copyable, and if you have the assistant enabled, users can ask AI to explain the code.

Specify the programming language for syntax highlighting and to enable meta options. Add any meta options, like a title or icon, after the language.

```java HelloWorld.java lines icon="java"
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````mdx
```java HelloWorld.java lines icon="java"
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

## Code block options

You can add meta options to your code blocks to customize their appearance.

<Note>
  You must specify a programming language for a code block before adding any other meta options.
</Note>

### Option syntax

* **String and boolean options**: Wrap with `""`, `''`, or no quotes.
* **Expression options**: Wrap with `{}`, `""`, or `''`.

### Syntax highlighting

Enable syntax highlighting by specifying the programming language after the opening backticks of a code block.

We use [Shiki](https://shiki.style/) for syntax highlighting and support all available languages. See the full list of [languages](https://shiki.style/languages) in Shiki's documentation.

```java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

````mdx
```java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
````

### Title

Add a title to label your code example. Use `title="Your title"` or a string on a single line.

```javascript Code Block Example
const hello = "world";
```

````mdx
```javascript Code Block Example
const hello = "world";
```
````

### Icon

Add an icon to your code block. You can use [FontAwesome](https://fontawesome.com/icons) icons, [Lucide](https://lucide.dev/icons/) icons, or absolute URLs.

```javascript icon="square-js"
const hello = "world";
```

````mdx
```javascript icon="square-js"
const hello = "world";
```
````

### Line Highlighting

Highlight specific lines in your code blocks using `highlight` with the line numbers or ranges you want to highlight.

```javascript Line Highlighting Example highlight= {1-2,5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Line Highlighting Example highlight={1-2,5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Line focusing

Focus on specific lines in your code blocks using `focus` with line numbers or ranges.

```javascript Line Focus Example focus= {2,4-5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Line Focus Example focus={2,4-5}
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Show line numbers

Display line numbers on the left side of your code block using `lines`.

```javascript Show Line Numbers Example lines
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Show Line Numbers Example lines
const greeting = "Hello, World!";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Expandable

Allow users to expand and collapse long code blocks using `expandable`.

```python Expandable Example expandable
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

@dataclass
class Book:
    title: str
    author: str
    isbn: str
    checked_out: bool = False
    due_date: Optional[datetime] = None

class Library:
    def __init__(self):
        self.books: Dict[str, Book] = {}
        self.checkouts: Dict[str, List[str]] = {}  # patron -> list of ISBNs

    def add_book(self, book: Book) -> None:
        if book.isbn in self.books:
            raise ValueError(f"Book with ISBN {book.isbn} already exists")
        self.books[book.isbn] = book

    def checkout_book(self, isbn: str, patron: str, days: int = 14) -> None:
        if patron not in self.checkouts:
            self.checkouts[patron] = []

        book = self.books.get(isbn)
        if not book:
            raise ValueError("Book not found")

        if book.checked_out:
            raise ValueError("Book is already checked out")

        if len(self.checkouts[patron]) >= 3:
            raise ValueError("Patron has reached checkout limit")

        book.checked_out = True
        book.due_date = datetime.now() + timedelta(days=days)
        self.checkouts[patron].append(isbn)

    def return_book(self, isbn: str) -> float:
        book = self.books.get(isbn)
        if not book or not book.checked_out:
            raise ValueError("Book not found or not checked out")

        late_fee = 0.0
        if datetime.now() > book.due_date:
            days_late = (datetime.now() - book.due_date).days
            late_fee = days_late * 0.50

        book.checked_out = False
        book.due_date = None

        # Remove from patron's checkouts
        for patron, books in self.checkouts.items():
            if isbn in books:
                books.remove(isbn)
                break

        return late_fee

    def search(self, query: str) -> List[Book]:
        query = query.lower()
        return [
            book for book in self.books.values()
            if query in book.title.lower() or query in book.author.lower()
        ]

def main():
    library = Library()

    # Add some books
    books = [
        Book("The Hobbit", "J.R.R. Tolkien", "978-0-261-10295-4"),
        Book("1984", "George Orwell", "978-0-452-28423-4"),
    ]

    for book in books:
        library.add_book(book)

    # Checkout and return example
    library.checkout_book("978-0-261-10295-4", "patron123")
    late_fee = library.return_book("978-0-261-10295-4")
    print(f"Late fee: ${late_fee:.2f}")

if __name__ == "__main__":
    main()
```

````mdx
```python Expandable Example expandable
from datetime import datetime, timedelta
from typing import Dict, List, Optional
from dataclasses import dataclass

# ...

if __name__ == "__main__":
    main()
```
````

### Wrap

Enable text wrapping for long lines using `wrap`. This prevents horizontal scrolling and makes long lines easier to read.

```javascript Wrap Example wrap
const greeting = "Hello, World! I am a long line of text that will wrap to the next line.";
function sayHello() {
  console.log(greeting);
}
sayHello();
```

````mdx
```javascript Wrap Example wrap
const greeting = "Hello, World! I am a long line of text that will wrap to the next line.";
function sayHello() {
  console.log(greeting);
}
sayHello();
```
````

### Diff

Add single line comments with `[!code ++]` and `[!code --]` to mark added and removed lines. You can also mark multiple lines with a single comment, such as `[!code ++:3]` or `[!code --:5]`.

```js Diff Example icon="code" lines
const greeting = "Hello, World!"; // [!code ++]
function sayHello() {
  console.log("Hello, World!"); // [!code --]
  console.log(greeting); // [!code ++]
}
sayHello();
```

````mdx
```js Diff Example icon="code" lines
const greeting = "Hello, World!"; // [\!code ++]
function sayHello() {
  console.log("Hello, World!"); // [\!code --]
  console.log(greeting); // [\!code ++]
}
sayHello();
```
````


# Accordions
Source: https://mintlify.com/docs/components/accordions

A dropdown component to toggle content visibility

<Accordion title="I am an Accordion.">
  You can put any content in here, including other components, like code:

  ```java HelloWorld.java
   class HelloWorld {
       public static void main(String[] args) {
           System.out.println("Hello, World!");
       }
   }
  ```
</Accordion>

<RequestExample>
  ````mdx Accordion Example
  <Accordion title="I am an Accordion.">
    You can put any content in here, including other components, like code:

     ```java HelloWorld.java
      class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
    ```
  </Accordion>
  ````

  ````mdx Accordion Group Example
  <AccordionGroup>
    <Accordion title="FAQ without Icon">
      You can put other components inside Accordions.

      ```java HelloWorld.java
      class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
      ```

      Check out the [Accordion](/components/accordions) docs for all the supported props.
    </Accordion>

    <Accordion title="FAQ with Icon" icon="alien-8bit">
      Check out the [Accordion](/components/accordions) docs for all the supported props.
    </Accordion>

    <Accordion title="FAQ without Icon">
      Check out the [Accordion](/components/accordions) docs for all the supported props.
    </Accordion>
  </AccordionGroup>
  ````
</RequestExample>

### Props

<ResponseField name="title" type="string" required>
  Title in the Accordion preview.
</ResponseField>

<ResponseField name="description" type="string">
  Detail below the title in the Accordion preview.
</ResponseField>

<ResponseField name="defaultOpen" type="boolean" default="false">
  Whether the Accordion is open by default.
</ResponseField>

<ResponseField name="icon" type="string or svg">
  A [Font Awesome icon](https://fontawesome.com/icons), [Lucide
  icon](https://lucide.dev/icons), or SVG code
</ResponseField>

<ResponseField name="iconType" type="string">
  One of "regular", "solid", "light", "thin", "sharp-solid", "duotone", or
  "brands"
</ResponseField>

## Accordion Groups

You can group multiple accordions into a single display. Simply add `<AccordionGroup>` around your existing `<Accordion>` components.

<AccordionGroup>
  <Accordion title="FAQ without Icon">
    You can put other components inside Accordions.

    ```java HelloWorld.java
    class HelloWorld {
        public static void main(String[] args) {
            System.out.println("Hello, World!");
        }
    }
    ```

    Check out the [Accordion](/components/accordions) docs for all the supported props.
  </Accordion>

  <Accordion title="FAQ with Icon" icon="bot">
    Check out the [Accordion](/components/accordions) docs for all the supported props.
  </Accordion>

  <Accordion title="FAQ without Icon">
    Check out the [Accordion](/components/accordions) docs for all the supported props.
  </Accordion>
</AccordionGroup>


# Callouts
Source: https://mintlify.com/docs/components/callouts

Use callouts to add eye-catching context to your content

Callouts can be styled as a Note, Warning, Info, Tip, or Check:

<Note>This adds a note in the content</Note>

```mdx
<Note>This adds a note in the content</Note>
```

<Warning>This raises a warning to watch out for</Warning>

```mdx
<Warning>This raises a warning to watch out for</Warning>
```

<Info>This draws attention to important information</Info>

```mdx
<Info>This draws attention to important information</Info>
```

<Tip>This suggests a helpful tip</Tip>

```mdx
<Tip>This suggests a helpful tip</Tip>
```

<Check>This brings us a checked status</Check>

```mdx
<Check>This brings us a checked status</Check>
```

<Danger>This is a danger callout</Danger>

```jsx
<Danger>This is a danger callout</Danger>
```

<RequestExample>
  ```mdx Callout Example
  <Note>This adds a note in the content</Note>
  ```
</RequestExample>


# Cards
Source: https://mintlify.com/docs/components/cards

Highlight main points or links with customizable icons

<Card title="Card Title" icon="text" href="/components/columns">
  This is how you use a card with an icon and a link. Clicking on this card
  brings you to the Columns page.
</Card>

<RequestExample>
  ```mdx Card Example
  <Card title="Click on me" icon="text" href="/components/columns">
    This is how you use a card with an icon and a link. Clicking on this card
    brings you to the Columns page.
  </Card>
  ```

  ```mdx Image Card Example
  <Card title="Image Card" img="/images/card-with-image.png">
    Here is an example of a card with an image
  </Card>
  ```
</RequestExample>

## Horizontal card

Add a `horizontal` property to display cards horizontally.

<Card title="Horizontal Card" icon="text" horizontal>
  Here is an example of a horizontal card
</Card>

## Image card

Add an `img` property to display an image on the top of the card.

<Card title="Image Card" img="https://mintlify-assets.b-cdn.net/yosemite.jpg">
  Here is an example of a card with an image
</Card>

## Link card

You can customize the CTA and whether or not to display the arrow on the card. By default, the arrow will only show for external links.

<Card title="Link card" icon="link" href="/components/columns" arrow="true" cta="Click here">
  This is how you use a card with an icon and a link. Clicking on this card
  brings you to the Columns page.
</Card>

<RequestExample>
  ```mdx Card Example
  <Card
    title="Link card"
    icon="link"
    href="/components/columns"
    arrow="true"
    cta="Click here"
  >
    This is how you use a card with an icon and a link. Clicking on this card
    brings you to the Columns page.
  </Card>
  ```
</RequestExample>

## Grouping cards

You can group cards in [columns](/components/columns).

<Columns cols={2}>
  <Card title="First Card" icon="panel-left-close">
    This is the first card.
  </Card>

  <Card title="Second Card" icon="panel-right-close">
    This is the second card.
  </Card>
</Columns>

## Props

<ResponseField name="title" type="string" required>
  The title of the card
</ResponseField>

<ResponseField name="icon" type="string or svg">
  A [Font Awesome icon](https://fontawesome.com/icons), [Lucide
  icon](https://lucide.dev/icons), or JSX compatible SVG code in `icon={}`.

  To generate JSX compatible SVG code:

  1. Use the [SVGR converter](https://react-svgr.com/playground/).
  2. Copy the code inside the `<svg/>` tag.
  3. Paste the code into your card. Make sure to only copy and paste the code inside the `<svg/>` tag.
  4. You may need to decrease the height and width to make the image fit.
</ResponseField>

<ResponseField name="iconType" type="string">
  One of `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`
</ResponseField>

<ResponseField name="color" type="string">
  The color of the icon as a hex code
</ResponseField>

<ResponseField name="href" type="string">
  The url that clicking on the card would navigate the user to
</ResponseField>

<ResponseField name="horizontal" type="boolean">
  Makes the card more compact and horizontal
</ResponseField>

<ResponseField name="img" type="string">
  The url or local path to an image to display on the top of the card
</ResponseField>

<ResponseField name="cta" type="string">
  Label for the action button
</ResponseField>

<ResponseField name="arrow" type="boolean">
  Enable or disable the link arrow icon
</ResponseField>


# Code groups
Source: https://mintlify.com/docs/components/code-groups

Display multiple code examples in one component

Use the `CodeGroup` component to display multiple code blocks in a tabbed interface, allowing users to compare implementations across different programming languages or see alternative approaches for the same task.

<CodeGroup>
  ```javascript helloWorld.js
  console.log("Hello World");
  ```

  ```python hello_world.py
  print('Hello World!')
  ```

  ```java HelloWorld.java
  class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World!");
      }
  }
  ```
</CodeGroup>

## Creating code groups

To create a code group, wrap multiple code blocks with `<CodeGroup>` tags. Each code block must include a title, which becomes the tab label.

````mdx
<CodeGroup>

```javascript helloWorld.js
console.log("Hello World");
```

```python hello_world.py
print('Hello World!')
```

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```

</CodeGroup>
````

## Language dropdown

You can replace the tabs in a code group with a dropdown menu to toggle between languages using the `dropdown` prop.

<CodeGroup dropdown>
  ```javascript helloWorld.js
  console.log("Hello World");
  ```

  ```python hello_world.py
  print('Hello World!')
  ```

  ```java HelloWorld.java
  class HelloWorld {
      public static void main(String[] args) {
          System.out.println("Hello, World!");
      }
  }
  ```
</CodeGroup>

````mdx highlight=1
<CodeGroup dropdown>

```javascript helloWorld.js
console.log("Hello World");
```

```python hello_world.py
print('Hello World!')
```

```java HelloWorld.java
class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
```
</CodeGroup>
````


# Columns
Source: https://mintlify.com/docs/components/columns

Show cards side by side in a grid format

The `Columns` component lets you group multiple `Card` components together. It's most often used to put multiple cards in a grid, by specifying the number of grid columns.

<Columns cols={2}>
  <Card title="First Card" icon="panel-left-close">
    Neque porro quisquam est qui dolorem ipsum quia dolor sit amet
  </Card>

  <Card title="Second Card" icon="panel-right-close">
    Lorem ipsum dolor sit amet, consectetur adipiscing elit
  </Card>
</Columns>

<RequestExample>
  ```mdx Card Group Example
  <Columns cols={2}>
    <Card title="First Card">
      Neque porro quisquam est qui dolorem ipsum quia dolor sit amet
    </Card>
    <Card title="Second Card">
      Lorem ipsum dolor sit amet, consectetur adipiscing elit
    </Card>
  </Columns>
  ```
</RequestExample>

### Props

<ResponseField name="cols" default={2}>
  The number of columns per row
</ResponseField>


# Examples
Source: https://mintlify.com/docs/components/examples

Display code blocks in the right sidebar on desktop devices

The `<RequestExample>` and `<ResponseExample>` components display code blocks in the right sidebar to create a two-column layout that keeps examples visible while users scroll through your content. These components are designed for API documentation, but they work on all pages.

Common use cases:

* API endpoint documentation with request and response examples
* Configuration examples alongside explanatory text
* Code samples that users reference while following instructions
* Before and after examples in tutorials

On mobile devices, `<RequestExample>` and `<ResponseExample>` components display as regular code blocks and can be scrolled past.

## RequestExample

Use `<RequestExample>` to pins code examples in the right sidebar. This component works similarly to the [CodeGroup](/components/code-groups) component, but displays the code in the sidebar instead of inline.

You can include multiple code blocks inside a single `<RequestExample>`. Each code block must have a title attribute.

````mdx RequestExample
<RequestExample>

```bash Request
  curl --request POST \
    --url https://dog-api.kinduff.com/api/facts
```

</RequestExample>
````

## ResponseExample

The `<ResponseExample>` component pins code examples in the right sidebar beneath any `<RequestExample>` content on the same page.

````mdx ResponseExample
<ResponseExample>

```json Response
{ "status": "success" }
```

</ResponseExample>
````


# Expandables
Source: https://mintlify.com/docs/components/expandables

Toggle to display nested properties.

<ResponseField name="user" type="User Object">
  <Expandable title="properties">
    <ResponseField name="full_name" type="string">
      The full name of the user
    </ResponseField>

    <ResponseField name="is_over_21" type="boolean">
      Whether the user is over 21 years old
    </ResponseField>
  </Expandable>
</ResponseField>

<RequestExample>
  ```mdx Expandable Example
  <ResponseField name="user" type="User Object">
    <Expandable title="properties">
      <ResponseField name="full_name" type="string">
        The full name of the user
      </ResponseField>

      <ResponseField name="is_over_21" type="boolean">
        Whether the user is over 21 years old
      </ResponseField>
    </Expandable>
  </ResponseField>
  ```
</RequestExample>

## Props

<ResponseField name="title" type="string">
  The name of the object you are showing. Used to generate the "Show NAME" and
  "Hide NAME" text.
</ResponseField>

<ResponseField name="defaultOpen" type="boolean" default="false">
  Set to true to show the component as open when the page loads.
</ResponseField>


# Fields
Source: https://mintlify.com/docs/components/fields

Set parameters for your API or SDK references

There are two types of fields: Parameter Fields and Response Fields.

## Parameter Field

A `ParamField` component is used to define the parameters for your APIs or SDKs. Adding a `ParamField` will automatically add an [API Playground](/api-playground/overview).

<ParamField path="param" type="string" required>
  An example of a parameter field
</ParamField>

<RequestExample>
  ```mdx Path Example
  <ParamField path="param" type="string">
    An example of a parameter field
  </ParamField>
  ```

  ```mdx Body Example
  <ParamField body="user_age" type="integer" default="0" required>
    The age of the user. Cannot be less than 0
  </ParamField>
  ```

  ```mdx Response Example
  <ResponseField name="response" type="string" required>
    A response field example
  </ResponseField>
  ```
</RequestExample>

### Props

<ParamField body="query, path, body, or header" type="string">
  Whether it is a query, path, body, or header parameter followed by the name
</ParamField>

<ParamField body="type" type="string">
  Expected type of the parameter's value

  Supports `number`, `string`, `bool`, `object`.

  Arrays can be defined using the `[]` suffix. For example `string[]`.
</ParamField>

<ParamField body="required" type="boolean">
  Indicate whether the parameter is required
</ParamField>

<ParamField body="deprecated" type="boolean">
  Indicate whether the parameter is deprecated
</ParamField>

<ParamField body="default" type="string">
  Default value used by the server if the request does not provide a value
</ParamField>

<ParamField body="initialValue" type="any">
  Value that will be used to initialize the playground
</ParamField>

<ParamField body="placeholder" type="string">
  Placeholder text for the input in the playground
</ParamField>

<ParamField body="children" type="string">
  Description of the parameter (markdown enabled)
</ParamField>

## Response Field

The `<ResponseField>` component is designed to define the return values of an API. Many docs also use `<ResponseField>` on pages when you need to list the types of something.

<ResponseField name="response" type="string" required>
  A response field example
</ResponseField>

```mdx
<ResponseField name="response" type="string" required>
  A response field example
</ResponseField>
```

### Props

<ResponseField name="name" type="string" required>
  The name of the response value.
</ResponseField>

<ResponseField name="type" type="string" required>
  Expected type of the response value - this can be any arbitrary string.
</ResponseField>

<ResponseField name="default" type="string">
  The default value.
</ResponseField>

<ResponseField name="required" type="boolean">
  Show "required" beside the field name.
</ResponseField>

<ResponseField name="deprecated" type="boolean">
  Whether a field is deprecated or not.
</ResponseField>

<ResponseField name="pre" type="string[]">
  Labels that are shown before the name of the field
</ResponseField>

<ResponseField name="post" type="string[]">
  Labels that are shown after the name of the field
</ResponseField>


# Frames
Source: https://mintlify.com/docs/components/frames

Use the Frame component to wrap images or other components in a container.

Frames are very helpful if you want to center an image.

<Frame>
  <img src="https://mintlify-assets.b-cdn.net/yellowstone.jpeg" />
</Frame>

## Captions

You can add additional context to an image using the optional `caption` prop.

<Frame caption="Yosemite National Park is visited by over 3.5 million people every year">
  <img src="https://mintlify-assets.b-cdn.net/yosemite.jpg" />
</Frame>

## Props

<ResponseField name="caption" type="string">
  Optional caption text to show centered under your component.
</ResponseField>

<RequestExample>
  ```mdx Frame
  <Frame>
    <img src="/path/image.jpg" />
  </Frame>
  ```

  ```mdx Frame with Captions
  <Frame caption="Caption Text">
    <img src="/path/image.jpg" />
  </Frame>
  ```
</RequestExample>


# Icons
Source: https://mintlify.com/docs/components/icons

Use icons from popular icon libraries

<Icon icon="flag" size={32} />

<RequestExample>
  ```mdx Icon Example
  <Icon icon="flag" size={32} />
  ```
</RequestExample>

## Inline Icons

The icon will be placed inline when used in a paragraph.

```markdown Inline Icon Example
<Icon icon="flag" iconType="solid" /> The documentation you want, effortlessly. 
```

<Icon icon="flag" iconType="solid" /> The documentation you want, effortlessly.

### Props

<ResponseField name="icon" type="string" required>
  A [Font Awesome](https://fontawesome.com/icons) icon, [Lucide](https://lucide.dev/icons) icon, URL to an icon, or relative path to an icon.
</ResponseField>

<ResponseField name="iconType" type="string">
  One of `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands` (only for [Font Awesome](https://fontawesome.com/icons) icons).
</ResponseField>

<ResponseField name="color" type="string">
  The color of the icon as a hex code (e.g., `#FF5733`)
</ResponseField>

<ResponseField name="size" type="number">
  The size of the icon in pixels
</ResponseField>


# Mermaid
Source: https://mintlify.com/docs/components/mermaid-diagrams

Display diagrams using Mermaid

<RequestExample>
  ````mdx Mermaid Flowchart Example
  ```mermaid
    flowchart LR
      subgraph subgraph1
          direction TB
          top1[top] --> bottom1[bottom]
      end
      subgraph subgraph2
          direction TB
          top2[top] --> bottom2[bottom]
      end
      %% ^ These subgraphs are identical, except for the links to them:

      %% Link *to* subgraph1: subgraph1 direction is maintained
      outside --> subgraph1
      %% Link *within* subgraph2:
      %% subgraph2 inherits the direction of the top-level graph (LR)
      outside ---> top2
  ```
  ````
</RequestExample>

[Mermaid](https://mermaid.js.org/) lets you create visual diagrams using text and code.

```mermaid
  flowchart LR
    subgraph subgraph1
        direction TB
        top1[top] --> bottom1[bottom]
    end
    subgraph subgraph2
        direction TB
        top2[top] --> bottom2[bottom]
    end
    %% ^ These subgraphs are identical, except for the links to them:

    %% Link *to* subgraph1: subgraph1 direction is maintained
    outside --> subgraph1
    %% Link *within* subgraph2:
    %% subgraph2 inherits the direction of the top-level graph (LR)
    outside ---> top2
```

For a complete list of diagrams supported by Mermaid, check out their [website](https://mermaid.js.org/).

## Syntax for Mermaid diagrams

To create a flowchart, you can write the Mermaid flowchart inside a Mermaid code block.

````mdx
```mermaid
// Your mermaid code block here
```
````


# Panel
Source: https://mintlify.com/docs/components/panel

Specify the content of the right side panel

You can use the `<Panel>` component to customize the right side panel of a page with any components that you want.

If a page has a `<Panel>` component, any [RequestExample](/components/examples#request-example) and [ResponseExample](/components/examples#response-example) components must be inside `<Panel>`.

The components in a `<Panel>` will replace a page's table of contents.

```mdx
<Panel>
  <Info>Pin info to the side panel. Or add any other component.</Info>
</Panel>
```

<Panel>
  <Info>Pin info to the side panel. Or add any other component.</Info>
</Panel>


# Steps
Source: https://mintlify.com/docs/components/steps

Sequence content using the Steps component

Steps are the best way to display a series of actions of events to your users. You can add as many steps as desired.

<Steps>
  <Step title="First Step">
    These are instructions or content that only pertain to the first step.
  </Step>

  <Step title="Second Step">
    These are instructions or content that only pertain to the second step.
  </Step>

  <Step title="Third Step">
    These are instructions or content that only pertain to the third step.
  </Step>
</Steps>

<RequestExample>
  ```mdx Steps Example
  <Steps>
    <Step title="First Step">
      These are instructions or content that only pertain to the first step.
    </Step>
    <Step title="Second Step">
      These are instructions or content that only pertain to the second step.
    </Step>
    <Step title="Third Step">
      These are instructions or content that only pertain to the third step.
    </Step>
  </Steps>
  ```
</RequestExample>

## Steps Props

<ResponseField name="children" type="ReactElement<StepProps>[]" required>
  A list of `Step` components.
</ResponseField>

<ResponseField name="titleSize" type="string" default="p">
  The size of the step titles. One of `p`, `h2` and `h3`.
</ResponseField>

## Individual Step Props

<ResponseField name="children" type="string | ReactNode" required>
  The content of a step either as plain text, or components.
</ResponseField>

<ResponseField name="icon" type="string or svg">
  A [Font Awesome icon](https://fontawesome.com/icons), [Lucide icon](https://lucide.dev/icons), or SVG code in `icon={}`
</ResponseField>

<ResponseField name="iconType" type="string">
  One of `regular`, `solid`, `light`, `thin`, `sharp-solid`, `duotone`, `brands`
</ResponseField>

<ResponseField name="title" type="string">
  The title is the primary text for the step and shows up next to the indicator.
</ResponseField>

<ResponseField name="stepNumber" type="number">
  The number of the step.
</ResponseField>

<ResponseField name="titleSize" type="string" default="p">
  The size of the step titles. One of `p`, `h2` and `h3`.
</ResponseField>


# Tabs
Source: https://mintlify.com/docs/components/tabs

Toggle content using the Tabs component

You can add any number of tabs, and other components inside of tabs.

<Tabs>
  <Tab title="First Tab">
    ☝️ Welcome to the content that you can only see inside the first Tab.
    You can add any number of components inside of tabs.

    ```java HelloWorld.java
      class HelloWorld {
          public static void main(String[] args) {
              System.out.println("Hello, World!");
          }
      }
    ```
  </Tab>

  <Tab title="Second Tab">
    ✌️ Here's content that's only inside the second Tab.
  </Tab>

  <Tab title="Third Tab">
    💪 Here's content that's only inside the third Tab.
  </Tab>
</Tabs>

<RequestExample>
  ````mdx Tabs Example
  <Tabs>
    <Tab title="First Tab">
      ☝️ Welcome to the content that you can only see inside the first Tab.
      ```java HelloWorld.java
        class HelloWorld {
            public static void main(String[] args) {
                System.out.println("Hello, World!");
            }
        }
      ```
    </Tab>
    <Tab title="Second Tab">
      ✌️ Here's content that's only inside the second Tab.
    </Tab>
    <Tab title="Third Tab">
      💪 Here's content that's only inside the third Tab.
    </Tab>
  </Tabs>
  ````
</RequestExample>

## Tab Props

<ResponseField name="title" type="string" required>
  The title of the tab. Short titles are easier to navigate.
</ResponseField>


# Tooltips
Source: https://mintlify.com/docs/components/tooltips

Show a definition when you hover over text

Tooltips are a way to show a definition when you hover over text.

<Tooltip tip="This is a tooltip!">Hover over me</Tooltip> and see a tooltip in action

<RequestExample>
  ```mdx Tooltip Example
  <Tooltip tip="This is a tooltip!">Hover over me</Tooltip>
  ```
</RequestExample>


# Update
Source: https://mintlify.com/docs/components/update

Keep track of changes and updates

Use the `Update` component to display changelog entries, version updates, and release notes with consistent formatting.

<Update label="Example" description="v0.1.1">
  ## Example update

  You can add anything here, like a screenshot, a code snippet, or a list of changes.

  <Frame>
    <img className="block" src="https://mintlify-assets.b-cdn.net/hero-light.png" alt="" />
  </Frame>

  ### Features

  * Responsive design
  * Anchor for each update
  * Generated RSS feed entry for each update
</Update>

## How to use

```mdx Update example
<Update label="2024-10-11" description="v0.1.0" tags={["Mintlify"]}>
  This is how you use a changelog with a label, description,
  and tags.
</Update>
```

Use multiple `Update` components to create [changelogs](/guides/changelogs).

## Props

<ResponseField name="label" type="string" required>
  Label for the update. Appears to the left of the update and creates an anchor link. Labels should be unique.
</ResponseField>

<ResponseField name="tags" type="string[]">
  Tags for the update. Shown as filters in the right side panel.
</ResponseField>

<ResponseField name="description" type="string">
  Description of the update. Appears below the label and tag.
</ResponseField>

<ResponseField name="rss" type="object">
  Title and description that will appear in the RSS feed entry for the update.

  ```mdx wrap
  <Update label="v1.0.1" rss={{ title: "v1.0.1 released", description: "Bug fixes and improvements" }}>
    # What's New in v1.0.1
    
    * Bug fixes
    * Improvements
  </Update>
  ```

  ```xml Example Update item in RSS feed
    <item>
      <title><![CDATA[v1.0.1 released]]></title>
      <description><![CDATA[Bug fixes and improvements]]></description>
      <link>https://mintlify.com/changelog#v101</link>
      <guid isPermaLink="true">https://mintlify.com/changelog#v101</guid>
      <pubDate>Fri, 20 Jun 2025 21:32:19 GMT</pubDate>
    </item>
  ```

  Learn more about [subscribable changelogs](/guides/changelogs#subscribable-changelogs).
</ResponseField>


# Contact support
Source: https://mintlify.com/docs/contact-support

We're here to help you get the most out of Mintlify

## Ask our docs

Select <kbd>Command</kbd> + <kbd>I</kbd> to start a chat with our AI assistant trained on our documentation.

## Watch video tutorials

Visit our [YouTube](https://www.youtube.com/@GetMintlify/videos) channel for tutorials and guides on using Mintlify.

## Message support

Send us a message from your [dashboard](https://dashboard.mintlify.com/) by selecting **Support** in the sidebar.

<Info>
  We aim to respond to all requests within 24 hours, but delays may occur during busy times.
</Info>

## Email support

If you can't access your dashboard, please email us at <a href="mailto:support@mintlify.com">[support@mintlify.com](mailto:support@mintlify.com)</a>.


# Web editor
Source: https://mintlify.com/docs/editor

Build your documentation using the Mintlify web editor

<img className="block dark:hidden my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/editor-light.png" alt="Mintlify web editor interface in light mode" />

<img className="hidden dark:block my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/editor-dark.png" alt="Mintlify web editor interface in dark mode" />

## Introduction

The web editor is a visual interface for creating, editing, and reviewing documentation directly in your browser.

* **Visual editing**: Make changes to your documentation using a what-you-see-is-what-you-get (WYSIWYG) editor that shows how your content will look when published.
* **Git synchronization**: All changes automatically sync with your Git repository to maintain version control.
* **Real-time collaboration**: Multiple team members can work on documentation simultaneously, with changes visible to everyone.
* **No setup required**: Start writing immediately from your dashboard.

### Web editor flow

Here is how you'll typically work in the web editor:

<Steps>
  <Step title="Choose your branch">
    Create a branch or make changes directly to your deployment branch.
  </Step>

  <Step title="Open your file">
    Navigate to an existing file or create a new one.
  </Step>

  <Step title="Edit your content">
    Make changes in the web editor using either visual mode or Markdown mode.
  </Step>

  <Step title="Preview your changes">
    See how your changes will appear in visual mode.
  </Step>

  <Step title="Publish your changes">
    If you're working on your deployment branch, publish your changes directly from the web editor. On other branches, publish your changes through a pull request.
  </Step>
</Steps>

## Editor modes

The web editor has two modes to accommodate different editing preferences and needs.

You can switch between modes at any time using the toggle in the top right corner of the editor toolbar.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/mode-toggle-light.png" alt="Mode toggle icons highlighted in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/mode-toggle-dark.png" alt="Mode toggle icons highlighted in the Mintlify web editor" className="hidden dark:block" />
</Frame>

### Visual mode

Visual mode provides a WYSIWYG experience where the changes that you make in the editor are the changes that will be published to your documentation site. This mode is ideal for when you want to see how your changes will look in real-time.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/visual-mode-light.png" alt="Visual editing mode in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/visual-mode-dark.png" alt="Visual editing mode in the Mintlify web editor" className="hidden dark:block" />
</Frame>

### Markdown mode

Markdown mode provides direct access to the underlying `MDX` code of your documentation. `MDX` combines Markdown syntax with React components, giving you full control over your content structure. This mode is ideal for when you need precise control over component properties or when you prefer to write in Markdown syntax.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/markdown-mode-light.png" alt="Markdown mode in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/markdown-mode-dark.png" alt="Markdown mode in the Mintlify Web Editor" className="hidden dark:block" />
</Frame>

## Git fundamentals

The web editor performs Git operations behind the scenes. Understanding these concepts will help you work more effectively with the web editor and collaborate with team members who are working in their local environments.

<AccordionGroup>
  <Accordion title="Repository">
    Your documentation's source where all files and their history are stored. The web editor connects to your repository to access and modify content.
  </Accordion>

  <Accordion title="Commit">
    A saved snapshot of your changes at a specific point in time.
  </Accordion>

  <Accordion title="Branch">
    A separate workspace for making changes without affecting your live documentation. Think of it as a safe sandbox for experiments and larger updates.
  </Accordion>

  <Accordion title="Deployment branch">
    The main branch that contains your live documentation content. Changes to this branch are automatically published to your documentation site. Often called `main`.
  </Accordion>

  <Accordion title="Pull request">
    A way to propose merging your branch changes into your live documentation. Allows for review and discussion before changes go live. Commonly called a PR.
  </Accordion>

  <Accordion title="Diff">
    A diff (or difference) shows the specific changes between two versions of a file. When reviewing pull requests, diffs highlight what has been added, removed, or modified.
  </Accordion>
</AccordionGroup>

### What the web editor automates

The web editor connects to your Git repository through our [GitHub App](/settings/github) or [GitLab integration](/settings/gitlab) and handles Git automatically. When you:

* **Open a file**: Fetches the latest version from your repository.
* **Make changes in a file**: Tracks your changes as a draft that can become a commit.
* **Save changes**: Creates a commit with your changes.
* **Create a branch**: Creates a new branch in your repository.
* **Publish on your deployment branch**: Creates a commit and pushes directly to your deployment branch.
* **Publish on other branches**: Creates a commit and opens a pull request.

### When to use branches

Branches let you work on changes without affecting the content on your live site. When your changes are ready, you can merge them into your deployment branch with a pull request.

**Best practice: Always work from branches.** This ensures your live documentation stays stable and enables proper review workflows.

## Creating a branch

1. Select the branch name in the editor toolbar (usually `main` by default).
2. Select **New Branch**.
3. Enter a descriptive name for your branch like `update-getting-started` or `fix-installation-steps`.
4. Select **Create Branch**.

<Note>
  You may need to select your new branch from the dropdown menu if the editor does not automatically switch to it.
</Note>

### Saving changes on a branch

To save your changes on a branch, select the **Save Changes** button in the top-right corner of the editor. This creates a commit with your changes and pushes it to your branch.

### Switching branches

1. Select the current branch name in the editor toolbar.
2. Select the branch you want to switch to from the dropdown menu.

<Tip>
  Any unsaved changes will be lost when switching branches. Make sure to save or publish your work before switching.
</Tip>

## Making changes

Edit existing content, create new pages, and organize your site structure in the web editor.

### Navigating files

Use the sidebar file explorer to browse your documentation, or press <kbd>Command</kbd> + <kbd>P</kbd> (<kbd>Ctrl</kbd> + <kbd>P</kbd> on Windows) to search for files.

### Editing content

Make changes to your pages using visual mode or Markdown mode.

In visual mode, press <kbd>/</kbd> to open the dropdown component menu. Add content blocks, callouts, code blocks and other components to customize your documentation.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/component-menu-light.png" alt="The unfurled component menu emphasized in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/component-menu-dark.png" alt="The unfurled component menu emphasized in the Mintlify web editor" className="hidden dark:block" />
</Frame>

### Creating new pages

1. Select the **Create a new file** icon in the file explorer.
   <img
     src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/files-menu-light.png"
     className="block dark:hidden rounded-2xl border border-gray-100 shadow-lg"
     style={{
    width: '268px',
    height: 'auto',
   }}
     alt="Files menu in the web editor."
   />

<img
  src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/files-menu-dark.png"
  className="hidden dark:block rounded-2xl border border-white/10 shadow-lg"
  style={{
    width: '268px',
    height: 'auto',
  }}
  alt="Files menu in the web editor in dark mode."
/>

1. Enter a filename.
2. Press <kbd>Enter</kbd> to create the file.

Your new page will open in the editor, ready for content to be added.

### Updating navigation

Add, remove, and reorder pages in your navigation by editing your `docs.json` file:

1. Navigate to your `docs.json` in the file explorer.
2. Update the `navigation` property to get the navigation structure that you want. See [Navigation](/navigation) for more information.

This example shows how to add a Themes page to the Profile group.

```json title="Adding a Themes page" highlight="18"
{
    "navigation": {
        "groups": [
            {
                "group": "Getting started",
                "pages": [
                    "index",
                    "quickstart",
                    "installation"
                ]
            },
            {
                "group": "Profile",
                "pages": [
                    "settings",
                    "account-types",
                    "dashboard",
                    "themes"
                ]
            }
        ]
    }
}
```

## Publishing changes

Select the **Publish** button to save your changes and make them available.

How your changes are published depends on which branch you are working on:

* **Deployment branch**: Updates your live site immediately.
* **Other branches**: Creates a pull request so you can review changes before they go live.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/publish-flow-light.png" alt="The publish button emphasized in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/publish-flow-dark.png" alt="The publish button emphasized in the Mintlify web editor" className="hidden dark:block" />
</Frame>

## Pull requests and reviewing changes

Pull requests let you propose changes from your branch so that other people can review them before merging into your live documentation. This helps ensure that your changes are correct and gives your team a chance to collaborate on content.

<Tip>
  Even if you're working solo, pull requests are valuable for previewing changes before they go live and maintaining a clear history of updates.
</Tip>

### Creating a pull request on a branch

When you're ready to publish changes from your branch:

1. Make sure all your changes are saved on your branch.
2. Select **Publish Pull Request** in the top-right corner of the editor.
3. Add a title and description for your pull request. A good title and description help reviewers understand the changes you've made.
4. Select **Publish Pull Request**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/pull-request-light.png" alt="Publish pull request button emphasized in the Mintlify web editor" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/editor/pull-request-dark.png" alt="Publish pull request button emphasized in the Mintlify web editor" className="hidden dark:block" />
</Frame>

The web editor will create a pull request in your Git repository and provide a link to view it.

### Reviewing pull requests

Once your pull request is created:

1. **Review your changes**: You and your team members can review your pull request in your Git provider like GitHub or GitLab.
2. **Make additional changes**: After reviewing, make any changes in your web editor. Saving your changes will update your pull request.
3. **Merge when ready**: When your pull request is ready, merge it to deploy changes to your live documentation site.

## Troubleshooting

Here are solutions to common issues you might encounter with the web editor.

<AccordionGroup>
  <Accordion title="Changes not appearing after publishing">
    **Possible causes:**

    * Deployment is still in progress
    * Caching issues in your browser

    **Solutions:**

    1. Check deployment status in your Mintlify Dashboard.
    2. Try hard refreshing your browser (<kbd>Ctrl</kbd> + <kbd>F5</kbd> or <kbd>Cmd</kbd> + <kbd>Shift</kbd> + <kbd>R</kbd>).
    3. Clear your browser cache.
  </Accordion>

  <Accordion title="Permission errors when publishing">
    **Possible causes:**

    * Insufficient permissions to the Git repository
    * Authentication issues with your Git provider

    **Solutions:**

    1. Verify you have correct access to the repository.
    2. Check if your Git integration is properly configured.
    3. Review the [Editor Permissions](/advanced/dashboard/permissions) documentation.
  </Accordion>

  <Accordion title="Editor loading issues">
    **Possible causes:**

    * Network connectivity problems
    * Large documentation repositories

    **Solutions:**

    1. Check your internet connection.
    2. Refresh the page and try again.
    3. Contact support if the issue persists.
  </Accordion>
</AccordionGroup>


# Analytics
Source: https://mintlify.com/docs/guides/analytics

See information about your docs' performance in your dashboard

The analytics page provides insights into how your documentation is performing, helping you identify improvement opportunities and track changes over time.

## Accessing analytics

Navigate to the **Analytics** tab in your [dashboard](https://dashboard.mintlify.com/products/analytics).

Use the range selector to adjust the time period for displayed data.

## Analytics tabs

The analytics dashboard has three main sections:

### Overview

View traffic and other high-level insights about your docs.

* **Visitors**: Unique visitors.
* **Views**: Total page views.
* **Actions**: Combined count of API calls, navbar link clicks, and CTA button clicks.
* **Popular Pages**: Most-visited pages with view counts.
* **Referrers**: Top traffic sources directing users to your docs.

### Feedback

Monitor user satisfaction through voting data:

* **Liked by viewers**: Pages with the most positive feedback (thumbs up votes).
* **Needs improvement**: Pages with the most negative feedback (thumbs down votes).

### Search

Understand how users search within your documentation.

* **Total queries**: Search volume.
* **Top searches**: Most-searched terms.
* **Low-confidence searches**: Queries that may not have found relevant results.

## Improving your docs with analytics

Use your analytics to enhance the user experience of your docs:

**Review popular content**: Ensure your most-visited pages contain current, accurate information and consider expanding successful topics.

**Address feedback concerns**: Investigate pages with negative feedback to identify and resolve user pain points.

**Optimize for search**: Review top search queries so that relevant pages are discoverable and up-to-date. Pay attention to low-confidence searches that might indicate content gaps.


# AI assistant
Source: https://mintlify.com/docs/guides/assistant

Help users succeed with your product and find answers faster

<Info>
  The AI assistant is automatically enabled on [Pro, Growth, and Enterprise plans](https://mintlify.com/pricing?ref=assistant).
</Info>

## About the assistant

The assistant answers questions about your documentation through natural language queries. It is embedded directly in your documentation site, providing users with immediate access to contextual help.

The assistant uses agentic RAG (retrieval-augmented generation) with tool calling powered by Claude Sonnet 4. When users ask questions, the assistant:

* **Searches and retrieves** relevant content from your documentation to provide accurate answers.
* **Cites sources** and provides navigable links to take users directly to referenced pages.
* **Generates copyable code examples** to help users implement solutions from your documentation.

You can view assistant usage through your dashboard to understand user behavior and documentation effectiveness. Export and analyze query data to help identify:

* Frequently asked questions that might need better coverage.
* Content gaps where users struggle to find answers.
* Popular topics that could benefit from additional content.

## Using the assistant

Users can access the assistant in two ways:

* **Keyboard shortcut**: <kbd>Command</kbd> + <kbd>I</kbd> (<kbd>Ctrl</kbd> + <kbd>I</kbd> on Windows)
* **Assistant button** next to the search bar
  <img
    src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/assistant/assistant-button-light.png"
    className="block dark:hidden rounded-2xl border border-gray-100 shadow-lg"
    style={{
    width: '268px',
    height: 'auto',
  }}
    alt="Search bar and assistant button in light mode."
  />
  <img
    src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/assistant/assistant-button-dark.png"
    className="hidden dark:block rounded-2xl border border-white/10 shadow-lg"
    style={{
    width: '268px',
    height: 'auto',
  }}
    alt="Search bar and assistant button in dark mode."
  />

Both methods open a chat panel on the right side of your docs. Users can ask any question and the assistant will search your documentation for an answer. If no relevant information is found, the assistant will respond that it cannot answer the question.

## Making content AI ingestible

Structure your documentation to help the assistant provide accurate, relevant answers. Clear organization and comprehensive context benefit both human readers and AI understanding.

<Card title="Structure and organization">
  * Use semantic markup.
  * Write descriptive headings for sections.
  * Create a logical information hierarchy.
  * Use consistent formatting across your docs.
  * Include comprehensive metadata in page frontmatter.
  * Break up long blocks of text into shorter paragraphs.
</Card>

<Card title="Context">
  * Define specific terms and acronyms when first introduced.
  * Provide sufficient conceptual content about features and procedures.
  * Include examples and use cases.
  * Cross-reference related topics.
  * Add [hidden pages](/guides/hidden-pages) with additional context that users don't need, but the assistant can reference.
</Card>

## Exporting and analyzing queries

Review and export queries from your dashboard to understand how people interact with your documentation and identify improvement opportunities. Some ways that analyzing queries can help you improve your documentation:

* Identify content gaps where frequent queries receive insufficient answers.
* Discover user behavior patterns and common information needs from themes and patterns in queries.
* Prioritize high-traffic pages for accuracy and quality improvements.

You can explore queries from your [dashboard](https://dashboard.mintlify.com/products/assistant), but to get more powerful insights we recommend exporting a `CSV` file of your queries, responses, and sources to analyze with your preferred AI tool.

1. Navigate to the [assistant page](https://dashboard.mintlify.com/products/assistant) in your dashboard.
2. Select **Export to CSV**.
3. Analyze the exported data using your preferred tool.

<Card title="Sample analysis prompts">
  * Summarize the most common themes of the queries.
  * List any queries that had no sources cited.
  * Find patterns in unsuccessful interactions.
</Card>

## Changing the model

The assistant uses Claude Sonnet 4 by default. We have found that this model performs the best when searching and answering questions.

If you want to select another model:

1. Navigate to the [assistant page](https://dashboard.mintlify.com/products/assistant) in your dashboard.
2. Select **Manage**.
3. Choose your preferred model.
4. Select **Save**.

Available models:

<Columns cols={2}>
  <Card
    title="Claude 4 Sonnet"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="h-6 w-6"
      width="400"
      height="400"
      viewBox="0 0 400 400"
      fill="none"
    >
      <path
        d="M124.011 241.251L173.175 213.666L174.001 211.27L173.175 209.937H170.779L162.562 209.431L134.472 208.672L110.109 207.66L86.5063 206.394L80.5676 205.129L75 197.79L75.5736 194.129L80.5676 190.771L87.721 191.396L103.529 192.475L127.251 194.112L144.459 195.124L169.952 197.773H174.001L174.575 196.136L173.191 195.124L172.112 194.112L147.564 177.477L120.991 159.897L107.072 149.774L99.5479 144.645L95.7518 139.837L94.1153 129.343L100.948 121.818L110.126 122.442L112.471 123.067L121.767 130.22L141.625 145.59L167.556 164.688L171.352 167.843L172.871 166.763L173.056 166.004L171.352 163.153L157.248 137.66L142.199 111.729L135.501 100.982L133.729 94.5371C133.105 91.8882 132.649 89.6612 132.649 86.9449L140.427 76.3835L144.729 75L155.105 76.3835L159.475 80.1795L165.92 94.9251L176.363 118.14L192.56 149.706L197.301 159.07L199.831 167.742L200.776 170.391H202.413V168.872L203.745 151.09L206.209 129.258L208.604 101.167L209.431 93.2548L213.345 83.7731L221.123 78.6442L227.197 81.5461L232.191 88.6995L231.499 93.3223L228.53 112.623L222.709 142.857L218.913 163.102H221.123L223.654 160.572L233.895 146.973L251.103 125.462L258.696 116.925L267.553 107.494L273.239 103.006H283.986L291.898 114.766L288.355 126.913L277.288 140.95L268.11 152.845L254.95 170.559L246.734 184.731L247.493 185.862L249.45 185.676L279.177 179.349L295.239 176.448L314.405 173.158L323.077 177.207L324.021 181.323L320.613 189.742L300.115 194.804L276.073 199.612L240.272 208.081L239.833 208.402L240.339 209.026L256.469 210.545L263.369 210.916H280.257L311.705 213.261L319.922 218.694L324.848 225.341L324.021 230.402L311.368 236.847L294.294 232.798L254.444 223.316L240.778 219.908H238.889V221.039L250.277 232.174L271.147 251.019L297.28 275.314L298.613 281.32L295.256 286.061L291.713 285.555L268.751 268.278L259.893 260.501L239.833 243.613H238.5V245.384L243.123 252.149L267.536 288.845L268.801 300.098L267.03 303.759L260.703 305.969L253.752 304.704L239.462 284.644L224.717 262.053L212.822 241.807L211.371 242.634L204.353 318.235L201.063 322.098L193.471 325L187.144 320.192L183.787 312.414L187.144 297.044L191.193 276.984L194.483 261.041L197.452 241.234L199.224 234.654L199.106 234.215L197.655 234.401L182.724 254.899L160.015 285.588L142.047 304.822L137.745 306.526L130.287 302.662L130.979 295.762L135.146 289.621L160.015 257.987L175.014 238.382L184.698 227.062L184.63 225.425H184.057L118.005 268.312L106.246 269.831L101.184 265.09L101.809 257.312L104.204 254.781L124.062 241.116L123.994 241.183L124.011 241.251Z"
        fill="#D97757"
      />
    </svg>
  }
  />

  <Card
    title="Claude 3.7 Sonnet"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="h-6 w-6"
      width="400"
      height="400"
      viewBox="0 0 400 400"
      fill="none"
    >
      <path
        d="M124.011 241.251L173.175 213.666L174.001 211.27L173.175 209.937H170.779L162.562 209.431L134.472 208.672L110.109 207.66L86.5063 206.394L80.5676 205.129L75 197.79L75.5736 194.129L80.5676 190.771L87.721 191.396L103.529 192.475L127.251 194.112L144.459 195.124L169.952 197.773H174.001L174.575 196.136L173.191 195.124L172.112 194.112L147.564 177.477L120.991 159.897L107.072 149.774L99.5479 144.645L95.7518 139.837L94.1153 129.343L100.948 121.818L110.126 122.442L112.471 123.067L121.767 130.22L141.625 145.59L167.556 164.688L171.352 167.843L172.871 166.763L173.056 166.004L171.352 163.153L157.248 137.66L142.199 111.729L135.501 100.982L133.729 94.5371C133.105 91.8882 132.649 89.6612 132.649 86.9449L140.427 76.3835L144.729 75L155.105 76.3835L159.475 80.1795L165.92 94.9251L176.363 118.14L192.56 149.706L197.301 159.07L199.831 167.742L200.776 170.391H202.413V168.872L203.745 151.09L206.209 129.258L208.604 101.167L209.431 93.2548L213.345 83.7731L221.123 78.6442L227.197 81.5461L232.191 88.6995L231.499 93.3223L228.53 112.623L222.709 142.857L218.913 163.102H221.123L223.654 160.572L233.895 146.973L251.103 125.462L258.696 116.925L267.553 107.494L273.239 103.006H283.986L291.898 114.766L288.355 126.913L277.288 140.95L268.11 152.845L254.95 170.559L246.734 184.731L247.493 185.862L249.45 185.676L279.177 179.349L295.239 176.448L314.405 173.158L323.077 177.207L324.021 181.323L320.613 189.742L300.115 194.804L276.073 199.612L240.272 208.081L239.833 208.402L240.339 209.026L256.469 210.545L263.369 210.916H280.257L311.705 213.261L319.922 218.694L324.848 225.341L324.021 230.402L311.368 236.847L294.294 232.798L254.444 223.316L240.778 219.908H238.889V221.039L250.277 232.174L271.147 251.019L297.28 275.314L298.613 281.32L295.256 286.061L291.713 285.555L268.751 268.278L259.893 260.501L239.833 243.613H238.5V245.384L243.123 252.149L267.536 288.845L268.801 300.098L267.03 303.759L260.703 305.969L253.752 304.704L239.462 284.644L224.717 262.053L212.822 241.807L211.371 242.634L204.353 318.235L201.063 322.098L193.471 325L187.144 320.192L183.787 312.414L187.144 297.044L191.193 276.984L194.483 261.041L197.452 241.234L199.224 234.654L199.106 234.215L197.655 234.401L182.724 254.899L160.015 285.588L142.047 304.822L137.745 306.526L130.287 302.662L130.979 295.762L135.146 289.621L160.015 257.987L175.014 238.382L184.698 227.062L184.63 225.425H184.057L118.005 268.312L106.246 269.831L101.184 265.09L101.809 257.312L104.204 254.781L124.062 241.116L123.994 241.183L124.011 241.251Z"
        fill="#D97757"
      />
    </svg>
  }
  />

  <Card
    title="GPT 4.1"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 400 400"
      width="24"
      height="24"
      className="h-6 w-6"
    >
      <path d="M294.93 130.971a79.712 79.712 0 00-6.85-65.48c-17.46-30.4-52.56-46.04-86.84-38.68A79.747 79.747 0 00141.11.001c-35.04-.08-66.13 22.48-76.91 55.82a79.754 79.754 0 00-53.31 38.67c-17.59 30.32-13.58 68.54 9.92 94.54a79.712 79.712 0 006.85 65.48c17.46 30.4 52.56 46.04 86.84 38.68a79.687 79.687 0 0060.13 26.8c35.06.09 66.16-22.49 76.94-55.86a79.754 79.754 0 0053.31-38.67c17.57-30.32 13.55-68.51-9.94-94.51zm-120.28 168.11a59.77 59.77 0 01-38.39-13.88c.49-.26 1.34-.73 1.89-1.07l63.72-36.8a10.36 10.36 0 005.24-9.07v-89.83l26.93 15.55c.29.14.48.42.52.74v74.39c-.04 33.08-26.83 59.9-59.91 59.97zm-128.84-55.03a59.71 59.71 0 01-7.15-40.18c.47.28 1.3.79 1.89 1.13l63.72 36.8c3.23 1.89 7.23 1.89 10.47 0l77.79-44.92v31.1c.02.32-.13.63-.38.83l-64.41 37.19c-28.69 16.52-65.33 6.7-81.92-21.95zm-16.77-139.09c7-12.16 18.05-21.46 31.21-26.29 0 .55-.03 1.52-.03 2.2v73.61c-.02 3.74 1.98 7.21 5.23 9.06l77.79 44.91-26.93 15.55c-.27.18-.61.21-.91.08l-64.42-37.22c-28.63-16.58-38.45-53.21-21.95-81.89zm221.26 51.49l-77.79-44.92 26.93-15.54c.27-.18.61-.21.91-.08l64.42 37.19c28.68 16.57 38.51 53.26 21.94 81.94a59.94 59.94 0 01-31.2 26.28v-75.81c.03-3.74-1.96-7.2-5.2-9.06zm26.8-40.34c-.47-.29-1.3-.79-1.89-1.13l-63.72-36.8a10.375 10.375 0 00-10.47 0l-77.79 44.92v-31.1c-.02-.32.13-.63.38-.83l64.41-37.16c28.69-16.55 65.37-6.7 81.91 22a59.95 59.95 0 017.15 40.1zm-168.51 55.43l-26.94-15.55a.943.943 0 01-.52-.74v-74.39c.02-33.12 26.89-59.96 60.01-59.94 14.01 0 27.57 4.92 38.34 13.88-.49.26-1.33.73-1.89 1.07l-63.72 36.8a10.344 10.344 0 00-5.24 9.06l-.04 89.79zm14.63-31.54l34.65-20.01 34.65 20v40.01l-34.65 20-34.65-20z"/>
    </svg>
  }
  />

  <Card
    title="GPT-4o"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 400 400"
      width="24"
      height="24"
      className="h-6 w-6"
    >
      <path d="M294.93 130.971a79.712 79.712 0 00-6.85-65.48c-17.46-30.4-52.56-46.04-86.84-38.68A79.747 79.747 0 00141.11.001c-35.04-.08-66.13 22.48-76.91 55.82a79.754 79.754 0 00-53.31 38.67c-17.59 30.32-13.58 68.54 9.92 94.54a79.712 79.712 0 006.85 65.48c17.46 30.4 52.56 46.04 86.84 38.68a79.687 79.687 0 0060.13 26.8c35.06.09 66.16-22.49 76.94-55.86a79.754 79.754 0 0053.31-38.67c17.57-30.32 13.55-68.51-9.94-94.51zm-120.28 168.11a59.77 59.77 0 01-38.39-13.88c.49-.26 1.34-.73 1.89-1.07l63.72-36.8a10.36 10.36 0 005.24-9.07v-89.83l26.93 15.55c.29.14.48.42.52.74v74.39c-.04 33.08-26.83 59.9-59.91 59.97zm-128.84-55.03a59.71 59.71 0 01-7.15-40.18c.47.28 1.3.79 1.89 1.13l63.72 36.8c3.23 1.89 7.23 1.89 10.47 0l77.79-44.92v31.1c.02.32-.13.63-.38.83l-64.41 37.19c-28.69 16.52-65.33 6.7-81.92-21.95zm-16.77-139.09c7-12.16 18.05-21.46 31.21-26.29 0 .55-.03 1.52-.03 2.2v73.61c-.02 3.74 1.98 7.21 5.23 9.06l77.79 44.91-26.93 15.55c-.27.18-.61.21-.91.08l-64.42-37.22c-28.63-16.58-38.45-53.21-21.95-81.89zm221.26 51.49l-77.79-44.92 26.93-15.54c.27-.18.61-.21.91-.08l64.42 37.19c28.68 16.57 38.51 53.26 21.94 81.94a59.94 59.94 0 01-31.2 26.28v-75.81c.03-3.74-1.96-7.2-5.2-9.06zm26.8-40.34c-.47-.29-1.3-.79-1.89-1.13l-63.72-36.8a10.375 10.375 0 00-10.47 0l-77.79 44.92v-31.1c-.02-.32.13-.63.38-.83l64.41-37.16c28.69-16.55 65.37-6.7 81.91 22a59.95 59.95 0 017.15 40.1zm-168.51 55.43l-26.94-15.55a.943.943 0 01-.52-.74v-74.39c.02-33.12 26.89-59.96 60.01-59.94 14.01 0 27.57 4.92 38.34 13.88-.49.26-1.33.73-1.89 1.07l-63.72 36.8a10.344 10.344 0 00-5.24 9.06l-.04 89.79zm14.63-31.54l34.65-20.01 34.65 20v40.01l-34.65 20-34.65-20z"/>
    </svg>
  }
  />

  <Card
    title="o3-mini"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 400 400"
      width="24"
      height="24"
      className="h-6 w-6"
    >
      <path d="M294.93 130.971a79.712 79.712 0 00-6.85-65.48c-17.46-30.4-52.56-46.04-86.84-38.68A79.747 79.747 0 00141.11.001c-35.04-.08-66.13 22.48-76.91 55.82a79.754 79.754 0 00-53.31 38.67c-17.59 30.32-13.58 68.54 9.92 94.54a79.712 79.712 0 006.85 65.48c17.46 30.4 52.56 46.04 86.84 38.68a79.687 79.687 0 0060.13 26.8c35.06.09 66.16-22.49 76.94-55.86a79.754 79.754 0 0053.31-38.67c17.57-30.32 13.55-68.51-9.94-94.51zm-120.28 168.11a59.77 59.77 0 01-38.39-13.88c.49-.26 1.34-.73 1.89-1.07l63.72-36.8a10.36 10.36 0 005.24-9.07v-89.83l26.93 15.55c.29.14.48.42.52.74v74.39c-.04 33.08-26.83 59.9-59.91 59.97zm-128.84-55.03a59.71 59.71 0 01-7.15-40.18c.47.28 1.3.79 1.89 1.13l63.72 36.8c3.23 1.89 7.23 1.89 10.47 0l77.79-44.92v31.1c.02.32-.13.63-.38.83l-64.41 37.19c-28.69 16.52-65.33 6.7-81.92-21.95zm-16.77-139.09c7-12.16 18.05-21.46 31.21-26.29 0 .55-.03 1.52-.03 2.2v73.61c-.02 3.74 1.98 7.21 5.23 9.06l77.79 44.91-26.93 15.55c-.27.18-.61.21-.91.08l-64.42-37.22c-28.63-16.58-38.45-53.21-21.95-81.89zm221.26 51.49l-77.79-44.92 26.93-15.54c.27-.18.61-.21.91-.08l64.42 37.19c28.68 16.57 38.51 53.26 21.94 81.94a59.94 59.94 0 01-31.2 26.28v-75.81c.03-3.74-1.96-7.2-5.2-9.06zm26.8-40.34c-.47-.29-1.3-.79-1.89-1.13l-63.72-36.8a10.375 10.375 0 00-10.47 0l-77.79 44.92v-31.1c-.02-.32.13-.63.38-.83l64.41-37.16c28.69-16.55 65.37-6.7 81.91 22a59.95 59.95 0 017.15 40.1zm-168.51 55.43l-26.94-15.55a.943.943 0 01-.52-.74v-74.39c.02-33.12 26.89-59.96 60.01-59.94 14.01 0 27.57 4.92 38.34 13.88-.49.26-1.33.73-1.89 1.07l-63.72 36.8a10.344 10.344 0 00-5.24 9.06l-.04 89.79zm14.63-31.54l34.65-20.01 34.65 20v40.01l-34.65 20-34.65-20z"/>
    </svg>
  }
  />

  <Card
    title="Gemini 2.5 Pro (Preview)"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 90 90"
      width="24"
      height="24"
      className="h-6 w-6"
    >
      <defs>
        <linearGradient id="gemini25pro-gradient" x1="60.0525" y1="33.3396" x2="34.8444" y2="52.867" gradientUnits="userSpaceOnUse">
          <stop offset="0%" stopColor="#9168C0" />
          <stop offset="34.3%" stopColor="#5684D1" />
          <stop offset="67.2%" stopColor="#1BA1E3" />
        </linearGradient>
      </defs>
      <path
        d="M90 45.09C65.838 46.573 46.573 65.838 45.09 90h-.18C43.43 65.837 24.163 46.57 0 45.09v-.18C24.163 43.43 43.43 24.163 44.91 0h.18C46.573 24.162 65.838 43.427 90 44.91V45.09z"
        fill="url(#gemini25pro-gradient)"
      />
    </svg>
  }
  />

  <Card
    title="Llama 4 Maverick"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      xmlnsXlink="http://www.w3.org/1999/xlink"
      width="24"
      height="16"
      viewBox="0 0 287.56 191"
      className="h-6 w-6"
    >
      <defs>
        <linearGradient id="Grad_Logo1" x1="61" y1="117" x2="259" y2="127" gradientUnits="userSpaceOnUse">
          <stop style={{ stopColor: "#0064e1" }} offset="0" />
          <stop style={{ stopColor: "#0064e1" }} offset="0.4" />
          <stop style={{ stopColor: "#0073ee" }} offset="0.83" />
          <stop style={{ stopColor: "#0082fb" }} offset="1" />
        </linearGradient>
        <linearGradient id="Grad_Logo2" x1="45" y1="139" x2="45" y2="66" gradientUnits="userSpaceOnUse">
          <stop style={{ stopColor: "#0082fb" }} offset="0" />
          <stop style={{ stopColor: "#0064e0" }} offset="1" />
        </linearGradient>
      </defs>
      <path
        style={{ fill: "#0081fb" }}
        d="m31.06,125.96c0,10.98 2.41,19.41 5.56,24.51 4.13,6.68 10.29,9.51 16.57,9.51 8.1,0 15.51-2.01 29.79-21.76 11.44-15.83 24.92-38.05 33.99-51.98l15.36-23.6c10.67-16.39 23.02-34.61 37.18-46.96 11.56-10.08 24.03-15.68 36.58-15.68 21.07,0 41.14,12.21 56.5,35.11 16.81,25.08 24.97,56.67 24.97,89.27 0,19.38-3.82,33.62-10.32,44.87-6.28,10.88-18.52,21.75-39.11,21.75l0-31.02c17.63,0 22.03-16.2 22.03-34.74 0-26.42-6.16-55.74-19.73-76.69-9.63-14.86-22.11-23.94-35.84-23.94-14.85,0-26.8,11.2-40.23,31.17-7.14,10.61-14.47,23.54-22.7,38.13l-9.06,16.05c-18.2,32.27-22.81,39.62-31.91,51.75-15.95,21.24-29.57,29.29-47.5,29.29-21.27,0-34.72-9.21-43.05-23.09-6.8-11.31-10.14-26.15-10.14-43.06z"
      />
      <path
        style={{ fill: "url(#Grad_Logo1)" }}
        d="m24.49,37.3c14.24-21.95 34.79-37.3 58.36-37.3 13.65,0 27.22,4.04 41.39,15.61 15.5,12.65 32.02,33.48 52.63,67.81l7.39,12.32c17.84,29.72 27.99,45.01 33.93,52.22 7.64,9.26 12.99,12.02 19.94,12.02 17.63,0 22.03-16.2 22.03-34.74l27.4-.86c0,19.38-3.82,33.62-10.32,44.87-6.28,10.88-18.52,21.75-39.11,21.75-12.8,0-24.14-2.78-36.68-14.61-9.64-9.08-20.91-25.21-29.58-39.71l-25.79-43.08c-12.94-21.62-24.81-37.74-31.68-45.04-7.39-7.85-16.89-17.33-32.05-17.33-12.27,0-22.69,8.61-31.41,21.78z"
      />
      <path
        style={{ fill: "url(#Grad_Logo2)" }}
        d="m82.35,31.23c-12.27,0-22.69,8.61-31.41,21.78-12.33,18.61-19.88,46.33-19.88,72.95 0,10.98 2.41,19.41 5.56,24.51l-26.48,17.44c-6.8-11.31-10.14-26.15-10.14-43.06 0-30.75 8.44-62.8 24.49-87.55 14.24-21.95 34.79-37.3 58.36-37.3z"
      />
    </svg>
  }
  />

  <Card
    title="Grok 3"
    horizontal
    icon={
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="34"
      height="33"
      viewBox="0 0 34 33"
      fill="none"
      className="h-6 w-6"
    >
      <path
        d="M13.2371 21.0407L24.3186 12.8506C24.8619 12.4491 25.6384 12.6057 25.8973 13.2294C27.2597 16.5185 26.651 20.4712 23.9403 23.1851C21.2297 25.8989 17.4581 26.4941 14.0108 25.1386L10.2449 26.8843C15.6463 30.5806 22.2053 29.6665 26.304 25.5601C29.5551 22.3051 30.562 17.8683 29.6205 13.8673L29.629 13.8758C28.2637 7.99809 29.9647 5.64871 33.449 0.844576C33.5314 0.730667 33.6139 0.616757 33.6964 0.5L29.1113 5.09055V5.07631L13.2343 21.0436"
        fill="currentColor"
        id="mark"
      />
      <path
        d="M10.9503 23.0313C7.07343 19.3235 7.74185 13.5853 11.0498 10.2763C13.4959 7.82722 17.5036 6.82767 21.0021 8.2971L24.7595 6.55998C24.0826 6.07017 23.215 5.54334 22.2195 5.17313C17.7198 3.31926 12.3326 4.24192 8.67479 7.90126C5.15635 11.4239 4.0499 16.8403 5.94992 21.4622C7.36924 24.9165 5.04257 27.3598 2.69884 29.826C1.86829 30.7002 1.0349 31.5745 0.36364 32.5L10.9474 23.0341"
        fill="currentColor"
        id="mark"
      />
    </svg>
  }
  />
</Columns>


# Changelogs
Source: https://mintlify.com/docs/guides/changelogs

Post product updates in your docs with a subscribable RSS feed

Create a changelog for your docs by adding [Update components](/components/update) to a page.

Check out the [Mintlify changelog](/changelog) as an example: you can include links, images, text, and demos of your new features in each update.

## Setting up your changelog

<Steps>
  <Step title="Create a page for your changelog">
    1. Create a new page in your docs such as `changelog.mdx` or `updates.mdx`.
    2. Add your changelog page to your navigation scheme in your `docs.json`.
  </Step>

  <Step title="Add Update components to your changelog">
    Add an `Update` for each changelog entry.

    Include relevant information like feature releases, bug fixes, or other announcements.
  </Step>
</Steps>

```mdx Example changelog.mdx
---
title: "Changelog"
description: "Product updates and announcements"
---
<Update label="March 2025" description="v0.0.10">
  Added a new Wintergreen flavor.

  Released a new version of the Spearmint flavor, now with 10% more mint.
</Update>

<Update label="February 2025" description="v0.0.09">
  Released a new version of the Spearmint flavor.
</Update>
```

## Customizing your changelog

Control how people navigate your changelog and stay up to date with your product information.

### Table of contents

Each `label` property for an `Update` automatically creates an entry in the right sidebar's table of contents. This is the default navigation for your changelog.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-toc-light.png" alt="Changelog with table of contents displayed in light mode." className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-toc-dark.png" alt="Changelog with table of contents displayed in dark mode." className="hidden dark:block" />
</Frame>

### Tag filters

Add `tags` to your `Update` components to replace the table of contents with tag filters. Users can filter the changelog by selecting one or more tags:

```mdx Tag filters example wrap
<Update label="March 2025" description="v0.0.10" tags={["Wintergreen", "Spearmint"]}>
  Added a new Wintergreen flavor.

  Released a new version of the Spearmint flavor, now with 10% more mint.
</Update>

<Update label="February 2025" description="v0.0.09" tags={["Spearmint"]}>
  Released a new version of the Spearmint flavor.
</Update>

<Update label="January 2025" description="v0.0.08" tags={["Peppermint", "Spearmint"]}>
  Deprecated the Peppermint flavor.

  Released a new version of the Spearmint flavor.
</Update>
```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-filters-light.png" alt="Changelog in light mode with the Peppermint tag filter selected." className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-filters-dark.png" alt="Changelog in dark mode with the Peppermint tag filter selected." className="hidden dark:block" />
</Frame>

<Tip>
  The table of contents and changelog filters are hidden when using `custom`, `center`, or `wide` page modes. Learn more about [page modes](/pages#page-mode).
</Tip>

### Subscribable changelogs

Using `Update` components creates a subscribable RSS feed at your page URL + `/rss.xml`. For example, `mintlify.com/docs/changelog/rss.xml`. New updates are automatically included in the feed when published.

```xml Example RSS feed
<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title><![CDATA[Product Updates]]></title>
        <description><![CDATA[New updates and improvements]]></description>
        <link>https://mintlify-changelogs-guide.mintlify.app</link>
        <generator>RSS for Node</generator>
        <lastBuildDate>Fri, 20 Jun 2025 21:36:14 GMT</lastBuildDate>
        <atom:link href="https://mintlify-changelogs-guide.mintlify.app/changelog/rss.xml" rel="self" type="application/rss+xml"/>
        <copyright><![CDATA[Mintlify]]></copyright>
        <docs>https://mintlify-changelogs-guide.mintlify.app</docs>
        <item>
            <title><![CDATA[Subscribable changelogs]]></title>
            <description><![CDATA[Post product updates in your docs with a subscribable RSS feed]]></description>
            <link>https://mintlify-changelogs-guide.mintlify.app/changelog#june-20-2025</link>
            <guid isPermaLink="true">https://mintlify-changelogs-guide.mintlify.app/changelog#june-20-2025</guid>
            <pubDate>Fri, 20 Jun 2025 21:04:47 GMT</pubDate>
        </item>
    </channel>
</rss>
```

RSS feeds can integrate with Slack, email, or other subscription tools to notify users of product changes. Some options include:

* [Slack](https://slack.com/help/articles/218688467-Add-RSS-feeds-to-Slack)
* [Email](https://zapier.com/apps/email/integrations/rss/1441/send-new-rss-feed-entries-via-email) via Zapier
* Discord bots like [Readybot](https://readybot.io) or [RSS Feeds to Discord Bot](https://rss.app/en/bots/rssfeeds-discord-bot)

To make the RSS feed discoverable, you can display an RSS icon button that links to the feed at the top of the page. Add `rss: true` to the page frontmatter:

```mdx
---
rss: true
---
```

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-rss-button-light.png" alt="Changelog page in light mode with RSS feed button enabled." className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/changelog-rss-button-dark.png" alt="Changelog page in dark mode with RSS feed button enabled." className="hidden dark:block" />
</Frame>


# Claude Code
Source: https://mintlify.com/docs/guides/claude-code

Configure Claude Code to help write, review, and update your docs

Claude Code is an agentic command line tool that can help you maintain your documentation. It can write new content, review existing pages, and keep docs up to date.

You can train Claude Code to understand your documentation standards and workflows by adding a `CLAUDE.md` file to your project and refining it over time.

## Getting started

**Prerequisites:**

* Active Claude subscription (Pro, Max, or API access)

**Setup:**

1. Install Claude Code:

```bash
npm install -g @anthropic-ai/claude-code
```

2. Navigate to your docs directory.
3. (Optional) Add the `CLAUDE.md` file below to your project.
4. Run `claude` to start.

## CLAUDE.md template

Save a `CLAUDE.md` file at the root of your docs directory to help Claude Code understand your project. This file trains Claude Code on your documentation standards, preferences, and workflows. See [Manage Claude's memory](https://docs.anthropic.com/en/docs/claude-code/memory) in the Anthropic docs for more information.

Copy this example template or make changes for your docs specifications:

```mdx
# Mintlify documentation

## Working relationship
- You can push back on ideas-this can lead to better documentation. Cite sources and explain your reasoning when you do so
- ALWAYS ask for clarification rather than making assumptions
- NEVER lie, guess, or make up information

## Project context
- Format: MDX files with YAML frontmatter
- Config: docs.json for navigation, theme, settings
- Components: Mintlify components

## Content strategy
- Document just enough for user success - not too much, not too little
- Prioritize accuracy and usability of information
- Make content evergreen when possible
- Search for existing information before adding new content. Avoid duplication unless it is done for a strategic reason
- Check existing patterns for consistency
- Start by making the smallest reasonable changes

## Frontmatter requirements for pages
- title: Clear, descriptive page title
- description: Concise summary for SEO/navigation

## Writing standards
- Second-person voice ("you")
- Prerequisites at start of procedural content
- Test all code examples before publishing
- Match style and formatting of existing pages
- Include both basic and advanced use cases
- Language tags on all code blocks
- Alt text on all images
- Relative paths for internal links

## Git workflow
- NEVER use --no-verify when committing
- Ask how to handle uncommitted changes before starting
- Create a new branch when no clear branch exists for changes
- Commit frequently throughout development
- NEVER skip or disable pre-commit hooks

## Do not
- Skip frontmatter on any MDX file
- Use absolute URLs for internal links
- Include untested code examples
- Make assumptions - always ask for clarification
```

## Sample prompts

Once you have Claude Code set up, try these prompts to see how it can help with common documentation tasks. You can copy and paste these examples directly, or adapt them for your specific needs.

### Convert notes to polished docs

Turn rough drafts into proper Markdown pages with components and frontmatter.

**Example prompt:**

```text wrap
Convert this text into a properly formatted MDX page: [paste your text here]
```

### Review docs for consistency

Get suggestions to improve style, formatting, and component usage.

**Example prompt:**

```text wrap
Review the files in docs/ and suggest improvements for consistency and clarity
```

### Update docs when features change

Keep documentation current when your product evolves.

**Example prompt:**

```text wrap
Our API now requires a version parameter. Update our docs to include version=2024-01 in all examples
```

### Generate comprehensive code examples

Create multi-language examples with error handling.

**Example prompt:**

```text wrap
Create code examples for [your API endpoint] in JavaScript, Python, and cURL with error handling
```

## Extending Claude Code

Beyond manually prompting Claude Code, you can integrate it with your existing workflows.

### Automation with GitHub Actions

Run Claude Code automatically when code changes to keep docs up to date. You can trigger documentation reviews on pull requests or update examples when API changes are detected.

### Multi-instance workflows

Use separate Claude Code sessions for different tasks - one for writing new content and another for reviewing and quality assurance. This helps maintain consistency and catch issues that a single session might miss.

### Team collaboration

Share your refined `CLAUDE.md` file with your team to ensure consistent documentation standards across all contributors. Teams often develop project-specific prompts and workflows that become part of their documentation process.

### Custom commands

Create reusable slash commands in `.claude/commands/` for frequently used documentation tasks specific to your project or team.


# Cursor
Source: https://mintlify.com/docs/guides/cursor

Configure Cursor to be your writing assistant

Transform Cursor into a documentation expert that knows your components, style guide, and best practices.

## Using Cursor with Mintlify

Cursor rules provide persistent context about your documentation, ensuring more consistent suggestions that fit your standards and style.

* **Project rules** are stored in your documentation repository and shared with your team.
* **User rules** apply to your personal Cursor environment.

We recommend creating project rules for your docs so that all contributors have access to the same rules.

Create rules files in the `.cursor/rules` directory of your docs repo. See the [Cursor Rules documentation](https://docs.cursor.com/context/rules) for complete setup instructions.

## Example project rule

This rule provides Cursor with context to properly format Mintlify components and follow technical writing best practices.

You can use this example as-is or customize it for your documentation:

* **Writing standards**: Update language guidelines to match your style guide.
* **Component patterns**: Add project-specific components or modify existing examples.
* **Code examples**: Replace generic examples with real API calls and responses for your product.
* **Style and tone preferences**: Adjust terminology, formatting, and other rules.

Add this rule with any modifications as an `.mdc` file in the `.cursor/rules` directory of your docs repo.

````mdx wrap
# Mintlify technical writing rule

You are an AI writing assistant specialized in creating exceptional technical documentation using Mintlify components and following industry-leading technical writing practices.

## Core writing principles

### Language and style requirements

- Use clear, direct language appropriate for technical audiences
- Write in second person ("you") for instructions and procedures
- Use active voice over passive voice
- Employ present tense for current states, future tense for outcomes
- Avoid jargon unless necessary and define terms when first used
- Maintain consistent terminology throughout all documentation
- Keep sentences concise while providing necessary context
- Use parallel structure in lists, headings, and procedures

### Content organization standards

- Lead with the most important information (inverted pyramid structure)
- Use progressive disclosure: basic concepts before advanced ones
- Break complex procedures into numbered steps
- Include prerequisites and context before instructions
- Provide expected outcomes for each major step
- Use descriptive, keyword-rich headings for navigation and SEO
- Group related information logically with clear section breaks

### User-centered approach

- Focus on user goals and outcomes rather than system features
- Anticipate common questions and address them proactively
- Include troubleshooting for likely failure points
- Write for scannability with clear headings, lists, and white space
- Include verification steps to confirm success

## Mintlify component reference

### Callout components

#### Note - Additional helpful information

<Note>
Supplementary information that supports the main content without interrupting flow
</Note>

#### Tip - Best practices and pro tips

<Tip>
Expert advice, shortcuts, or best practices that enhance user success
</Tip>

#### Warning - Important cautions

<Warning>
Critical information about potential issues, breaking changes, or destructive actions
</Warning>

#### Info - Neutral contextual information

<Info>
Background information, context, or neutral announcements
</Info>

#### Check - Success confirmations

<Check>
Positive confirmations, successful completions, or achievement indicators
</Check>

### Code components

#### Single code block

Example of a single code block:

```javascript config.js
const apiConfig = {
  baseURL: 'https://api.example.com',
  timeout: 5000,
  headers: {
    'Authorization': `Bearer ${process.env.API_TOKEN}`
  }
};
```

#### Code group with multiple languages

Example of a code group:

<CodeGroup>
```javascript Node.js
const response = await fetch('/api/endpoint', {
  headers: { Authorization: `Bearer ${apiKey}` }
});
```

```python Python
import requests
response = requests.get('/api/endpoint', 
  headers={'Authorization': f'Bearer {api_key}'})
```

```curl cURL
curl -X GET '/api/endpoint' \
  -H 'Authorization: Bearer YOUR_API_KEY'
```
</CodeGroup>

#### Request/response examples

Example of request/response documentation:

<RequestExample>
```bash cURL
curl -X POST 'https://api.example.com/users' \
  -H 'Content-Type: application/json' \
  -d '{"name": "John Doe", "email": "john@example.com"}'
```
</RequestExample>

<ResponseExample>
```json Success
{
  "id": "user_123",
  "name": "John Doe", 
  "email": "john@example.com",
  "created_at": "2024-01-15T10:30:00Z"
}
```
</ResponseExample>

### Structural components

#### Steps for procedures

Example of step-by-step instructions:

<Steps>
<Step title="Install dependencies">
  Run `npm install` to install required packages.
  
  <Check>
  Verify installation by running `npm list`.
  </Check>
</Step>

<Step title="Configure environment">
  Create a `.env` file with your API credentials.
  
  ```bash
  API_KEY=your_api_key_here
  ```
  
  <Warning>
  Never commit API keys to version control.
  </Warning>
</Step>
</Steps>

#### Tabs for alternative content

Example of tabbed content:

<Tabs>
<Tab title="macOS">
  ```bash
  brew install node
  npm install -g package-name
  ```
</Tab>

<Tab title="Windows">
  ```powershell
  choco install nodejs
  npm install -g package-name
  ```
</Tab>

<Tab title="Linux">
  ```bash
  sudo apt install nodejs npm
  npm install -g package-name
  ```
</Tab>
</Tabs>

#### Accordions for collapsible content

Example of accordion groups:

<AccordionGroup>
<Accordion title="Troubleshooting connection issues">
  - **Firewall blocking**: Ensure ports 80 and 443 are open
  - **Proxy configuration**: Set HTTP_PROXY environment variable
  - **DNS resolution**: Try using 8.8.8.8 as DNS server
</Accordion>

<Accordion title="Advanced configuration">
  ```javascript
  const config = {
    performance: { cache: true, timeout: 30000 },
    security: { encryption: 'AES-256' }
  };
  ```
</Accordion>
</AccordionGroup>

### Cards and columns for emphasizing information

Example of cards and card groups:

<Card title="Getting started guide" icon="rocket" href="/quickstart">
Complete walkthrough from installation to your first API call in under 10 minutes.
</Card>

<CardGroup cols={2}>
<Card title="Authentication" icon="key" href="/auth">
  Learn how to authenticate requests using API keys or JWT tokens.
</Card>

<Card title="Rate limiting" icon="clock" href="/rate-limits">
  Understand rate limits and best practices for high-volume usage.
</Card>
</CardGroup>

### API documentation components

#### Parameter fields

Example of parameter documentation:

<ParamField path="user_id" type="string" required>
Unique identifier for the user. Must be a valid UUID v4 format.
</ParamField>

<ParamField body="email" type="string" required>
User's email address. Must be valid and unique within the system.
</ParamField>

<ParamField query="limit" type="integer" default="10">
Maximum number of results to return. Range: 1-100.
</ParamField>

<ParamField header="Authorization" type="string" required>
Bearer token for API authentication. Format: `Bearer YOUR_API_KEY`
</ParamField>

#### Response fields

Example of response field documentation:

<ResponseField name="user_id" type="string" required>
Unique identifier assigned to the newly created user.
</ResponseField>

<ResponseField name="created_at" type="timestamp">
ISO 8601 formatted timestamp of when the user was created.
</ResponseField>

<ResponseField name="permissions" type="array">
List of permission strings assigned to this user.
</ResponseField>

#### Expandable nested fields

Example of nested field documentation:

<ResponseField name="user" type="object">
Complete user object with all associated data.

<Expandable title="User properties">
  <ResponseField name="profile" type="object">
  User profile information including personal details.
  
  <Expandable title="Profile details">
    <ResponseField name="first_name" type="string">
    User's first name as entered during registration.
    </ResponseField>
    
    <ResponseField name="avatar_url" type="string | null">
    URL to user's profile picture. Returns null if no avatar is set.
    </ResponseField>
  </Expandable>
  </ResponseField>
</Expandable>
</ResponseField>

### Media and advanced components

#### Frames for images

Wrap all images in frames:

<Frame>
<img src="/images/dashboard.png" alt="Main dashboard showing analytics overview" />
</Frame>

<Frame caption="The analytics dashboard provides real-time insights">
<img src="/images/analytics.png" alt="Analytics dashboard with charts" />
</Frame>

#### Videos

Use the HTML video element for self-hosted video content:

<video
  controls
  className="w-full aspect-video rounded-xl"
  src="link-to-your-video.com"
></video>

Embed YouTube videos using iframe elements:

<iframe
  className="w-full aspect-video rounded-xl"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>

#### Tooltips

Example of tooltip usage:

<Tooltip tip="Application Programming Interface - protocols for building software">
API
</Tooltip>

#### Updates

Use updates for changelogs:

<Update label="Version 2.1.0" description="Released March 15, 2024">
## New features
- Added bulk user import functionality
- Improved error messages with actionable suggestions

## Bug fixes
- Fixed pagination issue with large datasets
- Resolved authentication timeout problems
</Update>

## Required page structure

Every documentation page must begin with YAML frontmatter:

```yaml
---
title: "Clear, specific, keyword-rich title"
description: "Concise description explaining page purpose and value"
---
```

## Content quality standards

### Code examples requirements

- Always include complete, runnable examples that users can copy and execute
- Show proper error handling and edge case management
- Use realistic data instead of placeholder values
- Include expected outputs and results for verification
- Test all code examples thoroughly before publishing
- Specify language and include filename when relevant
- Add explanatory comments for complex logic
- Never include real API keys or secrets in code examples

### API documentation requirements

- Document all parameters including optional ones with clear descriptions
- Show both success and error response examples with realistic data
- Include rate limiting information with specific limits
- Provide authentication examples showing proper format
- Explain all HTTP status codes and error handling
- Cover complete request/response cycles

### Accessibility requirements

- Include descriptive alt text for all images and diagrams
- Use specific, actionable link text instead of "click here"
- Ensure proper heading hierarchy starting with H2
- Provide keyboard navigation considerations
- Use sufficient color contrast in examples and visuals
- Structure content for easy scanning with headers and lists

## Component selection logic

- Use **Steps** for procedures and sequential instructions
- Use **Tabs** for platform-specific content or alternative approaches
- Use **CodeGroup** when showing the same concept in multiple programming languages
- Use **Accordions** for progressive disclosure of information
- Use **RequestExample/ResponseExample** specifically for API endpoint documentation
- Use **ParamField** for API parameters, **ResponseField** for API responses
- Use **Expandable** for nested object properties or hierarchical information
````


# Deployments
Source: https://mintlify.com/docs/guides/deployments

Troubleshoot your deployments

Your documentation site automatically deploys when you push changes to your connected repository. This requires the Mintlify GitHub app to be properly installed and connected.

If your latest changes are not appearing on your live site, first check that the GitHub app is installed on the account or organization that owns your docs repository. See [GitHub troubleshooting](/settings/github#troubleshooting) for more information.

If the GitHub app is connected, but changes are still not deploying, you can manually trigger a rebuild from your dashboard.

## Manually triggering a deployment

<Steps>
  <Step title="Verify your latest commit was successful.">
    Check that your latest commit appears in your docs repository and did not encounter any errors.
  </Step>

  <Step title="Manually trigger a deployment.">
    Go to your [dashboard](https://dashboard.mintlify.com) and select the deploy button.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/deployments/manual-update-light.png" alt="The manual update button emphasized with an orange rectangle." className="block dark:hidden" />

      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/deployments/manual-update-dark.png" alt="The manual update button emphasized with an orange rectangle." className="hidden dark:block" />
    </Frame>
  </Step>
</Steps>


# Hidden pages
Source: https://mintlify.com/docs/guides/hidden-pages

Exclude pages from your navigation

Hidden pages are removed from your site's navigation but remain publicly accessible to anyone who knows their URL.

Use hidden pages for content that you want to be accessible on your site or referenced as context for AI tools, but not discoverable through the navigation.

For content requiring strict access control, you must configure [authentication](/authentication-personalization/authentication-setup).

If you want to hide pages for specific groups of users, use personalization to control [page visibility](/authentication-personalization/overview#page-visibility).

## Hiding a page

A page is hidden if it is not included in your `docs.json` navigation. To hide a page, remove it from your navigation structure.

Hidden pages use the same URL structure as regular pages based on their file path.  For example,  `guides/hidden-page.mdx` would be accessible at `docs.yoursite.com/guides/hidden-page`.

See an [example of a hidden page](/guides/hidden-page-example).

<Note>
  Some navigation elements like sidebars, dropdowns, and tabs may appear empty or shift layout on hidden pages.
</Note>

## Search, SEO, and AI indexing

By default, hidden pages are excluded from indexing for search engines, internal search within your docs, and as context for the AI assistant. To include hidden pages in search results and as context for the assistant, add the `seo` property to your `docs.json`:

```json
"seo": {
    "indexing": "all"
}
```

To exclude a specific page, add `noindex: "true"` to its frontmatter.


# Migrations
Source: https://mintlify.com/docs/guides/migration

How to migrate documentation from your existing provider

You can use our [public packages](https://www.npmjs.com/package/@mintlify/scraping) to convert your existing documentation to Mintlify.

We currently support automated migration for:

<CardGroup cols="2">
  <Card
    title="Docusaurus"
    icon={<svg className="h-6 w-6" width="36" height="36" viewBox="0 -19 256 256" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid">
  <g>
  		<rect fill="#FFFFFF" x="126.030769" y="45.9487179" width="110.276923" height="44.6358974">

</rect>
  		<path d="M26.2564103,191.671795 C16.5441641,191.671795 8.0830359,186.385067 3.54067692,178.54359 C1.30231795,182.408533 0,186.883938 0,191.671795 C0,206.17321 11.7549949,217.928205 26.2564103,217.928205 L52.5128205,217.928205 L52.5128205,191.671795 L26.2564103,191.671795 Z" fill="#3ECC5F">

</path>
  		<path d="M144.384656,53.006441 L236.308349,47.2615385 L236.308349,34.1333333 C236.308349,19.6319179 224.552041,7.87692308 210.051938,7.87692308 L91.8980923,7.87692308 L88.616041,2.19241026 C87.1561846,-0.334769231 83.5104821,-0.334769231 82.0519385,2.19241026 L78.7698872,7.87692308 L75.4878359,2.19241026 C74.0279795,-0.334769231 70.3822769,-0.334769231 68.9237333,2.19241026 L65.6416821,7.87692308 L62.3596308,2.19241026 C60.8997744,-0.334769231 57.2540718,-0.334769231 55.7955282,2.19241026 L52.5134769,7.87692308 C52.4845949,7.87692308 52.4570256,7.88086154 52.4281436,7.88086154 L46.990441,2.44447179 C44.928,0.382030769 41.4070154,1.3246359 40.6508308,4.14326154 L38.8548923,10.8438974 L32.0374154,9.01645128 C29.2187897,8.26157949 26.6404103,10.839959 27.3965949,13.6585846 L29.2227282,20.4760615 L22.5234051,22.2706872 C19.7047795,23.0268718 18.7608615,26.5491692 20.8233026,28.6116103 L26.2596923,34.0493128 C26.2596923,34.0768821 26.2570667,34.1044513 26.2570667,34.1333333 L20.571241,37.4153846 C18.0453744,38.8739282 18.0453744,42.5209436 20.571241,43.9794872 L26.2570667,47.2615385 L20.571241,50.5435897 C18.0453744,52.0021333 18.0453744,55.6491487 20.571241,57.1076923 L26.2570667,60.3897436 L20.571241,63.6717949 C18.0453744,65.1303385 18.0453744,68.7773538 20.571241,70.2358974 L26.2570667,73.5179487 L20.571241,76.8 C18.0453744,78.2585436 18.0453744,81.905559 20.571241,83.3641026 L26.2570667,86.6461538 L20.571241,89.9282051 C18.0453744,91.3867487 18.0453744,95.0337641 20.571241,96.4923077 L26.2570667,99.774359 L20.571241,103.05641 C18.0453744,104.514954 18.0453744,108.161969 20.571241,109.620513 L26.2570667,112.902564 L20.571241,116.184615 C18.0453744,117.643159 18.0453744,121.290174 20.571241,122.748718 L26.2570667,126.030769 L20.571241,129.312821 C18.0453744,130.771364 18.0453744,134.418379 20.571241,135.876923 L26.2570667,139.158974 L20.571241,142.441026 C18.0453744,143.899569 18.0453744,147.546585 20.571241,149.005128 L26.2570667,152.287179 L20.571241,155.569231 C18.0453744,157.027774 18.0453744,160.67479 20.571241,162.133333 L26.2570667,165.415385 L20.571241,168.697436 C18.0453744,170.155979 18.0453744,173.802995 20.571241,175.261538 L26.2570667,178.54359 L20.571241,181.825641 C18.0453744,183.284185 18.0453744,186.9312 20.571241,188.389744 L26.2570667,191.671795 C26.2570667,206.17321 38.0120615,217.928205 52.5134769,217.928205 L210.051938,217.928205 C224.552041,217.928205 236.308349,206.17321 236.308349,191.671795 L236.308349,86.6461538 L144.384656,80.9012513 C137.019733,80.4404513 131.282708,74.3332103 131.282708,66.9538462 C131.282708,59.5744821 137.019733,53.467241 144.384656,53.006441" fill="#3ECC5F">

</path>
  		<polygon fill="#3ECC5F" points="183.794872 217.928205 223.179487 217.928205 223.179487 165.415385 183.794872 165.415385">

</polygon>
  		<path d="M249.435897,185.107692 C249.14839,185.107692 248.87401,185.156267 248.597005,185.191713 C248.547118,184.99479 248.499856,184.796554 248.444718,184.599631 C250.815672,183.609764 252.481641,181.272944 252.481641,178.54359 C252.481641,174.917579 249.543549,171.979487 245.917538,171.979487 C244.423549,171.979487 243.062154,172.499364 241.958072,173.339569 C241.812349,173.191221 241.666626,173.044185 241.518277,172.898462 C242.341415,171.800944 242.845538,170.45399 242.845538,168.977067 C242.845538,165.351056 239.907446,162.412964 236.281436,162.412964 C233.570462,162.412964 231.244144,164.057928 230.243774,166.405251 C230.049477,166.350113 229.853867,166.304164 229.659569,166.254277 C229.695015,165.977272 229.74359,165.702892 229.74359,165.415385 C229.74359,161.789374 226.805497,158.851282 223.179487,158.851282 C219.553477,158.851282 216.615385,161.789374 216.615385,165.415385 C216.615385,165.702892 216.663959,165.977272 216.699405,166.254277 C216.505108,166.304164 216.309497,166.350113 216.1152,166.405251 C215.114831,164.057928 212.788513,162.412964 210.077538,162.412964 C206.451528,162.412964 203.513436,165.351056 203.513436,168.977067 C203.513436,170.45399 204.017559,171.800944 204.840697,172.898462 C199.960944,177.666626 196.923077,184.31081 196.923077,191.671795 C196.923077,206.17321 208.678072,217.928205 223.179487,217.928205 C235.439918,217.928205 245.707487,209.513026 248.597005,198.151877 C248.87401,198.187323 249.14839,198.235897 249.435897,198.235897 C253.061908,198.235897 256,195.297805 256,191.671795 C256,188.045785 253.061908,185.107692 249.435897,185.107692" fill="#44D860">

</path>
  		<polygon fill="#3ECC5F" points="196.923077 139.158974 236.307692 139.158974 236.307692 112.902564 196.923077 112.902564">

</polygon>
  		<path d="M249.435897,129.312821 C251.248903,129.312821 252.717949,127.843774 252.717949,126.030769 C252.717949,124.217764 251.248903,122.748718 249.435897,122.748718 C249.2928,122.748718 249.154954,122.773662 249.017108,122.790728 C248.990851,122.692267 248.968533,122.593805 248.940964,122.495344 C250.125128,122.00041 250.958769,120.830687 250.958769,119.466667 C250.958769,117.653662 249.489723,116.184615 247.676718,116.184615 C246.929723,116.184615 246.248369,116.443241 245.696985,116.864656 C245.624779,116.789826 245.551262,116.716308 245.476431,116.644103 C245.888656,116.096656 246.140718,115.421867 246.140718,114.682749 C246.140718,112.871056 244.671672,111.400697 242.858667,111.400697 C241.502523,111.400697 240.339364,112.223836 239.839179,113.397497 C238.714092,113.083733 237.533867,112.902564 236.307692,112.902564 C229.058297,112.902564 223.179487,118.781374 223.179487,126.030769 C223.179487,133.280164 229.058297,139.158974 236.307692,139.158974 C237.533867,139.158974 238.714092,138.977805 239.839179,138.664041 C240.339364,139.837703 241.502523,140.660841 242.858667,140.660841 C244.671672,140.660841 246.140718,139.190482 246.140718,137.37879 C246.140718,136.639672 245.888656,135.964882 245.476431,135.417436 C245.551262,135.345231 245.624779,135.271713 245.696985,135.196882 C246.248369,135.618297 246.929723,135.876923 247.676718,135.876923 C249.489723,135.876923 250.958769,134.407877 250.958769,132.594872 C250.958769,131.230851 250.125128,130.061128 248.940964,129.566195 C248.968533,129.469046 248.990851,129.369272 249.017108,129.27081 C249.154954,129.287877 249.2928,129.312821 249.435897,129.312821" fill="#44D860">

</path>
  		<path d="M78.7692308,50.5435897 C76.9562256,50.5435897 75.4871795,49.0745436 75.4871795,47.2615385 C75.4871795,41.8317128 71.0708513,37.4153846 65.6410256,37.4153846 C60.2112,37.4153846 55.7948718,41.8317128 55.7948718,47.2615385 C55.7948718,49.0745436 54.3258256,50.5435897 52.5128205,50.5435897 C50.6998154,50.5435897 49.2307692,49.0745436 49.2307692,47.2615385 C49.2307692,38.2122667 56.5917538,30.8512821 65.6410256,30.8512821 C74.6902974,30.8512821 82.0512821,38.2122667 82.0512821,47.2615385 C82.0512821,49.0745436 80.5822359,50.5435897 78.7692308,50.5435897" fill="#000000">

</path>
  		<path d="M131.282051,217.928205 L210.051282,217.928205 C224.552697,217.928205 236.307692,206.17321 236.307692,191.671795 L236.307692,99.774359 L157.538462,99.774359 C143.037046,99.774359 131.282051,111.529354 131.282051,126.030769 L131.282051,217.928205 Z" fill="#FFFF50">

</path>
  		<path d="M216.640985,140.471795 L150.948759,140.471795 C150.222769,140.471795 149.635938,139.884964 149.635938,139.158974 C149.635938,138.432985 150.222769,137.846154 150.948759,137.846154 L216.640985,137.846154 C217.366974,137.846154 217.953805,138.432985 217.953805,139.158974 C217.953805,139.884964 217.366974,140.471795 216.640985,140.471795" fill="#000000">

</path>
  		<path d="M216.640985,166.728205 L150.948759,166.728205 C150.222769,166.728205 149.635938,166.141374 149.635938,165.415385 C149.635938,164.689395 150.222769,164.102564 150.948759,164.102564 L216.640985,164.102564 C217.366974,164.102564 217.953805,164.689395 217.953805,165.415385 C217.953805,166.141374 217.366974,166.728205 216.640985,166.728205" fill="#000000">

</path>
  		<path d="M216.640985,192.984615 L150.948759,192.984615 C150.222769,192.984615 149.635938,192.397785 149.635938,191.671795 C149.635938,190.945805 150.222769,190.358974 150.948759,190.358974 L216.640985,190.358974 C217.366974,190.358974 217.953805,190.945805 217.953805,191.671795 C217.953805,192.397785 217.366974,192.984615 216.640985,192.984615" fill="#000000">

</path>
  		<path d="M216.640985,127.587118 L150.948759,127.587118 C150.222769,127.587118 149.635938,126.998974 149.635938,126.274297 C149.635938,125.548308 150.222769,124.961477 150.948759,124.961477 L216.640985,124.961477 C217.366974,124.961477 217.953805,125.548308 217.953805,126.274297 C217.953805,126.998974 217.366974,127.587118 216.640985,127.587118" fill="#000000">

</path>
  		<path d="M216.640985,153.6 L150.948759,153.6 C150.222769,153.6 149.635938,153.013169 149.635938,152.287179 C149.635938,151.56119 150.222769,150.974359 150.948759,150.974359 L216.640985,150.974359 C217.366974,150.974359 217.953805,151.56119 217.953805,152.287179 C217.953805,153.013169 217.366974,153.6 216.640985,153.6" fill="#000000">

</path>
  		<path d="M216.640985,179.85641 L150.948759,179.85641 C150.222769,179.85641 149.635938,179.269579 149.635938,178.54359 C149.635938,177.8176 150.222769,177.230769 150.948759,177.230769 L216.640985,177.230769 C217.366974,177.230769 217.953805,177.8176 217.953805,178.54359 C217.953805,179.269579 217.366974,179.85641 216.640985,179.85641" fill="#000000">

</path>
  		<path d="M236.307692,58.5666297 C236.291938,58.5666297 236.27881,58.5587528 236.263056,58.5600656 C232.206441,58.6979118 230.287097,62.75584 228.593559,66.3359015 C226.826503,70.0761272 225.459856,72.5100964 223.220185,72.4365785 C220.740267,72.3473067 219.322421,69.5457477 217.820554,66.5800862 C216.095508,63.1759426 214.126277,59.3136246 209.992205,59.4580349 C205.993354,59.5945682 204.067446,63.1260554 202.368656,66.2413785 C200.560903,69.5601887 199.33079,71.5779938 196.958523,71.4847836 C194.428718,71.3928862 193.08439,69.1151426 191.528697,66.478999 C189.794462,63.5435323 187.789785,60.2431015 183.735795,60.3560041 C179.80521,60.4912246 177.874051,63.487081 176.17001,66.1324144 C174.367508,68.9287221 173.104574,70.6327631 170.702113,70.5316759 C168.111918,70.4384656 166.774154,68.5493169 165.226338,66.3608451 C163.488164,63.9019323 161.529436,61.1187528 157.487262,61.2539733 C153.643323,61.3852554 151.712164,63.8389169 150.009436,66.0037579 C148.392041,68.0570092 147.129108,69.682281 144.457518,69.579881 C143.732841,69.550999 143.125005,70.1194503 143.098749,70.84544 C143.071179,71.5688041 143.638318,72.1779528 144.362995,72.2055221 C148.323774,72.3381169 150.329764,69.8411323 152.071877,67.6277169 C153.617067,65.6637374 154.950892,63.9688862 157.576533,63.8796144 C160.105026,63.7719631 161.290503,65.3434092 163.083815,67.8771528 C164.786544,70.2848656 166.719015,73.0155323 170.60759,73.1560041 C174.681272,73.2925374 176.641313,70.2481067 178.376862,67.554199 C179.928615,65.1464862 181.267692,63.0682913 183.825067,62.9803323 C186.178954,62.8923733 187.460267,64.75264 189.266708,67.8128246 C190.969436,70.6970913 192.897969,73.9647015 196.864,74.1091118 C200.966564,74.2508964 202.94761,70.6682092 204.673969,67.4990605 C206.169272,64.7578913 207.580554,62.1676964 210.081477,62.0823631 C212.435364,62.0272246 213.662851,64.1763118 215.478482,67.7668759 C217.174646,71.1185067 219.097928,74.9151836 223.125662,75.0609067 C223.200492,75.0635323 223.27401,75.0648451 223.347528,75.0648451 C227.37001,75.0648451 229.278851,71.0279221 230.968451,67.4583631 C232.463754,64.2944656 233.878974,61.3130503 236.307692,61.1922708 L236.307692,58.5666297 Z" fill="#000000">

</path>
  		<polygon fill="#3ECC5F" points="105.025641 217.928205 157.538462 217.928205 157.538462 165.415385 105.025641 165.415385">

</polygon>
  		<path d="M183.794872,185.107692 C183.507364,185.107692 183.232985,185.156267 182.955979,185.191713 C182.906092,184.99479 182.858831,184.796554 182.803692,184.599631 C185.174646,183.609764 186.840615,181.272944 186.840615,178.54359 C186.840615,174.917579 183.902523,171.979487 180.276513,171.979487 C178.782523,171.979487 177.421128,172.499364 176.317046,173.339569 C176.171323,173.191221 176.0256,173.044185 175.877251,172.898462 C176.70039,171.800944 177.204513,170.45399 177.204513,168.977067 C177.204513,165.351056 174.266421,162.412964 170.64041,162.412964 C167.929436,162.412964 165.603118,164.057928 164.602749,166.405251 C164.408451,166.350113 164.212841,166.304164 164.018544,166.254277 C164.05399,165.977272 164.102564,165.702892 164.102564,165.415385 C164.102564,161.789374 161.164472,158.851282 157.538462,158.851282 C153.912451,158.851282 150.974359,161.789374 150.974359,165.415385 C150.974359,165.702892 151.022933,165.977272 151.058379,166.254277 C150.864082,166.304164 150.668472,166.350113 150.474174,166.405251 C149.473805,164.057928 147.147487,162.412964 144.436513,162.412964 C140.810503,162.412964 137.87241,165.351056 137.87241,168.977067 C137.87241,170.45399 138.376533,171.800944 139.199672,172.898462 C134.319918,177.666626 131.282051,184.31081 131.282051,191.671795 C131.282051,206.17321 143.037046,217.928205 157.538462,217.928205 C169.798892,217.928205 180.066462,209.513026 182.955979,198.151877 C183.232985,198.187323 183.507364,198.235897 183.794872,198.235897 C187.420882,198.235897 190.358974,195.297805 190.358974,191.671795 C190.358974,188.045785 187.420882,185.107692 183.794872,185.107692" fill="#44D860">

</path>
  		<polygon fill="#3ECC5F" points="105.025641 139.158974 157.538462 139.158974 157.538462 112.902564 105.025641 112.902564">

</polygon>
  		<path d="M170.666667,129.312821 C172.479672,129.312821 173.948718,127.843774 173.948718,126.030769 C173.948718,124.217764 172.479672,122.748718 170.666667,122.748718 C170.523569,122.748718 170.385723,122.773662 170.247877,122.790728 C170.221621,122.692267 170.199303,122.593805 170.171733,122.495344 C171.355897,122.00041 172.189538,120.830687 172.189538,119.466667 C172.189538,117.653662 170.720492,116.184615 168.907487,116.184615 C168.160492,116.184615 167.479138,116.443241 166.927754,116.864656 C166.855549,116.789826 166.782031,116.716308 166.7072,116.644103 C167.119426,116.096656 167.371487,115.421867 167.371487,114.682749 C167.371487,112.871056 165.902441,111.400697 164.089436,111.400697 C162.733292,111.400697 161.570133,112.223836 161.069949,113.397497 C159.944862,113.083733 158.764636,112.902564 157.538462,112.902564 C150.289067,112.902564 144.410256,118.781374 144.410256,126.030769 C144.410256,133.280164 150.289067,139.158974 157.538462,139.158974 C158.764636,139.158974 159.944862,138.977805 161.069949,138.664041 C161.570133,139.837703 162.733292,140.660841 164.089436,140.660841 C165.902441,140.660841 167.371487,139.190482 167.371487,137.37879 C167.371487,136.639672 167.119426,135.964882 166.7072,135.417436 C166.782031,135.345231 166.855549,135.271713 166.927754,135.196882 C167.479138,135.618297 168.160492,135.876923 168.907487,135.876923 C170.720492,135.876923 172.189538,134.407877 172.189538,132.594872 C172.189538,131.230851 171.355897,130.061128 170.171733,129.566195 C170.199303,129.469046 170.221621,129.369272 170.247877,129.27081 C170.385723,129.287877 170.523569,129.312821 170.666667,129.312821" fill="#44D860">

</path>
  		<path d="M183.794872,32.4923077 C183.584821,32.4923077 183.361641,32.4660513 183.15159,32.4266667 C182.941538,32.3872821 182.730174,32.321641 182.534564,32.2428718 C182.337641,32.1641026 182.153846,32.0590769 181.968738,31.9409231 C181.798072,31.8227692 181.628718,31.678359 181.469867,31.5339487 C181.326769,31.3764103 181.182359,31.2188718 181.064205,31.0350769 C180.946051,30.8512821 180.841026,30.6674872 180.760944,30.4705641 C180.683487,30.273641 180.617846,30.0635897 180.578462,29.8535385 C180.539077,29.6434872 180.512821,29.4203077 180.512821,29.2102564 C180.512821,29.0002051 180.539077,28.7770256 180.578462,28.5669744 C180.617846,28.3569231 180.683487,28.16 180.760944,27.9499487 C180.841026,27.7530256 180.946051,27.5692308 181.064205,27.3854359 C181.182359,27.2147692 181.326769,27.0441026 181.469867,26.8865641 C181.628718,26.7421538 181.798072,26.5977436 181.968738,26.4795897 C182.153846,26.3614359 182.337641,26.2564103 182.534564,26.177641 C182.730174,26.0988718 182.941538,26.0332308 183.15159,25.9938462 C183.571692,25.9019487 184.004923,25.9019487 184.438154,25.9938462 C184.646892,26.0332308 184.858256,26.0988718 185.055179,26.177641 C185.25079,26.2564103 185.435897,26.3614359 185.619692,26.4795897 C185.790359,26.5977436 185.959713,26.7421538 186.118564,26.8865641 C186.262974,27.0441026 186.407385,27.2147692 186.525538,27.3854359 C186.643692,27.5692308 186.748718,27.7530256 186.827487,27.9499487 C186.906256,28.16 186.971897,28.3569231 187.011282,28.5669744 C187.049354,28.7770256 187.076923,29.0002051 187.076923,29.2102564 C187.076923,30.0767179 186.721149,30.9300513 186.118564,31.5339487 C185.959713,31.678359 185.790359,31.8227692 185.619692,31.9409231 C185.435897,32.0590769 185.25079,32.1641026 185.055179,32.2428718 C184.858256,32.321641 184.646892,32.3872821 184.438154,32.4266667 C184.228103,32.4660513 184.004923,32.4923077 183.794872,32.4923077" fill="#000000">

</path>
  		<path d="M210.051282,30.8512821 C209.184821,30.8512821 208.344615,30.4968205 207.726277,29.8929231 C207.583179,29.7353846 207.438769,29.5647179 207.320615,29.3940513 C207.202462,29.2102564 207.097436,29.0264615 207.017354,28.8295385 C206.939897,28.6326154 206.874256,28.4225641 206.834872,28.2125128 C206.795487,28.0024615 206.769231,27.7792821 206.769231,27.5692308 C206.769231,26.7027692 207.123692,25.8625641 207.726277,25.2455385 C207.885128,25.1011282 208.054482,24.9567179 208.225149,24.8385641 C208.410256,24.7204103 208.594051,24.6153846 208.790974,24.5366154 C208.986585,24.4578462 209.197949,24.3922051 209.408,24.3528205 C209.828103,24.2609231 210.274462,24.2609231 210.694564,24.3528205 C210.903303,24.3922051 211.114667,24.4578462 211.31159,24.5366154 C211.5072,24.6153846 211.692308,24.7204103 211.876103,24.8385641 C212.046769,24.9567179 212.216123,25.1011282 212.374974,25.2455385 C212.977559,25.8625641 213.333333,26.7027692 213.333333,27.5692308 C213.333333,27.7792821 213.305764,28.0024615 213.267692,28.2125128 C213.228308,28.4225641 213.162667,28.6326154 213.083897,28.8295385 C212.992,29.0264615 212.900103,29.2102564 212.781949,29.3940513 C212.663795,29.5647179 212.519385,29.7353846 212.374974,29.8929231 C212.216123,30.0373333 212.046769,30.1817436 211.876103,30.2998974 C211.692308,30.4180513 211.5072,30.5230769 211.31159,30.6018462 C211.114667,30.6806154 210.903303,30.7462564 210.694564,30.785641 C210.484513,30.8250256 210.261333,30.8512821 210.051282,30.8512821" fill="#000000">

</path>
  </g>
</svg>}
    horizontal
  />

  <Card
    title="ReadMe"
    icon={<svg fill="#177fc4" className="h-6 w-6" width="36" height="36" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg">
<path d="M29.35 4.361h-7.767c-2.672 0-4.994 1.85-5.578 4.461-0.589-2.611-2.906-4.461-5.578-4.461h-7.761c-1.472 0-2.667 1.194-2.667 2.667v13.656c0 1.472 1.194 2.667 2.667 2.667h4.983c5.678 0 7.372 1.355 8.183 4.167 0.039 0.156 0.289 0.156 0.333 0 0.817-2.811 2.511-4.167 8.183-4.167h4.983c1.472 0 2.667-1.194 2.667-2.667v-13.65c0-1.467-1.183-2.661-2.65-2.672zM13.444 19.105c0 0.106-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM13.444 15.722c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.106 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM13.444 12.339c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.105 0 0.194 0.083 0.194 0.194v1.272zM27.85 19.1c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.272zM27.85 15.717c0 0.106-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.272c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.272zM27.85 12.333c0 0.105-0.083 0.194-0.194 0.194h-8.906c-0.105 0-0.194-0.083-0.194-0.194v-1.267c0-0.105 0.083-0.194 0.194-0.194h8.911c0.106 0 0.194 0.083 0.194 0.194v1.267z"/>
</svg>}
    horizontal
  />
</CardGroup>

Don't see your docs provider or have a home grown system? We can still help! Please [contact support](/contact-support).

## Commands

* `mintlify-scrape section [url]` - Scrapes multiple pages in a site.
* `mintlify-scrape page [url]` - Scrapes a single page in a site.

The commands will automatically detect the framework.

## Installation

First, install the package:

```bash
npm i @mintlify/scraping
```

One-time use:

<CodeGroup>
  ```bash Section
  npx @mintlify/scraping@latest section [url]
  ```

  ```bash Page
  npx @mintlify/scraping@latest page [url]
  ```
</CodeGroup>

Global installation:

```bash
npm install @mintlify/scraping@latest -g
```

Global usage:

<CodeGroup>
  ```bash Section
  mintlify-scrape section [url]
  ```

  ```bash Page
  mintlify-scrape page [url]
  ```
</CodeGroup>

Provide the relative path or URL to the OpenAPI file to generate frontmatter files for each endpoint.

```bash
mintlify-scrape openapi-file [openApiFilename]

-w, --writeFiles  Whether or not to write the frontmatter files [boolean] [default: true]
-o, --outDir      The folder in which to write any created frontmatter files [string]
```


# Monorepo setup
Source: https://mintlify.com/docs/guides/monorepo

Deploy your docs from a repo that contains multiple projects

Configure Mintlify to deploy documentation from a specific directory within a monorepo. This setup allows you to maintain documentation alongside your code in repositories that contain multiple projects or services.

## Prerequisites

* Admin access to your Mintlify project.
* Documentation files organized in a dedicated directory within your monorepo.
* A valid `docs.json` in your documentation directory.

## Configure monorepo deployment

<Steps>
  <Step title="Access Git settings">
    Navigate to [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) in your dashboard.

    <Frame>
      <img className="block dark:hidden my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/monorepo-light.png" alt="The project settings panel in the Git Settings menu. The Set up as monorepo toggle button is enabled and a path to the /docs directory is specified." />

      <img className="hidden dark:block my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/monorepo-dark.png" alt="The project settings panel in the Git Settings menu. The Set up as monorepo toggle button is enabled and a path to the /docs directory is specified." />
    </Frame>
  </Step>

  <Step title="Set your documentation path">
    1. Select the **Set up as monorepo** toggle button.
    2. Enter the relative path to your docs directory. For example, if your docs are in the `docs` directory, enter `/docs`.

    <Note>
      Do not include a trailing slash in the path.
    </Note>

    3. Select **Save changes**.
  </Step>
</Steps>


# Windsurf
Source: https://mintlify.com/docs/guides/windsurf

Configure Windsurf to be your writing assistant

Transform Windsurf into a documentation expert that understands your style guide, components, and project context through workspace rules and memories.

## Using Windsurf with Mintlify

Windsurf's Cascade AI assistant can be tuned to write documentation according to your standards using Mintlify components. Workspace rules and memories provide persistent context about your project, ensuring more consistent suggestions from Cascade.

* **Workspace rules** are stored in your documentation repository and shared with your team.
* **Memories** provide individual context that builds up over time.

We recommend setting up workspace rules for shared documentation standards. You can develop memories as you work, but since they are not shared, they will not be consistent across team members.

Create workspace rules in the `.windsurf/rules` directory of your docs repo. See [Memories & Rules](https://docs.windsurf.com/windsurf/cascade/memories) in the Windsurf documentation for more information.

## Example workspace rule

This rule provides Cascade with context about Mintlify components and general technical writing best practices.

You can use this example rule as-is or customize it for your documentation:

* **Writing standards**: Update language guidelines to match your style guide.
* **Component patterns**: Add project-specific components or modify existing examples.
* **Code examples**: Replace generic examples with real API calls and responses for your product.
* **Style and tone preferences**: Adjust terminology, formatting, and other rules.

Save your rule as a `.md` file in the `.windsurf/rules` directory of your docs repo.

````mdx
# Mintlify technical writing rule

## Project context

- This is a documentation project on the Mintlify platform
- We use MDX files with YAML frontmatter  
- Navigation is configured in `docs.json`
- We follow technical writing best practices

## Writing standards

- Use second person ("you") for instructions
- Write in active voice and present tense
- Start procedures with prerequisites
- Include expected outcomes for major steps
- Use descriptive, keyword-rich headings
- Keep sentences concise but informative

## Required page structure

Every page must start with frontmatter:

```yaml
---
title: "Clear, specific title"
description: "Concise description for SEO and navigation"
---
```

## Mintlify components

### Callouts

- `<Note>` for helpful supplementary information
- `<Warning>` for important cautions and breaking changes
- `<Tip>` for best practices and expert advice  
- `<Info>` for neutral contextual information
- `<Check>` for success confirmations

### Code examples

- When appropriate, include complete, runnable examples
- Use `<CodeGroup>` for multiple language examples
- Specify language tags on all code blocks
- Include realistic data, not placeholders
- Use `<RequestExample>` and `<ResponseExample>` for API docs

### Procedures

- Use `<Steps>` component for sequential instructions
- Include verification steps with `<Check>` components when relevant
- Break complex procedures into smaller steps

### Content organization

- Use `<Tabs>` for platform-specific content
- Use `<Accordion>` for progressive disclosure
- Use `<Card>` and `<CardGroup>` for highlighting content
- Wrap images in `<Frame>` components with descriptive alt text

## API documentation requirements

- Document all parameters with `<ParamField>` 
- Show response structure with `<ResponseField>`
- Include both success and error examples
- Use `<Expandable>` for nested object properties
- Always include authentication examples

## Quality standards

- Test all code examples before publishing
- Use relative paths for internal links
- Include alt text for all images
- Ensure proper heading hierarchy (start with h2)
- Check existing patterns for consistency
````

## Working with Cascade

Once your rules are set up, you can use Cascade to assist with various documentation tasks. See [Cascade](https://docs.windsurf.com/windsurf/cascade) in the Windsurf documentation for more information.

### Example prompts

**Writing new content**:

```text wrap
Create a new page explaining how to authenticate with our API. Include code examples in JavaScript, Python, and cURL.
```

**Improving existing content**:

```text wrap
Review this page and suggest improvements for clarity and component usage. Focus on making the steps easier to follow.
```

**Creating code examples**:

```text wrap
Generate a complete code example showing error handling for this API endpoint. Use realistic data and include expected responses.
```

**Maintaining consistency**:

```text wrap
Check if this new page follows our documentation standards and suggest any needed changes.
```


# Images and embeds
Source: https://mintlify.com/docs/image-embeds

Add images, videos, and iframes

<Frame>
  <img className="rounded-xl" src="https://mintlify-assets.b-cdn.net/bigbend.jpg" alt="Photograph of a scenic landscape with purple flowers in the foreground, mountains in the background, and a blue sky with scattered clouds." />
</Frame>

## Images

Add images to provide visual context, examples, or decoration to your documentation.

### Basic image syntax

Use [Markdown syntax](https://www.markdownguide.org/basic-syntax/#images) to add images to your documentation:

```mdx
![Alt text describing the image](/path/to/image.png)
```

<Tip>
  Always include descriptive alt text to improve accessibility and SEO. The alt text should clearly describe what the image shows.
</Tip>

Image files must be less than 20MB. For larger files, host them on a CDN service like [Amazon S3](https://aws.amazon.com/s3) or [Cloudinary](https://cloudinary.com).

### HTML image embeds

For more control over image display, use HTML `<img>` tags:

```html
<img 
  src="/images/dashboard.png" 
  alt="Main dashboard interface"
  height="300"
  className="rounded-lg"
/>
```

#### Disable zoom functionality

To disable the default zoom on click for images, add the `noZoom` property:

```html highlight="4"
<img 
  src="/images/screenshot.png" 
  alt="Descriptive alt text"
  noZoom 
  height="200"
/>
```

#### Link images

To make an image a clickable link, wrap the image in an anchor tag and add the `noZoom` property:

```html
<a href="https://mintlify.com" target="_blank">
  <img 
    src="/images/logo.png" 
    alt="Mintlify logo"
    noZoom 
    height="100"
  />
</a>
```

<Note>
  Images within anchor tags automatically display a pointer cursor to indicate they are clickable.
</Note>

#### Light and dark mode images

To display different images for light and dark themes, use Tailwind CSS classes:

```html
<!-- Light mode image -->
<img 
  className="block dark:hidden" 
  src="/images/light-mode.png" 
  alt="Light mode interface"
/>

<!-- Dark mode image -->
<img 
  className="hidden dark:block" 
  src="/images/dark-mode.png" 
  alt="Dark mode interface"
/>
```

## Videos

Mintlify supports [HTML tags in Markdown](https://www.markdownguide.org/basic-syntax/#html), giving you flexibility to create rich content.

<Tip>
  Always include fallback text content within video elements for browsers that don't support video playback.
</Tip>

### YouTube embeds

Embed YouTube videos using iframe elements:

```html
<iframe
  className="w-full aspect-video rounded-xl"
  src="https://www.youtube.com/embed/4KzFe50RQkQ"
  title="YouTube video player"
  frameBorder="0"
  allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
  allowFullScreen
></iframe>
```

<Frame>
  <iframe className="w-full aspect-video rounded-xl" src="https://www.youtube.com/embed/4KzFe50RQkQ" title="YouTube video player" frameBorder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowFullScreen />
</Frame>

### Self-hosted videos

Use the HTML `<video>` element for self-hosted video content:

```html
<video
  controls
  className="w-full aspect-video rounded-xl"
  src="link-to-your-video.com"
></video>
```

### Autoplay videos

To autoplay a video, use:

```html
<video
  autoPlay
  muted
  loop
  playsInline
  className="w-full aspect-video rounded-xl"
  src="/videos/demo.mp4"
></video>
```

<Note>
  When using JSX syntax, write double-word attributes in camelCase: `autoPlay`, `playsInline`, `allowFullScreen`.
</Note>

## iframes

Embed external content using iframe elements:

```html
<iframe 
  src="https://example.com/embed" 
  title="Embedded content"
  className="w-full h-96 rounded-xl"
></iframe>
```

## Related resources

<Card title="Frame component reference" icon="frame" horizontal href="/components/frames">
  Learn how to use the Frame component for presenting images.
</Card>


# Introduction
Source: https://mintlify.com/docs/index

Meet the next generation of documentation. AI-native, beautiful out-of-the-box, and built for developers.

export const HeroCard = ({filename, title, description, href}) => {
  return <a className="group cursor-pointer pb-8" href={href}>
      <img src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/${filename}.png`} className="block dark:hidden pointer-events-none group-hover:scale-105 transition-all duration-100" />
      <img src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/${filename}-dark.png`} className="pointer-events-none group-hover:scale-105 transition-all duration-100 hidden dark:block" />
      <h3 className="mt-5 text-gray-900 dark:text-zinc-50 font-medium">{title}</h3>
      <span className="mt-1.5">
        {description}
      </span>
    </a>;
};


<div className="relative">
  <div className="absolute top-0 lg:-top-16 left-0 right-0">
    <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/background-light.png" className="block dark:hidden pointer-events-none" />

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/hero/background-dark.png" className="hidden dark:block pointer-events-none" />
  </div>

  <div className="px-4 py-16 lg:py-48 lg:pb-24 max-w-3xl mx-auto">
    <h1 className="text-4xl font-medium text-center text-gray-900 dark:text-zinc-50 tracking-tight">
      Documentation
    </h1>

    <p className="max-w-xl mx-auto px-4 mt-4 text-lg text-center text-gray-500 dark:text-zinc-500">
      Meet the next generation of documentation. AI-native, beautiful out-of-the-box, and built for developers.
    </p>

    <div className="px-6 lg:px-0 mt-12 lg:mt-24 grid sm:grid-cols-2 gap-x-6 gap-y-4">
      <HeroCard filename="rocket" title="Quickstart" description="Deploy your first docs site in minutes with our step-by-step guide" href="/quickstart" />

      <HeroCard filename="cli" title="CLI installation" description="Install the CLI to preview and develop your docs locally" href="/installation" />

      <HeroCard filename="editor" title="Web editor" description="Make quick updates and manage content with our browser-based editor" href="/editor" />

      <HeroCard filename="components" title="Components" description="Build rich, interactive documentation with our ready-to-use components" href="/components" />
    </div>
  </div>
</div>


# CLI installation
Source: https://mintlify.com/docs/installation

Install the CLI to preview and develop your docs locally

<img className="block dark:hidden my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/installation/local-development-light.png" />

<img className="hidden dark:block my-0 pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/installation/local-development-dark.png" />

## Installing the CLI

<Info>
  **Prerequisite**: Please install [Node.js](https://nodejs.org/en) before proceeding.
</Info>

<Steps>
  <Step title="Install the CLI.">
    Run the following command to install the [CLI](https://www.npmjs.com/package/mint):

    ```bash
    npm i -g mint
    ```
  </Step>

  <Step title="Preview locally.">
    Navigate to your docs directory (where your `docs.json` file is located) and execute the following command:

    ```bash
    mint dev
    ```

    A local preview of your documentation will be available at `http://localhost:3000`.
  </Step>
</Steps>

Alternatively, if you do not want to install the CLI globally, you can run a one-time script:

```bash
npx mint dev
```

## Updates

If your local preview is out of sync with what you see on the web in the production version, update your local CLI:

```bash
mint update
```

If this `mint update` command is not available on your local version, re-install the CLI with the latest version:

```bash
npm i -g mint@latest
```

## Custom ports

By default, the CLI uses port 3000. You can customize the port using the `--port` flag. To run the CLI on port 3333, for instance, use this command:

```bash
mint dev --port 3333
```

If you attempt to run on a port that is already in use, it will use the next available port:

```mdx
Port 3000 is already in use. Trying 3001 instead.
```

## Additional commands

While `mint dev` is the most commonly used command, there are other commands you can use to manage your documentation.

### Finding broken links

The CLI can assist with validating reference links made in your documentation. To identify any broken links, use the following command:

```bash
mint broken-links
```

### Checking OpenAPI spec

You can use the CLI to check your OpenAPI file for errors using the following command:

```bash
mint openapi-check <openapiFilenameOrUrl>
```

You can pass in a filename (e.g. `./openapi.yaml`) or a URL (e.g. `https://petstore3.swagger.io/api/v3/openapi.json`).

### Renaming files

You can rename and update all references to files using the following command:

```bash
mint rename <oldFilename> <newFilename>
```

## Formatting

While developing locally, we recommend using extensions in your IDE to recognize and format `MDX` files.

If you use Cursor, Windsurf, or VSCode, we recommend the [MDX VSCode extension](https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx) for syntax highlighting, and [Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode) for code formatting.

If you use JetBrains, we recommend the [MDX IntelliJ IDEA plugin](https://plugins.jetbrains.com/plugin/14944-mdx) for syntax highlighting, and setting up [Prettier](https://prettier.io/docs/webstorm) for code formatting.

## Troubleshooting

<AccordionGroup>
  <Accordion title="Error: Could not load the &#x22;sharp&#x22; module using the darwin-arm64 runtime">
    This may be due to an outdated version of node. Try the following:

    1. Remove the currently-installed version of the mint CLI: `npm uninstall -g mint`
    2. Upgrade to Node.js.
    3. Reinstall the mint CLI: `npm install -g mint`
  </Accordion>

  <Accordion title="Issue: Encountering an unknown error">
    **Solution**: Go to the root of your device and delete the `~/.mintlify` folder. Afterwards, run `mint dev` again.
  </Accordion>

  <Accordion title="Error: permission denied">
    This is due to not having the required permissions to globally install node packages.

    **Solution**: Try running `sudo npm i -g mint`. You will be prompted for your password, which is the one you use to unlock your computer.
  </Accordion>

  <Accordion title="The local preview doesn't look the same as my docs do on the web">
    This is likely due to an outdated version of the CLI.

    **Solution:** Run `mint update` to get the latest changes.
  </Accordion>

  <Accordion title="mintlify vs. mint package">
    If you have any problems with the CLI package, you should first run `npm ls -g`. This command shows what packages are globally installed on your machine.

    If you have a package named `mint` and a package named `mintlify` installed, you should uninstall `mintlify`.

    1. Uninstall the old package:

    ```bash
      npm uninstall -g mintlify
    ```

    2. Clear your npm cache:

    ```bash
      npm cache clean --force
    ```

    3. Reinstall the new package:

    ```bash
      npm install -g mint
    ```
  </Accordion>
</AccordionGroup>


# Amplitude
Source: https://mintlify.com/docs/integrations/analytics/amplitude



Add the following to your `docs.json` file to send analytics to Amplitude.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "amplitude": {
          "apiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "amplitude": {
          "apiKey": "76bb138bf3fbf58186XXX00000"
      }
  }
  ```
</CodeGroup>


# Clearbit
Source: https://mintlify.com/docs/integrations/analytics/clearbit



Add the following to your `docs.json` file to send analytics to Clearbit.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "clearbit": {
          "publicApiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "clearbit": {
          "publicApiKey": "pk_1a1882"
      }
  }
  ```
</CodeGroup>


# Fathom
Source: https://mintlify.com/docs/integrations/analytics/fathom



Add the following to your `docs.json` file to send analytics to Fathom.

You can get the `siteId` from your script settings.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "fathom": {
          "siteId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "fathom": {
          "siteId": "YSVMSDAY"
      }
  }
  ```
</CodeGroup>


# Google Analytics 4
Source: https://mintlify.com/docs/integrations/analytics/google-analytics



You will need to generate a new <Tooltip tip="Google Analytics 4">GA4</Tooltip> property to use with Mintlify. The data collected will go into the same project as your other Google Analytics data.

If you are using the old version of Google Analytics, Universal Analytics, you will still be able to generate a <Tooltip tip="Google Analytics 4">GA4</Tooltip> property. <Tooltip tip="Google Analytics 4">GA4</Tooltip> data is slightly different from UA data but still gets collected in the same project.

## How to Connect GA4 to Mintlify

### Create a Web Stream

You will need to create a web stream to get the Measurement ID to put into Mintlify.

Click the cog at the bottom left of the Google Analytics screen. Then click on Data Streams.

<Frame>![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/ga4-web-streams.png)</Frame>

Create a Web Stream and put the URL of your Mintlify docs site as the stream URL.

Your Measurement ID looks like `G-XXXXXXX` and will show up under Stream Details immediately after you create the Web Stream.

### Put Measurement ID in docs.json

Add your Measurement ID to your `docs.json` file like so:

```json docs.json
"integrations": {
    "ga4": {
        "measurementId": "G-XXXXXXX"
    }
}
```

### Wait

Google Analytics takes two to three days to show your data.

You can use the [Google Analytics Debugger](https://chrome.google.com/webstore/detail/google-analytics-debugger/jnkmfdileelhofjcijamephohjechhna?hl=en) to check analytics are enabled correctly. The extension will log to your browser's console every time GA4 makes a request.

<Note>
  Preview links have analytics turned off.
</Note>


# Google Tag Manager
Source: https://mintlify.com/docs/integrations/analytics/google-tag-manager



Add your tag ID to `docs.json` file and we'll inject the Google Tag Manager script to all your pages.

You are responsible for setting up cookie consent banners with Google Tag Manager if you need them.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "gtm": {
          "tagId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "gtm": {
          "tagId": "GTM-MGBL4PW"
      }
  }
  ```
</CodeGroup>


# Heap
Source: https://mintlify.com/docs/integrations/analytics/heap



Add the following to your `docs.json` file to send analytics to Heap.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "heap": {
          "appId": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "heap": {
          "appId": "1234567890"
      }
  }
  ```
</CodeGroup>


# HotJar
Source: https://mintlify.com/docs/integrations/analytics/hotjar



Add the following to your `docs.json` file to send analytics to HotJar.

```json Analytics options in docs.json
"integrations": {
    "hotjar": {
        "hjid": "required",
        "hjsv": "required"
    }
}
```


# Koala
Source: https://mintlify.com/docs/integrations/analytics/koala



Add the following to your `docs.json` file to send analytics to Koala.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "koala": {
          "publicApiKey": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "koala": {
          "publicApiKey": "pk_1a1882"
      }
  }
  ```
</CodeGroup>


# LogRocket
Source: https://mintlify.com/docs/integrations/analytics/logrocket



Add the following to your `docs.json` file to send analytics to LogRocket.

```json Analytics options in docs.json
"integrations": {
    "logrocket": {
        "apiKey": "required"
    }
}
```


# Mixpanel
Source: https://mintlify.com/docs/integrations/analytics/mixpanel



Add the following to your `docs.json` file to send analytics to Mixpanel.

```json Analytics options in docs.json
"integrations": {
    "mixpanel": {
        "projectToken": "required"
    }
}
```


# Analytics integrations
Source: https://mintlify.com/docs/integrations/analytics/overview

Integrate with an analytics platform to track events

Automatically send data about your documentation engagement to your third party analytics provider.

## All integrations

<CardGroup cols={2}>
  <Card
    title="Amplitude"
    href="/integrations/analytics/amplitude"
    horizontal
    icon={<svg className="h-6 w-6" width="36" height="36" viewBox="0 0 36 36" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M15.5988 8.04494C15.4989 7.91714 15.3924 7.84668 15.2646 7.84668C15.1728 7.85323 15.0876 7.88273 15.009 7.93188C14.0635 8.67087 12.7773 11.8055 11.7188 15.9412L12.6576 15.9477C14.5059 15.969 16.4165 15.9903 18.3008 16.0182C17.8027 14.1273 17.3341 12.5068 16.9015 11.1926C16.2674 9.28205 15.8414 8.42181 15.5988 8.04494Z" fill="#1E61F0"/>
<path d="M17.6964 0.078125C7.92405 0.078125 0 8.00217 0 17.7745C0 27.5468 7.92405 35.4709 17.6964 35.4709C27.4687 35.4709 35.3928 27.5468 35.3928 17.7745C35.3928 8.00217 27.4687 0.078125 17.6964 0.078125ZM30.7589 17.5615C30.7098 17.7598 30.5885 17.9531 30.4181 18.094C30.3968 18.1088 30.3755 18.1219 30.3542 18.1366L30.3329 18.1514L30.2903 18.1792L30.2543 18.2005C30.1199 18.271 29.9692 18.307 29.8135 18.307H21.4274C21.4913 18.584 21.5699 18.9035 21.6469 19.2459C22.109 21.2286 23.3248 26.5014 24.6242 26.5014H24.652H24.6668H24.6946C25.704 26.5014 26.2234 25.0382 27.3606 21.8316L27.3753 21.7955C27.5605 21.2843 27.7669 20.701 27.9865 20.0832L28.0439 19.9276C28.1291 19.7211 28.3634 19.6146 28.5698 19.6998C28.7189 19.7572 28.8254 19.9063 28.8254 20.0701C28.8254 20.1127 28.8189 20.1488 28.8107 20.1832L28.7615 20.3388C28.6403 20.7223 28.5207 21.2417 28.3699 21.8463C27.6948 24.6466 26.6707 28.8757 24.0556 28.8757H24.0343C22.3433 28.861 21.334 26.1606 20.8998 25.0022C20.0903 22.8409 19.4791 20.5453 18.8893 18.3152H11.1864L9.58718 23.439L9.56588 23.4177C9.32501 23.7946 8.82034 23.9076 8.44347 23.6668C8.20916 23.5176 8.0666 23.262 8.0666 22.9851V22.9573L8.16655 22.3739C8.38612 21.0598 8.65648 19.6867 8.9547 18.3087H5.68578L5.67104 18.2939C5.00251 18.194 4.54043 17.5697 4.64039 16.9012C4.71904 16.3817 5.1172 15.9705 5.62843 15.8771C5.75624 15.8623 5.88405 15.8558 6.01186 15.8623H6.16752C7.19817 15.8771 8.29272 15.8984 9.50034 15.9115C11.1995 9.00333 13.1674 5.49191 15.3565 5.48535C17.7013 5.48535 19.4431 10.8221 20.8359 16.0458L20.8424 16.0671C23.7 16.1245 26.756 16.2097 29.7185 16.4227L29.8463 16.4374C29.8954 16.4374 29.938 16.444 29.9888 16.4522H30.0036L30.0183 16.4588H30.0249C30.5312 16.5587 30.8654 17.0568 30.7589 17.5615Z" fill="#1E61F0"/>
</svg>}
  />

  <Card
    title="Mixpanel"
    href="/integrations/analytics/mixpanel"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    style={{ fill: "#7856ff" }}
    viewBox="0 0 98 98"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path d="M24.2391 58.7912C29.877 58.7912 34.4475 54.2207 34.4475 48.5828C34.4475 42.9449 29.877 38.3745 24.2391 38.3745C18.6012 38.3745 14.0308 42.9449 14.0308 48.5828C14.0308 54.2207 18.6012 58.7912 24.2391 58.7912Z"></path>
    <path d="M54.7787 55.7046C58.7675 55.7046 62.0011 52.4716 62.0011 48.4834C62.0011 44.4952 58.7675 41.2622 54.7787 41.2622C50.7899 41.2622 47.5563 44.4952 47.5563 48.4834C47.5563 52.4716 50.7899 55.7046 54.7787 55.7046Z"></path>
    <path d="M78.6018 52.0652C80.547 52.0652 82.1239 50.4883 82.1239 48.5431C82.1239 46.5979 80.547 45.021 78.6018 45.021C76.6566 45.021 75.0798 46.5979 75.0798 48.5431C75.0798 50.4883 76.6566 52.0652 78.6018 52.0652Z"></path>
  </svg>
}
  />

  <Card
    title="PostHog"
    href="/integrations/analytics/posthog"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="50"
    height="30"
    viewBox="0 0 50 30"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M10.8914 17.2057c-.3685.7371-1.42031.7371-1.78884 0L8.2212 15.443c-.14077-.2815-.14077-.6129 0-.8944l.88136-1.7627c.36853-.7371 1.42034-.7371 1.78884 0l.8814 1.7627c.1407.2815.1407.6129 0 .8944l-.8814 1.7627zM10.8914 27.2028c-.3685.737-1.42031.737-1.78884 0L8.2212 25.44c-.14077-.2815-.14077-.6129 0-.8944l.88136-1.7627c.36853-.7371 1.42034-.7371 1.78884 0l.8814 1.7627c.1407.2815.1407.6129 0 .8944l-.8814 1.7628z"
      fill="#1D4AFF"
    />
    <path
      d="M0 23.4082c0-.8909 1.07714-1.3371 1.70711-.7071l4.58338 4.5834c.62997.63.1838 1.7071-.7071 1.7071H.999999c-.552284 0-.999999-.4477-.999999-1v-4.5834zm0-4.8278c0 .2652.105357.5196.292893.7071l9.411217 9.4112c.18753.1875.44189.2929.70709.2929h5.1692c.8909 0 1.3371-1.0771.7071-1.7071L1.70711 12.7041C1.07714 12.0741 0 12.5203 0 13.4112v5.1692zm0-9.99701c0 .26521.105357.51957.292893.7071L19.7011 28.6987c.1875.1875.4419.2929.7071.2929h5.1692c.8909 0 1.3371-1.0771.7071-1.7071L1.70711 2.70711C1.07715 2.07715 0 2.52331 0 3.41421v5.16918zm9.997 0c0 .26521.1054.51957.2929.7071l17.994 17.99401c.63.63 1.7071.1838 1.7071-.7071v-5.1692c0-.2652-.1054-.5196-.2929-.7071l-17.994-17.994c-.63-.62996-1.7071-.18379-1.7071.70711v5.16918zm11.7041-5.87628c-.63-.62997-1.7071-.1838-1.7071.7071v5.16918c0 .26521.1054.51957.2929.7071l7.997 7.99701c.63.63 1.7071.1838 1.7071-.7071v-5.1692c0-.2652-.1054-.5196-.2929-.7071l-7.997-7.99699z"
      fill="#F9BD2B"
    />
    <path
      d="M42.5248 23.5308l-9.4127-9.4127c-.63-.63-1.7071-.1838-1.7071.7071v13.1664c0 .5523.4477 1 1 1h14.5806c.5523 0 1-.4477 1-1v-1.199c0-.5523-.4496-.9934-.9973-1.0647-1.6807-.2188-3.2528-.9864-4.4635-2.1971zm-6.3213 2.2618c-.8829 0-1.5995-.7166-1.5995-1.5996 0-.8829.7166-1.5995 1.5995-1.5995.883 0 1.5996.7166 1.5996 1.5995 0 .883-.7166 1.5996-1.5996 1.5996z"
      fill="#000"
    />
    <path
      d="M0 27.9916c0 .5523.447715 1 1 1h4.58339c.8909 0 1.33707-1.0771.70711-1.7071l-4.58339-4.5834C1.07714 22.0711 0 22.5173 0 23.4082v4.5834zM9.997 10.997L1.70711 2.70711C1.07714 2.07714 0 2.52331 0 3.41421v5.16918c0 .26521.105357.51957.292893.7071L9.997 18.9946V10.997zM1.70711 12.7041C1.07714 12.0741 0 12.5203 0 13.4112v5.1692c0 .2652.105357.5196.292893.7071L9.997 28.9916V20.994l-8.28989-8.2899z"
      fill="#1D4AFF"
    />
    <path
      d="M19.994 11.4112c0-.2652-.1053-.5196-.2929-.7071l-7.997-7.99699c-.6299-.62997-1.70709-.1838-1.70709.7071v5.16918c0 .26521.10539.51957.29289.7071l9.7041 9.70411v-7.5834zM9.99701 28.9916h5.58339c.8909 0 1.3371-1.0771.7071-1.7071L9.99701 20.994v7.9976zM9.99701 10.997v7.5834c0 .2652.10539.5196.29289.7071l9.7041 9.7041v-7.5834c0-.2652-.1053-.5196-.2929-.7071L9.99701 10.997z"
      fill="#F54E00"
    />
  </svg>
}
  />

  <Card
    title="Google Analytics 4"
    href="/integrations/analytics/google-analytics"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    xmlns="http://www.w3.org/2000/svg"
    width="64"
    height="64"
    viewBox="0 0 64 64"
  >
    <g transform="matrix(.363638 0 0 .363636 -3.272763 -2.909091)">
      <path
        d="M130 29v132c0 14.77 10.2 23 21 23 10 0 21-7 21-23V30c0-13.54-10-22-21-22s-21 9.33-21 21z"
        fill="#f9ab00"
      />
      <g fill="#e37400">
        <path d="M75 96v65c0 14.77 10.2 23 21 23 10 0 21-7 21-23V97c0-13.54-10-22-21-22s-21 9.33-21 21z" />
        <circle cx="41" cy="163" r="21" />
      </g>
    </g>
  </svg>
}
  />

  <Card
    title="Google Tag Manager"
    href="/integrations/analytics/google-tag-manager"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    version="1.1"
    xmlns="http://www.w3.org/2000/svg"
    x="0px"
    y="0px"
    width="192px"
    height="192px"
    viewBox="0 0 192 192"
    enableBackground="new 0 0 192 192"
  >
    <rect fill="none" width="192" height="192" />
    <g>
      <polygon
        fill="#8AB4F8"
        points="111.31,176.79 80.76,147 146.37,80 178,111 	"
      />
      <path
        fill="#4285F4"
        d="M111.44,45.08L81,14L14.44,79.93c-8.58,8.58-8.58,22.49,0,31.08L80,177l31-29L61.05,95.47L111.44,45.08z"
      />
      <path
        fill="#8AB4F8"
        d="M177.56,80.44l-66-66c-8.59-8.59-22.52-8.59-31.11,0c-8.59,8.59-8.59,22.52,0,31.11l66,66
  c8.59,8.59,22.52,8.59,31.11,0C186.15,102.96,186.15,89.03,177.56,80.44z"
      />
      <circle fill="#246FDB" cx="95.5" cy="162.5" r="21.5" />
    </g>
  </svg>
}
  />

  <Card
    title="HotJar"
    href="/integrations/analytics/hotjar"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="51"
    height="57"
    viewBox="0 0 51 57"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M20.9743 23.3016C27.5805 19.6488 36.6281 14.645 36.6281 0.0820312H25.6725C25.6725 8.23006 21.687 10.4338 15.6538 13.7698C9.0477 17.4239 0 22.4256 0 36.99H10.9556C10.9556 28.8414 14.9412 26.6376 20.9743 23.3016Z"
      fill="#FF3C00"
    />
    <path
      d="M39.9362 19.9551C39.9362 28.1035 35.9506 30.3073 29.9175 33.6428C23.3131 37.2956 14.2637 42.2987 14.2637 56.8628H25.2189C25.2189 48.7143 29.2044 46.5106 35.2375 43.1746C41.8436 39.5218 50.8909 34.5193 50.8909 19.9551H39.9362Z"
      fill="#FF3C00"
    />
  </svg>
}
  />

  <Card
    title="Koala"
    href="/integrations/analytics/koala"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="121"
    height="121"
    viewBox="0 0 121 121"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M72.5246 72.3223C71.4431 72.3248 70.3866 72.6473 69.4886 73.2503C68.5911 73.8528 67.8916 74.7078 67.4796 75.7078C67.0676 76.7073 66.9611 77.8068 67.1736 78.8673C67.3861 79.9273 67.9081 80.9008 68.6736 81.6648C69.4391 82.4283 70.4136 82.9483 71.4746 83.1583C72.5351 83.3683 73.6346 83.2593 74.6331 82.8448C75.6321 82.4303 76.4856 81.7293 77.0861 80.8303C77.6866 79.9308 78.0071 78.8738 78.0071 77.7923C78.0071 77.0728 77.8651 76.3603 77.5896 75.6958C77.3141 75.0313 76.9101 74.4278 76.4006 73.9198C75.8911 73.4118 75.2866 73.0088 74.6216 72.7348C73.9566 72.4608 73.2436 72.3203 72.5246 72.3223Z"
      fill="#4D32E4"
    />
    <path
      d="M60.5 0C44.4544 0 29.066 6.3741 17.7201 17.7201C6.3741 29.066 0 44.4544 0 60.5C0 76.5455 6.3741 91.934 17.7201 103.28C29.066 114.626 44.4544 121 60.5 121C76.5455 121 91.934 114.626 103.28 103.28C114.626 91.934 121 76.5455 121 60.5C121 44.4544 114.626 29.066 103.28 17.7201C91.934 6.3741 76.5455 0 60.5 0ZM108.522 84.07C107.203 81.71 105.138 79.855 102.65 78.796C100.163 77.737 97.3945 77.534 94.779 78.2195C92.164 78.9045 89.8505 80.439 88.202 82.5815C86.553 84.724 85.663 87.3535 85.6705 90.057V107.211C85.6705 107.387 85.6705 107.551 85.6705 107.728C78.4335 111.61 70.3975 113.767 62.189 114.03C53.4065 104.206 48.8746 91.3035 49.5848 78.146C50.1465 69.442 53.0275 61.047 57.929 53.8325C58.004 53.7305 58.038 53.6035 58.024 53.4775C58.01 53.351 57.949 53.235 57.853 53.152C57.752 53.089 57.633 53.061 57.515 53.0725C57.3965 53.0835 57.285 53.134 57.1975 53.215C49.6673 59.3625 44.6827 68.0835 43.2071 77.692C43.0432 78.549 42.8541 80.0115 42.7533 80.818C42.7533 81.171 42.2492 81.259 42.0349 81.196C37.9451 79.838 34.2333 77.534 31.201 74.472C28.1687 71.4095 25.9014 67.6755 24.5833 63.5725C23.2651 59.4695 22.9333 55.1135 23.6147 50.8585C24.2962 46.603 25.9717 42.5685 28.5052 39.0824C31.0387 35.5963 34.3587 32.7568 38.1956 30.7947C42.0325 28.8326 46.2781 27.8031 50.5875 27.7899C54.897 27.7767 59.149 28.7802 62.9975 30.7187C66.8465 32.6573 70.184 35.4763 72.7385 38.9469C73 39.3158 73.3455 39.6171 73.7465 39.8254C74.148 40.0337 74.593 40.1429 75.045 40.1442H85.62H109.946C112.846 47.1544 114.22 54.702 113.977 62.2845C113.733 69.867 111.879 77.3105 108.535 84.12L108.522 84.07Z"
      fill="#4D32E4"
    />
  </svg>
}
  />

  <Card
    title="LogRocket"
    href="/integrations/analytics/logrocket"
    horizontal
    icon={
  <svg
    className="h-7 w-5"
    width="102"
    height="159"
    viewBox="0 0 102 159"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M33.7001 18.4998C38.1001 11.4998 44.0001 5.3998 50.9001 0.799805C57.7001 5.2998 63.5001 11.2998 67.9001 18.1998C79.4001 34.1998 85.2001 53.4998 84.4001 73.1998C88.0001 76.0998 91.7001 78.8998 95.2001 81.7998C100.2 86.2998 102.6 93.0998 101.4 99.6998C99.7001 107.9 98.1001 116.1 96.3001 124.3C95.1001 127.9 91.2001 129.8 87.7001 128.6C87.1001 128.4 86.5001 128.1 86.0001 127.7C80.2001 123.1 74.6001 118.3 68.8001 113.6C58.9001 123 43.5001 123.1 33.5001 113.8C29.4001 116.8 25.5001 120.5 21.5001 123.8C19.7001 125.5 17.8001 127.1 15.6001 128.3C12.1001 129.7 8.10011 127.9 6.80011 124.4C6.70011 124.2 6.7001 124 6.6001 123.9C4.8001 115.9 2.8001 107.9 1.0001 99.8998C-0.399898 92.8998 2.1001 85.7998 7.5001 81.1998C10.6001 78.6998 13.8001 76.1998 17.0001 73.6998C17.9001 73.1998 17.4001 72.1998 17.5001 71.4998C17.1001 52.5998 22.8001 33.9998 33.7001 18.4998ZM39.4001 43.2998C35.2001 48.6998 35.7001 56.3998 40.6001 61.1998C46.2001 66.5998 55.1001 66.7998 60.9001 61.5998C65.0001 57.8998 66.4001 51.9998 64.5001 46.7998C62.5001 41.7998 57.9001 38.2998 52.5001 37.8998C47.4001 37.2998 42.5001 39.3998 39.4001 43.2998Z"
      fill="#764ABC"
    />
    <path
      d="M31.7002 130.6C31.8002 128.7 33.5002 127.3 35.3002 127.5C35.8002 127.5 36.3002 127.7 36.7002 127.9C45.6002 132.2 56.0002 132.2 65.0002 127.9C66.7002 127 68.7002 127.7 69.6002 129.3C69.8002 129.6 69.9002 130 70.0002 130.4C70.0002 135.4 70.0002 140.4 70.0002 145.4C69.8002 147.2 68.1002 148.6 66.3002 148.4C65.7002 148.3 65.2002 148.1 64.7002 147.8C63.2002 146.5 61.9002 145.1 60.4002 143.8C58.1002 148.1 56.0002 152.4 53.7002 156.7C52.7002 158.3 50.6002 158.7 49.0002 157.7C48.6002 157.5 48.3002 157.1 48.1002 156.8C45.8002 152.5 43.7002 148.2 41.3002 143.9C39.9002 145.3 38.5002 146.7 37.0002 147.9C35.5002 149 33.3002 148.6 32.3002 147C32.0002 146.5 31.8002 146 31.7002 145.4C31.7002 140.5 31.7002 135.5 31.7002 130.6Z"
      fill="#764ABC"
    />
    <path
      d="M50.7998 58.5005C54.5998 58.6005 57.6998 55.6005 57.7998 51.8005C57.6998 48.0005 54.5998 45.0005 50.7998 45.0005C46.9998 44.9005 43.8998 47.9005 43.7998 51.7005C43.7998 55.5005 46.9998 58.6005 50.7998 58.5005Z"
      fill="#764ABC"
    />
  </svg>
}
  />

  <Card
    title="Pirsch"
    href="/integrations/analytics/pirsch"
    horizontal
    icon={
  <>
    <svg
      className="h-6 w-6 dark:hidden"
      width="1"
      height="1"
      viewBox="0 0 1 1"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_2199_68)">
        <path
          d="M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z"
          fill="black"
        />
        <path
          d="M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z"
          fill="black"
        />
        <path
          d="M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_2199_68">
          <rect width="1" height="1" fill="black" />
        </clipPath>
      </defs>
    </svg>
    <svg
      className="hidden h-6 w-6 dark:block"
      width="1"
      height="1"
      viewBox="0 0 1 1"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <g clipPath="url(#clip0_2199_68)">
        <path
          d="M0.184082 0.631579C0.358477 0.631579 0.499871 0.490184 0.499871 0.315789C0.499871 0.141395 0.358477 0 0.184082 0V0.631579ZM0.815661 0.368421C0.641266 0.368421 0.499871 0.509816 0.499871 0.684211C0.499871 0.858605 0.641266 1 0.815661 1V0.368421Z"
          fill="white"
        />
        <path
          d="M0.710681 0.288549C0.78335 0.288549 0.842259 0.229639 0.842259 0.15697C0.842259 0.0843005 0.78335 0.0253906 0.710681 0.0253906C0.638011 0.0253906 0.579102 0.0843005 0.579102 0.15697C0.579102 0.229639 0.638011 0.288549 0.710681 0.288549Z"
          fill="white"
        />
        <path
          d="M0.289294 0.974095C0.361963 0.974095 0.420873 0.915185 0.420873 0.842516C0.420873 0.769847 0.361963 0.710938 0.289294 0.710938C0.216625 0.710938 0.157715 0.769847 0.157715 0.842516C0.157715 0.915185 0.216625 0.974095 0.289294 0.974095Z"
          fill="white"
        />
      </g>
      <defs>
        <clipPath id="clip0_2199_68">
          <rect width="1" height="1" fill="white" />
        </clipPath>
      </defs>
    </svg>
  </>
}
  />

  <Card
    title="Plausible"
    href="/integrations/analytics/plausible"
    horizontal
    icon={
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="1000px"
    height="1000px"
    className="h-6 w-6"
    viewBox="0 0 1000 1000"
  >
    <defs>
      <radialGradient
        cx="79.1305263%"
        cy="87.6448158%"
        fx="79.1305263%"
        fy="87.6448158%"
        r="96.9897763%"
        id="radialGradient-1"
      >
        <stop stopColor="#2440E6" offset="0%" />
        <stop stopColor="#5661B3" offset="100%" />
      </radialGradient>
      <radialGradient
        cx="0%"
        cy="30.2198829%"
        fx="0%"
        fy="30.2198829%"
        r="62.2688936%"
        gradientTransform="translate(0.000000,0.302199),scale(1.000000,0.722519),rotate(61.734530),translate(-0.000000,-0.302199)"
        id="radialGradient-2"
      >
        <stop stopColor="#6574CD" stopOpacity="0.5" offset="0%" />
        <stop stopColor="#6574CD" offset="100%" />
      </radialGradient>
    </defs>
    <g stroke="none" strokeWidth="1" fill="none" fillRule="evenodd">
      <g transform="translate(19.000000, 0.000000)">
        <g transform="translate(-19.000000, 0.000000)">
          <rect x="0" y="0" width="1000" height="1000" />
          <g transform="translate(124.069479, 0.000000)">
            <g transform="translate(376.923077, 500.000000) scale(-1, 1) rotate(-180.000000) translate(-376.923077, -500.000000) translate(2.233251, -0.000000)">
              <circle
                fill="url(#radialGradient-1)"
                cx="373.69727"
                cy="624.069479"
                r="373.449132"
              />
              <path
                d="M309.677419,993.322174 C232.506203,979.92267 167.493797,947.168328 113.647643,894.562869 C58.3126551,840.468576 24.0694789,777.44128 7.44416873,698.781231 L1.7369727,671.982223 L0.992555831,336.498352 L0.248138958,0.76634245 L7.19602978,0.76634245 C11.1662531,0.76634245 23.82134,2.00703724 35.235732,3.24773203 C132.754342,15.158402 215.632754,74.215474 260.794045,163.793638 C272.208437,186.622422 280.397022,212.925151 286.104218,245.679494 C290.818859,273.471057 291.066998,282.652199 290.322581,427.56535 L289.578164,580.170809 L295.533499,595.059146 C303.722084,615.406541 326.30273,637.987186 346.650124,646.175772 L361.538462,652.131107 L500.496278,652.379246 C576.923077,652.379246 643.920596,653.371802 649.131514,654.364357 C673.449132,659.078998 699.503722,679.426392 709.925558,702.007037 C712.903226,708.210511 716.873449,720.36932 718.610422,728.557906 C721.33995,742.205548 721.091811,745.927633 717.121588,761.312248 C704.71464,806.969816 661.042184,870.245251 616.377171,907.217955 C565.756824,949.153439 509.925558,977.193141 449.627792,991.337062 C417.866005,998.533092 345.905707,999.773787 309.677419,993.322174 Z"
                id="Path"
                fill="url(#radialGradient-2)"
                fillRule="nonzero"
              />
            </g>
          </g>
        </g>
      </g>
    </g>
  </svg>
}
  />

  <Card
    title="Fathom"
    href="/integrations/analytics/fathom"
    horizontal
    icon={
<svg
className="h-6 w-6"
width="256"
height="256"
viewBox="0 0 256 256"
fill="none"
xmlns="http://www.w3.org/2000/svg"
>
<path
d="M50.4139 36.0859H40.3871C31.7927 36.105 22.7513 37.7857 15.3869 42.8984C11.5551 45.5505 8.45289 49.125 6.36656 53.292C4.0486 58.1293 2.89794 63.4429 3.0071 68.8058V212.667C3.0071 213.984 3.53027 215.247 4.46151 216.178C5.39275 217.109 6.65579 217.632 7.97276 217.632H27.5661C28.8831 217.632 30.1461 217.109 31.0774 216.178C32.0086 215.247 32.5318 213.984 32.5318 212.667V111.31H50.4063C51.0584 111.31 51.7041 111.182 52.3065 110.932C52.909 110.682 53.4564 110.317 53.9175 109.856C54.3786 109.394 54.7444 108.847 54.9939 108.245C55.2435 107.642 55.3719 106.996 55.3719 106.344V89.5566C55.3719 88.2396 54.8488 86.9766 53.9175 86.0453C52.9863 85.1141 51.7232 84.5909 50.4063 84.5909H32.5394V71.8349C32.4457 69.708 32.7382 67.5817 33.4027 65.5591C33.6012 64.974 33.9349 64.444 34.3767 64.0121C35.0566 63.4655 35.8835 63.1331 36.7526 63.0571C38.4628 62.845 40.1867 62.7639 41.9092 62.8146H50.4196C51.7366 62.8146 52.9996 62.2914 53.9309 61.3602C54.8621 60.4289 55.3853 59.1659 55.3853 57.8489V41.0592C55.3853 39.7423 54.8621 38.4792 53.9309 37.548C52.9996 36.6167 51.7366 36.0936 50.4196 36.0936"
fill="#1F2026"
/>
<path
d="M168.815 128.261C168.982 122.018 167.781 115.814 165.296 110.084C162.812 104.354 159.105 99.2374 154.434 95.0918C145.198 87.0379 132.23 82.712 116.98 82.7178C101.466 82.7178 88.0641 87.1582 78.2799 94.9409C73.4171 98.7218 69.4331 103.513 66.6032 108.985C63.7733 114.456 62.165 120.476 61.8894 126.63C61.8575 127.301 61.9625 127.972 62.1977 128.602C62.433 129.232 62.7937 129.807 63.258 130.294C63.7223 130.78 64.2806 131.167 64.8989 131.431C65.5172 131.695 66.1827 131.831 66.855 131.83H87.6019C88.8467 131.832 90.0466 131.366 90.9642 130.525C91.8817 129.684 92.4499 128.529 92.5561 127.288C92.7767 124.972 93.4898 122.729 94.6475 120.71C95.8053 118.691 97.3811 116.943 99.2693 115.583C104.448 111.964 110.667 110.136 116.98 110.378C124.718 110.378 130.282 112.479 133.83 115.564C135.624 117.142 137.044 119.1 137.987 121.296C138.93 123.491 139.372 125.869 139.281 128.257V128.958C139.296 129.537 139.232 130.115 139.09 130.677L138.899 131.106C138.545 131.474 138.1 131.743 137.61 131.885C134.826 132.791 131.95 133.381 129.035 133.644C124.833 134.202 119.373 134.779 112.57 135.69H112.581C100.098 137.369 87.3498 139.41 77.0193 145.239C71.7347 148.136 67.3067 152.375 64.1812 157.527C60.8001 163.529 59.1166 170.338 59.311 177.224C59.2225 183.496 60.4876 189.713 63.02 195.452C66.6423 203.293 72.8442 209.656 80.5908 213.477C88.8782 217.474 97.9927 219.456 107.191 219.262C119.128 219.274 128.181 216.497 134.846 212.251C136.408 211.261 137.892 210.155 139.287 208.941V212.66C139.287 213.977 139.81 215.24 140.741 216.171C141.672 217.102 142.936 217.625 144.253 217.625H153.79L168.812 161.735L168.815 128.261ZM139.283 166.03C139.404 169.288 138.883 172.539 137.748 175.596C136.613 178.652 134.887 181.456 132.669 183.845C128.204 188.349 121.149 191.569 109.984 191.601C102.793 191.613 97.4741 190.033 94.2941 187.753C92.8266 186.744 91.6254 185.395 90.7933 183.821C89.9498 182.118 89.5217 180.241 89.5443 178.341V178.293V178.213C89.4842 176.061 90.0395 173.937 91.1447 172.09C93.1437 169.263 95.9722 167.127 99.2388 165.979C103.667 164.269 108.293 163.122 113.007 162.564C120.085 161.569 127.367 160.514 133.404 159.317C135.561 158.895 137.482 158.442 139.289 157.969L139.283 166.03Z"
fill="#1F2026"
/>
<path
d="M251.975 21.9481C251.51 21.3425 250.913 20.8518 250.228 20.514C249.544 20.1763 248.791 20.0004 248.027 20H223.077C221.982 19.9988 220.917 20.3596 220.048 21.0263C219.18 21.6929 218.556 22.628 218.273 23.6861L168.813 207.74L166.375 216.833L163.015 229.322C162.816 230.059 162.789 230.832 162.937 231.581C163.085 232.33 163.404 233.035 163.868 233.641C164.333 234.247 164.931 234.737 165.616 235.074C166.301 235.411 167.055 235.586 167.818 235.584H192.769C193.863 235.586 194.927 235.226 195.796 234.56C196.665 233.895 197.289 232.961 197.572 231.904L252.831 26.2644C253.027 25.5271 253.053 24.7545 252.904 24.0059C252.756 23.2573 252.438 22.5527 251.975 21.9462"
fill="#7166F6"
/>
</svg>

}
  />

  <Card
    title="Clearbit"
    href="/integrations/analytics/clearbit"
    horizontal
    icon={
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="36"
    height="36"
    className="h-6 w-6"
    viewBox="0 0 40 40"
  >
    <defs>
      <linearGradient id="clearbit-a" x1="50%" x2="100%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#DEF2FE"></stop>
        <stop offset="100%" stopColor="#DBF1FE"></stop>
      </linearGradient>
      <linearGradient id="clearbit-b" x1="0%" x2="50%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#57BCFD"></stop>
        <stop offset="100%" stopColor="#51B5FD"></stop>
      </linearGradient>
      <linearGradient id="clearbit-c" x1="37.5%" x2="62.5%" y1="0%" y2="100%">
        <stop offset="0%" stopColor="#1CA7FD"></stop>
        <stop offset="100%" stopColor="#148CFC"></stop>
      </linearGradient>
      <filter
        id="ck-icon-shadow"
        x="-50%"
        y="-50%"
        width="200%"
        height="200%"
      >
        <feOffset result="offOut" in="SourceGraphic" dx="0" dy="1"></feOffset>
        <feGaussianBlur
          result="blurOut"
          in="offOut"
          stdDeviation="1"
        ></feGaussianBlur>
        <feBlend in="SourceGraphic" in2="blurOut" mode="normal"></feBlend>
      </filter>
    </defs>
    <g fill="none">
      <path
        d="M27.9195733,37 L12.0804267,37 L11.4338943,36.9949826 C8.75934941,36.9515623 7.69554096,36.6271471 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 L3.81824005,33.1283803 C3.30403747,32.0897188 3.02217708,30.9433817 3.00125617,28.250264 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 L6.87161969,3.81824005 C7.91028124,3.30403747 9.05661831,3.02217708 11.749736,3.00125617 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 L36.18176,6.87161969 C36.6959625,7.91028124 36.9778229,9.05661831 36.9987438,11.749736 L37,27.9195733 L36.9949826,28.5661057 C36.9515623,31.2406506 36.6271471,32.304459 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 L33.1283803,36.18176 C32.0481723,36.7165306 30.8515024,37 27.9195733,37 Z"
        id="clearbit-edge"
        strokeOpacity="0.2"
        stroke="#9BADBC"
        fillOpacity="0"
        fill="#9BADBC"
      ></path>
      <path
        d="M27.9195733,37 L12.0804267,37 L11.4338943,36.9949826 C8.75934941,36.9515623 7.69554096,36.6271471 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 L3.81824005,33.1283803 C3.30403747,32.0897188 3.02217708,30.9433817 3.00125617,28.250264 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 L6.87161969,3.81824005 C7.91028124,3.30403747 9.05661831,3.02217708 11.749736,3.00125617 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 L36.18176,6.87161969 C36.6959625,7.91028124 36.9778229,9.05661831 36.9987438,11.749736 L37,27.9195733 L36.9949826,28.5661057 C36.9515623,31.2406506 36.6271471,32.304459 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 L33.1283803,36.18176 C32.0481723,36.7165306 30.8515024,37 27.9195733,37 Z"
        id="clearbit-fx"
        fillOpacity="0.2"
        fill="#9BADBC"
        filter="url(#ck-icon-shadow)"
      ></path>
      <path
        fill="url(#clearbit-a)"
        d="M37,20 L37,27.9195733 C37,31.0770355 36.6712426,32.2220075 36.053905,33.3763285 C35.4365674,34.5306495 34.5306495,35.4365674 33.3763285,36.053905 C32.2220075,36.6712426 31.0770355,37 27.9195733,37 L20,37 L20,20 L37,20 Z"
      ></path>
      <path
        fill="url(#clearbit-b)"
        d="M20,3 L27.9195733,3 C31.0770355,3 32.2220075,3.32875737 33.3763285,3.94609499 C34.5306495,4.56343261 35.4365674,5.46935048 36.053905,6.62367147 C36.6712426,7.77799245 37,8.92296455 37,12.0804267 L37,20 L20,20 L20,3 Z"
      ></path>
      <path
        fill="url(#clearbit-c)"
        d="M12.0804267,3 L20,3 L20,37 L12.0804267,37 C8.92296455,37 7.77799245,36.6712426 6.62367147,36.053905 C5.46935048,35.4365674 4.56343261,34.5306495 3.94609499,33.3763285 C3.32875737,32.2220075 3,31.0770355 3,27.9195733 L3,12.0804267 C3,8.92296455 3.32875737,7.77799245 3.94609499,6.62367147 C4.56343261,5.46935048 5.46935048,4.56343261 6.62367147,3.94609499 C7.77799245,3.32875737 8.92296455,3 12.0804267,3 Z"
      ></path>
    </g>
  </svg>
}
  />

  <Card
    title="Heap"
    href="/integrations/analytics/heap"
    horizontal
    icon={
  <svg
    className="h-6 w-6"
    width="32"
    height="32"
    viewBox="0 0 256 256"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      d="M78.7 55.2H49V200.2H78.7V55.2ZM142.9 0H113.3V110.5H142.9V0Z"
      fill="black"
    />
    <path
      d="M142.9 144.9H113.3V255.4H142.9V144.9ZM207.1 55.2002H177.5V200.2H207.1V55.2002Z"
      fill="#31D891"
    />
  </svg>
}
  />

  <Card
    title="Segment"
    href="/integrations/analytics/segment"
    horizontal
    icon={
<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" fill="none">
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M22.69 10.396H8.64a1.184 1.184 0 0 1-1.173-1.187c0-.653.528-1.188 1.173-1.188h14.05c.645 0 1.173.535 1.173 1.188 0 .653-.527 1.187-1.173 1.187Z"
  clip-rule="evenodd"
/>
<path
  fill="#43AF79"
  fill-rule="evenodd"
  d="M1.923 10.396A1.184 1.184 0 0 1 .75 9.209c0-.12.03-.238.059-.356C2.275 4.015 6.646.75 11.66.75c1.144 0 2.288.178 3.374.505.615.207.968.86.762 1.484-.205.623-.85.979-1.466.771a8.962 8.962 0 0 0-2.67-.415c-3.989 0-7.45 2.582-8.594 6.44-.176.505-.616.86-1.144.86Z"
  clip-rule="evenodd"
/>
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M19.786 4.667c0 .653-.528 1.188-1.173 1.188a1.184 1.184 0 0 1-1.173-1.188c0-.653.528-1.187 1.173-1.187s1.173.534 1.173 1.187ZM1.173 13.604h14.05c.645 0 1.173.534 1.173 1.187s-.528 1.188-1.173 1.188H1.173A1.184 1.184 0 0 1 0 14.79c0-.653.528-1.187 1.173-1.187Z"
  clip-rule="evenodd"
/>
<path
  fill="#43AF79"
  fill-rule="evenodd"
  d="M21.94 13.604c.645 0 1.173.534 1.173 1.187 0 .12-.029.238-.058.357-1.467 4.837-5.837 8.102-10.853 8.102-1.144 0-2.288-.178-3.373-.505-.616-.207-.968-.86-.763-1.483.205-.624.85-.98 1.467-.772.85.267 1.76.415 2.669.415 3.989 0 7.45-2.582 8.594-6.44.176-.505.616-.86 1.144-.86Z"
  clip-rule="evenodd"
/>
<path
  fill="#93C8A2"
  fill-rule="evenodd"
  d="M4.077 19.332c0-.653.528-1.187 1.173-1.187.646 0 1.174.534 1.174 1.187S5.896 20.52 5.25 20.52a1.184 1.184 0 0 1-1.173-1.188Z"
  clip-rule="evenodd"
/>
</svg>
}
  />
</CardGroup>

## Enabling analytics

Set your analytics keys in `docs.json`. You can add an unlimited number of analytics integrations for free.

The syntax for `docs.json` is below. You only need to include entries for the platforms you want to connect.

```json Analytics options in docs.json
"integrations": {
    "amplitude": {
        "apiKey": "required"
    },
    "clearbit": {
        "publicApiKey": "required"
    },
    "cookies": {
      "key": "required",
      "value": "required"
    },
    "fathom": {
        "siteId": "required"
    },
    "ga4": {
        "measurementId": "required"
    },
    "gtm": {
        "tagId": "required"
    },
    "hotjar": {
        "hjid": "required",
        "hjsv": "required"
    },
    "koala": {
        "publicApiKey": "required"
    },
    "logrocket": {
        "appId": "required"
    },
    "mixpanel": {
        "projectToken": "required"
    },
    "pirsch": {
        "id": "required"
    },
    "plausible": {
        "domain": "required"
    },
    "posthog": {
        "apiKey": "required",
        "apiHost": "optional"
    },
    "segment": {
      "key": "required"
    },
    "telemetry": {
      "enabled": "boolean"
    }
}
```

## Analytics events

We send the following events to your analytics provider. All events use the `docs.` prefix.

| Event name                              | Description                                                                                               |
| :-------------------------------------- | :-------------------------------------------------------------------------------------------------------- |
| `docs.accordion.close`                  | When a user closes an accordion.                                                                          |
| `docs.accordion.open`                   | When a user opens an accordion.                                                                           |
| `docs.api_playground.request`           | When a user calls an API in the API playground.                                                           |
| `docs.code_block.copy`                  | When a user copies code from a code block.                                                                |
| `docs.code_block.ask_ai`                | When a user asks the assistant to explain a code block.                                                   |
| `docs.content.view`                     | When a user views a page. Only available for analytics providers that do not track page views by default. |
| `docs.feedback.thumbs_up`               | When a user clicks the positive feedback button.                                                          |
| `docs.feedback.thumbs_down`             | When a user clicks the negative feedback button.                                                          |
| `docs.navitem.cta_click`                | When a user clicks a call to action.                                                                      |
| `docs.expandable.close`                 | When a user closes an expandable.                                                                         |
| `docs.expandable.open`                  | When a user opens an expandable.                                                                          |
| `docs.navitem.click`                    | When a user clicks a header navigation item.                                                              |
| `docs.footer.powered_by_mintlify_click` | When a user clicks the "Powered by Mintlify" link.                                                        |
| `docs.assistant.source_click`           | When a user clicks a citation in a chat.                                                                  |
| `docs.assistant.suggestion_click`       | When a user clicks a suggestion in a chat.                                                                |
| `docs.assistant.thumbs_up`              | When a user clicks the positive feedback button in a chat.                                                |
| `docs.assistant.thumbs_down`            | When a user clicks the negative feedback button in a chat.                                                |
| `docs.assistant.completed`              | When a chat session is completed.                                                                         |
| `docs.assistant.enter`                  | When a user initiates a chat.                                                                             |
| `docs.assistant.shared`                 | When a user shares a chat conversation.                                                                   |
| `docs.search.close`                     | When a user closes the search bar.                                                                        |
| `docs.search.result_click`              | When a user clicks a search result.                                                                       |


# Pirsch
Source: https://mintlify.com/docs/integrations/analytics/pirsch



Add the following to your `docs.json` file to send analytics to Pirsch.

You can get your site ID from Settings > Developer > Identification Code.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "pirsch": {
          "id": "required"
      }
  }
  ```

  ```json Example
  "integrations": {
      "pirsch": {
          "id": "8Kw7OKxBfswOjnKGZa7P9Day8JmVYwTp"
      }
  }
  ```
</CodeGroup>


# Plausible
Source: https://mintlify.com/docs/integrations/analytics/plausible



Add your site's domain to `docs.json` to send analytics to Plausible.

<Info>
  Do not include `https://` for the domain or server.
</Info>

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "plausible": {
          "domain": "required",
          "server": "optional"
      }
  }
  ```

  ```json Example
  "integrations": {
      "plausible": {
          "domain": "docs.domain.com"
      }
  }
  ```
</CodeGroup>


# PostHog
Source: https://mintlify.com/docs/integrations/analytics/posthog



Add the following to your `docs.json` file to send analytics to PostHog.

You only need to include `apiHost` if you are self-hosting PostHog. We send events to `https://app.posthog.com` by default.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "posthog": {
          "apiKey": "YOUR_POSTHOG_PROJECT_API_KEY",
          "apiHost": "optional"
      }
  }
  ```

  ```json Example
  "integrations": {
      "posthog": {
          "apiKey": "phc_TXdpocbYTeZVm5VJmMzHTMrCofBQu3e0kN7HGMNGTVW"
      }
  }
  ```
</CodeGroup>

<br />

<Warning>
  Enabling PostHog analytics will disable the analytics on the Mintlify dashboard.
</Warning>

## Session Recordings

You need to add the URL for your docs website to Posthog's "Authorized domains for recordings" before you can receive session recordings. The option to add your URL is in Posthog's project settings.


# Segment
Source: https://mintlify.com/docs/integrations/analytics/segment



Add your Segment write key to your `docs.json` file to send analytics to Segment.

<CodeGroup>
  ```json Analytics options in docs.json
  "integrations": {
      "segment": {
          "key": "required",
      }
  }
  ```

  ```json Example
  "integrations": {
      "segment": {
          "key": "nqJxiRG15Y6M594P8Sb8ESEciU3VC2"
      }
  }
  ```
</CodeGroup>


# Osano
Source: https://mintlify.com/docs/integrations/privacy/osano



Add the following to your `docs.json` file to add the [Osano](https://www.osano.com/) cookie consent manager.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
      "osano": "SOURCE"
  }
  ```

  ```json Example
  "integrations": {
      "osano": "https://cmp.osano.com/2sUB2dqwqdkks/8dqwd-dwd86£-4a9b/osano.js"
  }
  ```
</CodeGroup>

The `SOURCE` can be found as the `src` value in the code snippet generated by Osano. It always starts with `https://cmp.osano.com/`.

```html Code snippet from Osano
<script src="https://cmp.osano.com/placeholder/placeholder/osano.js"/>
```


# Privacy integrations
Source: https://mintlify.com/docs/integrations/privacy/overview

Integrate with a data privacy platform

<CardGroup>
  <Card title="Osano" href="/integrations/privacy/osano" icon={<svg width="32" height="32" className="h-6 w-6" viewBox="0 0 256 256" fill="none" xmlns="http://www.w3.org/2000/svg"><path fillRule="evenodd" clipRule="evenodd" d="M128 256C198.692 256 256 198.692 256 128C256 57.3076 198.692 0 128 0C57.3076 0 0 57.3076 0 128C0 198.692 57.3076 256 128 256ZM128 192C163.346 192 192 163.346 192 128C192 92.6538 163.346 64 128 64C92.6538 64 64 92.6538 64 128C64 163.346 92.6538 192 128 192Z" fill="#7764FA"/></svg>} horizontal />
</CardGroup>

## Enabling Data Privacy Integrations

You can add data privacy platforms onto your docs. Add the `integrations` field into your `docs.json` file with your respective scripts.

```json
  "integrations": {
    "osano": "SOURCE"
  }
```

If you'd like to request a data privacy platform integration, please let us know in [our community](https://mintlify.com/community).

## Cookie Consent and Disabling Telemetry

If you need to check if a user has already consented to cookies for GDPR compliance, you can specify a local storage key and value under `cookies`:

```json
  "integrations": {
    "cookies": {
      "key": "LOCAL STORAGE KEY",
      "value": "LOCAL STORAGE VALUE"
    }
  }
```

If these values are set, local storage will be checked to see if the user has consented to cookies. If they have not, telemetry will be disabled.

If you'd like to disable telemetry for all users, you can add the following to your `docs.json` file:

```json
  "integrations": {
    "telemetry": {
      "enabled": false
    }
  }
```


# Speakeasy
Source: https://mintlify.com/docs/integrations/sdks/speakeasy

Automate your SDK usage snippets in the API playground

You can integrate Speakeasy-generated code snippets from your SDKs directly into your Mintlify API reference documentation. SDK usage snippets are shown in the [interactive playground](https://mintlify.com/docs/api-playground/overview) of your Mintlify-powered documentation.

## Speakeasy SDK Repository Changes

In your Speakeasy SDK repos, add the following to the `targets` section of your `.speakeasy/workflow.yaml` file to ensure code samples are automatically produced alongside SDK generations.

```yaml .speakeasy/workflow.yaml
targets:
  my-target:
    target: typescript
    source: my-source
    codeSamples:
      output: codeSamples.yaml
```

Code samples will be generated in the form of an [OpenAPI overlay file](https://www.speakeasyapi.dev/openapi/overlays) that will be used in the Mintlify docs repository.

## Mintlify Docs Repository Changes

The workflow files produced will automatically bundle your source OpenAPI spec and Speakeasy code samples into a single output file, `openapi.yaml`. Mintlify will use this output file when constructing your API reference.

### Interactive CLI Set Up

Run the following commands to set up the `.speakeasy/workflow.yaml` and `.github/workflows/sdk_generation.yaml` files through the interactive Speakeasy CLI.

```bash
speakeasy configure sources
speakeasy configure github
```

Set up your source spec. The source spec is the OpenAPI spec that code samples will be generated for, and it's often the same specification used to power Mintlify docs.

![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/speakeasy-1.webp)

Add the overlay created by Speakeasy to inject code snippets into your spec.

![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/speakeasy-2.webp)

Provide a name and path for the OpenAPI spec. This will be the final spec used by Mintlify.

![](https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/speakeasy-3.webp)

Finally, Add your `SPEAKEASY_API_KEY` as a repository secret to your Minlify repo under `Settings > Secrets & Variables > Actions`. Find the Speakeasy API key in the Speakeasy dashboard under the **API Keys** tab.

## Manual Set Up

Alternatively, you can manually set up the following files in your Mintlify docs repo.

```yaml .speakeasy/workflow.yaml
workflowVersion: 1.0.0
sources:
  docs-source:
    inputs:
      - location: {{your_api_spec}} # local or remote references supported
    overlays:
      - location: https://raw.githubusercontent.com/{{your_sdk_repo_1}}/codeSamples.yaml
      - location: https://raw.githubusercontent.com/{{your_sdk_repo_2}}/codeSamples.yaml
      - location: https://raw.githubusercontent.com/{{your_sdk_repo_3}}/codeSamples.yaml
    output: openapi.yaml
targets: {}
```

```yaml .speakeasy/workflows/sdk_generation.yaml
name: Generate
permissions:
  checks: write
  contents: write
  pull-requests: write
  statuses: write
"on":
  workflow_dispatch:
    inputs:
      force:
        description: Force generation of SDKs
        type: boolean
        default: false
  schedule:
    - cron: 0 0 * * *
jobs:
  generate:
    uses: speakeasy-api/sdk-generation-action/.github/workflows/workflow-executor.yaml@v15
    with:
      force: ${{ github.event.inputs.force }}
      mode: pr
      speakeasy_version: latest
    secrets:
      github_access_token: ${{ secrets.GITHUB_TOKEN }}
      speakeasy_api_key: ${{ secrets.SPEAKEASY_API_KEY }}
```

Finally, make sure you add your `SPEAKEASY_API_KEY` as a repository secret to your Minlify repo under `Settings > Secrets & Variables > Actions`. Find the Speakeasy API key in the Speakeasy dashboard under the **API Keys** tab.


# Stainless
Source: https://mintlify.com/docs/integrations/sdks/stainless

Automate SDK example snippets in your API playground

## Prerequisites

* Have a [Stainless](https://app.stainless.com) account.

## Integrate with Stainless

<Steps>
  <Step title="Set up OpenAPI decoration in Stainless.">
    In your `stainless.yml` config file, add `openapi.code_samples: 'mintlify'`. See the [Stainless documentation](https://app.stainless.com/docs/guides/integrate-docs) for more information.
  </Step>

  <Step title="Publish the URL to your OpenAPI spec.">
    In your Stainless project:

    1. Select the **Release** tab.
    2. Select **Setup OpenAPI publishing**.
    3. Copy the URL to your publicly accessible OpenAPI spec.

    <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/stainless-public-OpenAPI-spec.png" alt="Stainless release page with the OpenAPI spec URL highlighted with a green box." />
  </Step>

  <Step title={<>Add your OpenAPI spec URL to your <code>docs.json</code>.</>}>
    In your `docs.json` file, add the URL from Stainless to the `openapi` field. See [OpenAPI Setup](/api-playground/openapi-setup) for more information.
  </Step>
</Steps>


# Front
Source: https://mintlify.com/docs/integrations/support/front



Add the following to your `docs.json` file to add a [Front Chat](https://front.com) widget.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
      "frontchat": "CHAT_ID"
  }
  ```

  ```json Example
  "integrations": {
      "frontchat": "1365d046d7c023e9b030ce90d02d093a"
  }
  ```
</CodeGroup>


# Intercom
Source: https://mintlify.com/docs/integrations/support/intercom



Add the following to your `docs.json` file to add an [Intercom](https://www.intercom.com) widget.

<CodeGroup>
  ```json Integration options in docs.json
  "integrations": {
        "intercom": {
              "appId": "APP_ID"
        }
  }
  ```

  ```json Example
  "integrations": {
        "intercom": {
              "appId": "APP_ID"
        }
  }
  ```
</CodeGroup>


# Support integrations
Source: https://mintlify.com/docs/integrations/support/overview

Integrate with a support widget

<CardGroup>
  <Card title="Intercom" href="/integrations/support/intercom" icon={<svg className="h-6 w-6" width="2500" height="2500" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid"><path d="M221.867 140.748a8.534 8.534 0 0 1-17.067 0V64a8.534 8.534 0 0 1 17.067 0v76.748zm-2.978 53.413c-1.319 1.129-32.93 27.655-90.889 27.655-57.958 0-89.568-26.527-90.887-27.656a8.535 8.535 0 0 1-.925-12.033 8.53 8.53 0 0 1 12.013-.942c.501.42 28.729 23.563 79.8 23.563 51.712 0 79.503-23.31 79.778-23.545 3.571-3.067 8.968-2.655 12.033.925a8.534 8.534 0 0 1-.923 12.033zM34.133 64A8.534 8.534 0 0 1 51.2 64v76.748a8.534 8.534 0 0 1-17.067 0V64zm42.668-17.067a8.534 8.534 0 0 1 17.066 0v114.001a8.534 8.534 0 0 1-17.066 0v-114zm42.666-4.318A8.532 8.532 0 0 1 128 34.082a8.532 8.532 0 0 1 8.534 8.533v123.733a8.534 8.534 0 0 1-17.067 0V42.615zm42.667 4.318a8.534 8.534 0 0 1 17.066 0v114.001a8.534 8.534 0 0 1-17.066 0v-114zM224 0H32C14.327 0 0 14.327 0 32v192c0 17.672 14.327 32 32 32h192c17.673 0 32-14.328 32-32V32c0-17.673-14.327-32-32-32z" fill="#1F8DED"/></svg>} horizontal />

  <Card
    href="/integrations/support/front"
    title="Front"
    icon={<svg className="h-6 w-6" width="754" height="754" viewBox="0 0 754 754" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M124 135.5C124 69 177.9 15 244.5 15H630.8V186.4C630.8 219.7 603.8 246.6 570.6 246.6H413.6C381.6 246.6 355.7 272.5 355.7 304.5V678.7C355.7 712 328.7 738.9 295.5 738.9H124V135.5Z" fill="#001B38"/>
<path d="M415 462.4C501.377 462.4 571.4 392.377 571.4 306C571.4 219.623 501.377 149.6 415 149.6C328.623 149.6 258.6 219.623 258.6 306C258.6 392.377 328.623 462.4 415 462.4Z" fill="url(#paint0_linear_66_11)"/>
<path opacity="0.5" d="M415 462.4C501.377 462.4 571.4 392.377 571.4 306C571.4 219.623 501.377 149.6 415 149.6C328.623 149.6 258.6 219.623 258.6 306C258.6 392.377 328.623 462.4 415 462.4Z" fill="url(#paint1_linear_66_11)"/>
<defs>
<linearGradient id="paint0_linear_66_11" x1="301.703" y1="191.962" x2="536.873" y2="428.762" gradientUnits="userSpaceOnUse">
<stop stopColor="#FF0057" stopOpacity="0.16"/>
<stop offset="0.86" stopColor="#FF0057"/>
</linearGradient>
<linearGradient id="paint1_linear_66_11" x1="301.703" y1="191.962" x2="536.873" y2="428.762" gradientUnits="userSpaceOnUse">
<stop stopColor="#FF0057" stopOpacity="0.16"/>
<stop offset="0.86" stopColor="#FF0057"/>
</linearGradient>
</defs>
</svg>
}
    horizontal
  />
</CardGroup>

## Enabling Support Integrations

You can integrate widgets onto your docs for customer support. Add the `integrations` field into your `docs.json` file with your respective app ID.

```json
  "integrations": {
    "intercom": "APP_ID",
    "frontchat": "CHAT_ID"
  }
```

If you'd like to request a customer support integration, please let us know in [our community](https://join.slack.com/t/mintlify-users/shared_invite/zt-1xfzz6x35-f4o4WCYfpvLhSj3O7WAOMA).


# Lists and tables
Source: https://mintlify.com/docs/list-table

Display information in lists and tables

## Lists

Lists follow the official [Markdown syntax](https://www.markdownguide.org/basic-syntax/#lists-1).

### Ordered list

To create an ordered list, add numbers followed by a period before list items.

1. First item
2. Second item
3. Third item
4. Fourth item

```mdx
1. First item
2. Second item
3. Third item
4. Fourth item
```

### Unordered list

To create an unordered list, add dashes (`-`), asterisks (`*`), or plus signs (`+`) before list items.

* First item
* Second item
* Third item
* Fourth item

```mdx
- First item
- Second item
- Third item
- Fourth item
```

### Nested list

Indent list items to nest them.

* First item
* Second item
  * Additional item
  * Additional item
* Third item

```mdx
- First item
- Second item
  - Additional item
  - Additional item
- Third item
```

## Tables

Tables follow the official [Markdown syntax](https://www.markdownguide.org/extended-syntax/#tables).

To add a table, use three or more hyphens (`---`) to create each column's header, and use pipes (`|`) to separate each column. For compatibility, you should also add a pipe on either end of the row.

| Property | Description                           |
| -------- | ------------------------------------- |
| Name     | Full name of user                     |
| Age      | Reported age                          |
| Joined   | Whether the user joined the community |

```mdx
| Property | Description                           |
| -------- | ------------------------------------- |
| Name     | Full name of user                     |
| Age      | Reported age                          |
| Joined   | Whether the user joined the community |
```


# Model Context Protocol
Source: https://mintlify.com/docs/mcp

Generate MCP servers from your documentation or OpenAPI specs

## Overview

The Model Context Protocol (MCP) is an open protocol that connects your functions to LLMs and AI applications. With Mintlify's integration, you can automatically generate an MCP server from your existing documentation or OpenAPI specifications, enabling seamless AI-powered interactions with your product.

<Note>
  MCP servers can only be generated for public documentation. Documentation behind end-user authentication cannot be accessed for server generation.
</Note>

## Generating your MCP server

Public documentation hosted on Mintlify can be extracted as an MCP server using the following command:

```bash
npx mint-mcp add <your-subdomain-or-domain>
```

Examples:

```bash
# Using subdomain
npx mint-mcp add mintlify

# Using domain
npx mint-mcp add mintlify.com
```

### Authentication

When you run the command, you'll need to provide two API keys, `External Admin Key` and `Assistant API Key`.

These can be found in your [dashboard](https://dashboard.mintlify.com/settings/organization/api-keys) under **Settings > API Keys**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/mcp/mcp-terminal.png" alt="Terminal prompt asking What is the Bearer Token for Mintlify External API?" />
</Frame>

### Select MCP clients

After authentication, you'll choose which MCP clients to enable for your server:

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/mcp/mcp-terminal-completed.png" alt="MCP Clients listed in the terminal." />
</Frame>

Once configured, your MCP server is ready to use with the command provided in the terminal.

## Configuring your MCP server

Now let's take a look at how to configure your MCP server.

### Default functionality

All MCP servers include the `search` tool by default, allowing users to query information across your entire documentation.

### Adding API functions

If you have an OpenAPI specification, you can expose specific endpoints as MCP tools by using the `x-mcp` extension at either the file or endpoint level.

#### File-level configuration

Enable MCP for all endpoints in a specification file:

```json
{
  "openapi": "3.1.0",
  "x-mcp": {
    "enabled": true
  },
  // Other OpenAPI content
}
```

#### Endpoint-level configuration

Enable MCP for specific endpoints only:

```json
{
  "paths": {
    "/api/v1/users": {
      "x-mcp": {
        "enabled": true
      },
      // Endpoint configuration
    }
  }
}
```

### Authentication handling

If your OpenAPI spec defines authentication using `securitySchemes`, these authentication methods will be automatically applied to your MCP server.

### Monitoring your MCP server

After publishing your changes, you can view all available MCP tools in the **Available Tools** section on the MCP server page in your dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/mcp/mcp-server-page-light.png" alt="MCP dashboard with Available tools section emphasized" class="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/mcp/mcp-server-page-dark.png" alt="MCP dashboard with Available tools section emphasized" class="hidden dark:block" />
</Frame>

## Distribution

### User installation

Your users can install and use your MCP server with:

```bash
npx mint-mcp add <your-subdomain-or-domain>
```

This provides them with a ready-to-use MCP server that connects your documented functions to AI applications.


# Navigation
Source: https://mintlify.com/docs/navigation

Structure and customize your documentation's navigation hierarchy

The [navigation](settings#param-navigation) property in [docs.json](settings) defines how users will browse through your documentation. Think of it as the blueprint for your documentation's menu structure.

With proper navigation configuration, you can organize your content into a logical hierarchy that makes it easy for users to find exactly what they're looking for.

<Info>
  Do not use `api` as a title for any navigation element. The `/api` path is reserved in production and will cause pages to return 404 errors if their URLs contain `/api`.
</Info>

## Pages

Pages are the most fundamental navigation component.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/pages-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/pages-dark.png" />

Pages is an array where each entry must be a reference to the path of a [page file](pages).

```json
{
  "navigation": {
    "pages": [
      "overview",
      "quickstart",
      "advanced/components",
      "advanced/integrations"
    ]
  }
}
```

***

## Groups

Use groups to organize your navigation into sections. Groups can be nested within each other, labeled with tags, and styled with icons.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/groups-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/groups-dark.png" />

```json
{
  "navigation": {
    "groups": [
      {
        "group": "Getting Started",
		"icon": "play",
        "pages": [
          "quickstart",
          {
            "group": "Editing",
			"icon": "pencil",
            "pages": [
				"installation",
				"editor",
				{
					"group": "Nested group",
					"icon": "code",
					"pages": [
						"navigation",
						"code"
					]
				}
			]
          }
        ]
      },
      {
        "group": "Writing Content",
 		"icon": "notebook-text",
        "tag": "NEW",
        "pages": ["writing-content/page", "writing-content/text"]
      }
    ]
  }
}
```

## Tabs

Tabs help distinguish between different topics or sections of your
documentation.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/tabs-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/tabs-dark.png" />

```json
"navigation": {
  "tabs": [
    {
      "tab": "API References",
      "pages": [
        "api-reference/get",
        "api-reference/post",
        "api-reference/delete"
      ]
    },
    {
      "tab": "SDKs",
      "pages": [
        "sdk/fetch",
        "sdk/create",
        "sdk/delete",
      ]
    },
    {
      "tab": "Blog",
      "href": "https://external-link.com/blog"
    }
  ]
}
```

***

## Anchors

Anchors are another way to section your content. They show up on top of your side navigation.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/anchors-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/anchors-dark.png" />

The configuration is very similar to tabs.

While not required, we highly recommend that you set an `icon` field as well.

```json
"navigation": {
  "anchors": [
    {
      "anchor": "Documentation",
      "icon": "book-open",
      "pages": [
        "quickstart",
        "development",
        "navigation"
      ]
    },
    {
      "anchor": "API References",
      "icon": "square-terminal",
      "pages": [
        "api-reference/get",
        "api-reference/post",
        "api-reference/delete"
      ]
    },
    {
      "anchor": "Blog",
      "href": "https://external-link.com/blog"
    }
  ]
}
```

***

Anchors that strictly contain external links can be achieved using the `global` keyword:

```json
"navigation": {
  "global":  {
    "anchors": [
      {
         "anchor": "Community",
         "icon": "house",
         "href": "https://slack.com"
      },
      {
         "anchor": "Blog",
         "icon": "pencil",
         "href": "https://mintlify.com/blog"
      }
    ]
  },
  "tabs": /*...*/
}
```

## Dropdowns

Dropdowns show up in the same place as anchors, but are consolidated into a single dropdown.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/dropdowns-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/dropdowns-dark.png" />

While not required, we also recommend that you set an icon for each dropdown item.

```json
"navigation": {
  "dropdowns": [
    {
      "dropdown": "Documentation",
      "icon": "book-open",
      "pages": [
        "quickstart",
        "development",
        "navigation"
      ]
    }
    {
      "dropdown": "API References",
      "icon": "square-terminal",
      "pages": [
        "api-reference/get",
        "api-reference/post",
        "api-reference/delete"
      ]
    }
    {
      "dropdown": "Blog",
      "href": "https://external-link.com/blog"
    }
  ]
}
```

***

## Versions

Versions can be leveraged to partition your navigation into different versions.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/versions-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/versions-dark.png" />

```json
{
  "navigation": {
    "versions": [
      {
        "version": "1.0.0",
        "groups": [
          {
            "group": "Getting Started",
            "pages": ["v1/overview", "v1/quickstart", "v1/development"]
          }
        ]
      },
      {
        "version": "2.0.0",
        "groups": [
          {
            "group": "Getting Started",
            "pages": ["v2/overview", "v2/quickstart", "v2/development"]
          }
        ]
      }
    ]
  }
}
```

***

## Languages

Languages can be leveraged to partition your navigation into different languages.

<img className="block dark:hidden pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages-light.png" />

<img className="hidden dark:block pointer-events-none" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages-dark.png" />

We currently support the following languages:

<CardGroup cols={2}>
  <Card title="Arabic (ar)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ar.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Chinese (cn)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/cn.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Chinese (zh-Hant)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/cn.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="English (en)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/en.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="French (fr)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/fr.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="German (de)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/de.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Indonesian (id)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/id.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Italian (it)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/it.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Japanese (jp)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/jp.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Korean (ko)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ko.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Portuguese (pt)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/pt.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Portuguese (pt-BR)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/pt-br.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Russian (ru)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/ru.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Spanish (es)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/es.png" className="w-6 h-6 my-0" />} horizontal />

  <Card title="Turkish (tr)" icon={<img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/navigation/languages/tr.png" className="w-6 h-6 my-0" />} horizontal />
</CardGroup>

```json
{
  "navigation": {
    "languages": [
      {
        "language": "en",
        "groups": [
          {
            "group": "Getting Started",
            "pages": ["en/overview", "en/quickstart", "en/development"]
          }
        ]
      },
      {
        "language": "es",
        "groups": [
          {
            "group": "Getting Started",
            "pages": ["es/overview", "es/quickstart", "es/development"]
          }
        ]
      }
    ]
  }
}
```

***

## Nesting

It's important to note that you can use any combination of anchors, tabs, and dropdowns - either one can be nested within each other interchangeably.

This way, you can create a very complex navigation structure that is easy to manage.

<CodeGroup>
  ```json Anchors
  {
    "navigation": {
      "anchors": [
        {
          "anchor": "Anchor 1",
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2"
                "just-a-file"
              ]
            }
          ]
        }
        {
          "anchor": "Anchor 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```

  ```json Tabs
  {
    "navigation": {
      "tabs": [
        {
          "tab": "Tab 1",
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2"
                "just-a-file"
              ]
            }
          ]
        }
        {
          "tab": "Tab 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```

  ```json Tabs with external anchors
  {
    "navigation": {
      "tabs": [
        {
          "tab": "Tab 1",
          "global": {
            "anchors": [
              {
                "anchor": "Anchor 1",
                "href": "https://mintlify.com/docs"
              }
            ]
          },
          "groups": [
            {
              "group": "Group 1",
              "pages": [
                "some-folder/file-1",
                "another-folder/file-2"
                "just-a-file"
              ]
            }
          ]
        }
        {
          "tab": "Tab 2",
          "groups": [
            {
              "group": "Group 2",
              "pages": [
                "some-other-folder/file-1",
                "various-different-folders/file-2",
                "another-file"
              ]
            }
          ]
        }
      ]
    }
  }
  ```
</CodeGroup>


# Pages
Source: https://mintlify.com/docs/pages

Pages are the building blocks of your documentation

Each page is an MDX file, which combines Markdown content with React components to let you create rich, interactive documentation.

## Page metadata

Every page starts with frontmatter—YAML metadata enclosed by `---` at the beginning of your file. This metadata controls how your page appears and behaves.

<ResponseField name="title" type="string" required>
  The title of your page that appears in navigation and browser tabs.
</ResponseField>

<ResponseField name="description" type="string">
  A brief description of what this page covers. Appears under the title and improves SEO.
</ResponseField>

<ResponseField name="sidebarTitle" type="string">
  A short title that displays in the sidebar navigation.
</ResponseField>

<ResponseField name="icon" type="string">
  An icon next to your page title in the sidebar. Choose an icon from Font Awesome, Lucide, or use a custom URL. Configure your preferred icon library with the [icons library setting](/settings#param-icons).
</ResponseField>

<ResponseField name="tag" type="string">
  A tag that appears next to your page title in the sidebar.
</ResponseField>

```yaml Example YAML frontmatter wrap
---
title: "About frontmatter"
description: "Frontmatter is the metadata that controls how your page appears and behaves"
sidebarTitle: "Frontmatter"
icon: "book"
tag: "NEW"
---
```

## Page mode

Control how your page displays with the `mode` setting.

### Default

If no mode is defined, defaults to a standard layout with a sidebar navigation and table of contents.

```yaml
---
title: "Default page title"
---
```

### Wide

Wide mode hides the table of contents. This is useful for pages that do not have any headings or if you prefer to use the extra horizontal space.

```yaml
---
title: "Wide page title"
mode: "wide"
---
```

### Custom

Custom mode provides a minimalist layout that removes all elements except for the top navbar. Custom mode is a blank canvas to create landing pages or any other unique layouts that you want to have minimal navigation elements for.

```yaml
---
title: "Custom page title"
mode: "custom"
---
```

### Center

Center mode removes the sidebar and table of contents, centering the content. This is useful for changelogs or other pages where you want to emphasize the content.

```yaml
---
title: "Center page title"
mode: "center"
---
```

## API pages

Create interactive API playgrounds by adding an API specification to your frontmatter, `api` or `openapi`.

```yaml
---
openapi: "GET /endpoint"
---
```

Learn more about building [API documentation](/api-playground/overview).

## External links

Link to external sites directly from your navigation with the `url` metadata.

```yaml
---
title: "npm Package"
url: "https://www.npmjs.com/package/mint"
---
```

## Search engine optimization

Most SEO meta tags are automatically generated. You can set SEO meta tags manually to improve your site's SEO, social sharing, and browser compatibility.

<Note>
  Meta tags with colons must be wrapped in quotes.
</Note>

```yaml
---
"twitter:image": "/images/social-preview.jpg"
---
```

See [SEO](/settings/seo) for complete SEO metadata options.

## Internal search keywords

Enhance a specific page's discoverability in the built-in search by providing `keywords` in your metadata. These keywords won't appear as part of the page content or in search results, but users that search for them will be shown the page as a result.

```yaml
---
keywords: ['configuration', 'setup', 'getting started']
---
```


# Quickstart
Source: https://mintlify.com/docs/quickstart

Deploy your documentation in minutes

This quickstart guide shows you how to set up and deploy your documentation site in minutes.

After you complete this guide, you will have a live documentation site ready to customize and expand.

<Info>
  **Prerequisites**: Before you begin, [create an account](https://mintlify.com/start) and complete onboarding.
</Info>

## Getting Started

After you complete the onboarding process, your documentation site will automatically deploy to a unique URL with this format:

```
https://<your-project-name>.mintlify.app
```

Find your URL on the Overview page of your [dashboard](https://dashboard.mintlify.com/).

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/mintlify-domain-light.png" alt="Mintlify Domain" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/mintlify-domain-dark.png" alt="Mintlify Domain" className="hidden dark:block" />
</Frame>

This URL becomes available immediately and updates when you make changes to your documentation. Use this URL for testing and sharing with your team during development.

### Install the GitHub App

Mintlify provides a GitHub App that automates deployment when you push changes to your repository.

Install the GitHub App by following the instructions from the onboarding checklist or from your dashboard.

1. Navigate to **Settings** in your Mintlify dashboard.
2. Select **GitHub App** from the sidebar.
3. Select **Install GitHub App**. This opens a new tab to the GitHub App installation page.
4. Select the organization or user account where you want to install the app. Then select the repositories that you want to connect.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/github-app-installation-light.png" alt="GitHub App Installation" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/github-app-installation-dark.png" alt="GitHub App Installation" className="hidden dark:block" />
</Frame>

<Info>
  Update the GitHub App permissions if you move your documentation to a different repository.
</Info>

### Authorize your GitHub Account

1. Navigate to **Settings** in your Mintlify dashboard.
2. Select **My Profile** from the sidebar.
3. Select **Authorize GitHub account**. This opens a new tab to the GitHub authorization page.

<Info>
  An admin for your GitHub organization may need to authorize your account depending on your organization settings.
</Info>

## Editing Workflows

Mintlify offers two workflows for creating and maintaining your documentation.

<Card title="Code-based workflow" icon="terminal" horizontal href="#code-based-workflow">
  For users who prefer working with existing tools in their local environment. Click to jump to this section.
</Card>

<Card title="Web editor workflow" icon="mouse-pointer-2" horizontal href="#web-editor-workflow">
  For users who prefer a visual interface in their web browser. Click to jump to this section.
</Card>

## Code-Based Workflow

The code-based workflow integrates with your existing development environment and Git repositories. This workflow is best for technical teams who want to manage documentation alongside code.

### Install the CLI

To work locally with your documentation, install the Command Line Interface (CLI), called [mint](https://www.npmjs.com/package/mint), by running this command in your terminal:

<CodeGroup>
  ```bash npm
  npm install -g mint
  ```

  ```bash yarn
  yarn global add mint
  ```

  ```bash pnpm
  pnpm add -g mint
  ```
</CodeGroup>

<Info>
  You need Node.js installed on your machine. If you encounter installation issues, check the troubleshooting guide.
</Info>

### Edit the Documentation

After you set up your environment, you can start editing your documentation files. For example, update the title of the introduction page:

Open your repository created during onboarding, find the `index.mdx` file, and find the top of the file:

```mdx index.mdx
---
title: "Introduction"
description: "This is the introduction to the documentation"
---
```

Update the `title` field to `"Hello World"`.

```mdx index.mdx {2}
---
title: "Hello World"
description: "This is the introduction to the documentation"
---
```

### Preview the Changes

To preview the changes locally, run this command:

```bash
mint dev
```

Your preview will be available at `localhost:3000`.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/mintlify-dev-light.png" alt="Mintlify Dev" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/mintlify-dev-dark.png" alt="Mintlify Dev" className="hidden dark:block" />
</Frame>

### Push the Changes

When you are ready to publish your changes, push the changes to your repository.

Mintlify automatically detects the changes, builds your documentation, and deploys the updates to your site. Monitor the deployment status in your GitHub repository commit history or the [dashboard](https://dashboard.mintlify.com).

After the deployment is complete, your latest update will be available at `<your-project-name>.mintlify.app`.

<Card title="Jump to adding a custom domain" icon="arrow-down" href="#adding-a-custom-domain" horizontal>
  Optionally, skip the web editor workflow and jump to adding a custom domain.
</Card>

## Web Editor Workflow

The web editor workflow provides a what-you-see-is-what-you-get (WYSIWYG) interface for creating and editing documentation. This workflow is best for people who want to work in their web browser without additional local development tools.

### Access the Web Editor

1. Log in to your [dashboard](https://dashboard.mintlify.com).
2. Select **Editor** on the left sidebar.

<Info>
  If you have not installed the GitHub App, you will be prompted to install the app when you open the web editor.
</Info>

<Frame>
  <img alt="The Mintlify web editor in the visual editor mode" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/web-editor-light.png" className="block dark:hidden" />

  <img alt="The Mintlify web editor in the visual editor mode" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/web-editor-dark.png" className="hidden dark:block" />
</Frame>

### Edit the Documentation

In the web editor, you can navigate through your documentation files in the sidebar. Let's update the introduction page:

Find and select `index.mdx` in the file explorer.

Then, in the editor, update the title field to "Hello World".

<Frame>
  <img alt="Editing in Web Editor" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/web-editor-editing-light.png" className="block dark:hidden" />

  <img alt="Editing in Web Editor" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/web-editor-editing-dark.png" className="hidden dark:block" />
</Frame>

<Tip>
  The editor provides a rich set of formatting tools and components. Type <kbd>/</kbd> in the editor to open the command menu and access these tools.
</Tip>

### Publish Your Changes

When you are satisfied with your edits, select the **Publish** button in the top-right corner. Your changes are immediately deployed to your documentation site.

<Tip>
  Use branches to preview and review changes through pull requests before deploying to your live site.
</Tip>

For more details about using the web editor, including using branches and pull request to collaborate and preview changes, see our [web editor documentation](/editor).

## Adding a Custom Domain

While your `<your-project-name>.mintlify.app` subdomain works well for testing and development, most teams prefer using a custom domain for production documentation.

To add a custom domain, go to `Settings` > `Custom Domain` from the dashboard.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/custom-domain-light.png" alt="Custom Domain" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/quickstart/custom-domain-dark.png" alt="Custom Domain" className="hidden dark:block" />
</Frame>

Enter your domain (for example, `docs.yourcompany.com`) and follow the provided instructions to configure DNS (Domain Name System) settings with your domain provider.

<Table>
  | Record Type | Name                | Value              | TTL  |
  | ----------- | ------------------- | ------------------ | ---- |
  | CNAME       | docs (or subdomain) | cname.mintlify.app | 3600 |
</Table>

<Info>
  DNS changes can take up to 48 hours to propagate, though changes often complete much sooner.
</Info>

## Next Steps

Congratulations! You have successfully deployed your documentation site with Mintlify. Here are suggested next steps to enhance your documentation:

<Card title="Configure your global settings" icon="settings" href="settings" horizontal>
  Configure site-wide styling, navigation, integrations, and more with the `docs.json` file.
</Card>

<Card title="Customize your theme" icon="paintbrush" href="themes" horizontal>
  Learn how to customize colors, fonts, and the overall appearance of your documentation site.
</Card>

<Card title="Organize navigation" icon="map" href="navigation" horizontal>
  Structure your documentation with intuitive navigation to help users find what they need.
</Card>

<Card title="Add interactive components" icon="puzzle" href="/components/accordions" horizontal>
  Enhance your documentation with interactive components like accordions, tabs, and code samples.
</Card>

<Card title="Set up API references" icon="code" href="/api-playground/overview" horizontal>
  Create interactive API references with OpenAPI and AsyncAPI specifications.
</Card>

## Troubleshooting

If you encounter issues during the setup process, check these common troubleshooting solutions:

<AccordionGroup>
  <Accordion title="Local preview not working">
    Make sure you have Node.js v19+ installed and that you run the `mint dev` command from the directory containing your `docs.json` file.
  </Accordion>

  <Accordion title="Changes not reflecting on live site">
    Deployment can take upwards to a few minutes. Check your GitHub Actions (for code-based workflow) or deployment logs in the Mintlify dashboard to ensure there are no build errors.
  </Accordion>

  <Accordion title="Custom domain not connecting">
    Verify that your DNS records are set up correctly and allow sufficient time for DNS propagation (up to 48 hours). You can use tools like [DNSChecker](https://dnschecker.org) to verify your CNAME record.
  </Accordion>
</AccordionGroup>


# React
Source: https://mintlify.com/docs/react-components

Build interactive and reusable elements with React components

export const ColorGenerator = () => {
  const [hue, setHue] = useState(165);
  const [saturation, setSaturation] = useState(84);
  const [lightness, setLightness] = useState(31);
  const [colors, setColors] = useState([]);
  useEffect(() => {
    const newColors = [];
    for (let i = 0; i < 5; i++) {
      const l = Math.max(10, Math.min(90, lightness - 20 + i * 10));
      newColors.push(`hsl(${hue}, ${saturation}%, ${l}%)`);
    }
    setColors(newColors);
  }, [hue, saturation, lightness]);
  const copyToClipboard = color => {
    navigator.clipboard.writeText(color).then(() => {
      console.log(`Copied ${color} to clipboard!`);
    }).catch(err => {
      console.error("Failed to copy: ", err);
    });
  };
  return <div className="p-4 border dark:border-white/10 rounded-2xl not-prose">
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Hue: {hue}°
            <input type="range" min="0" max="360" value={hue} onChange={e => setHue(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(0, ${saturation}%, ${lightness}%), 
                  hsl(60, ${saturation}%, ${lightness}%), 
                  hsl(120, ${saturation}%, ${lightness}%), 
                  hsl(180, ${saturation}%, ${lightness}%), 
                  hsl(240, ${saturation}%, ${lightness}%), 
                  hsl(300, ${saturation}%, ${lightness}%), 
                  hsl(360, ${saturation}%, ${lightness}%))`
  }} />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Saturation: {saturation}%
            <input type="range" min="0" max="100" value={saturation} onChange={e => setSaturation(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(${hue}, 0%, ${lightness}%), 
                  hsl(${hue}, 50%, ${lightness}%), 
                  hsl(${hue}, 100%, ${lightness}%))`
  }} />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Lightness: {lightness}%
            <input type="range" min="0" max="100" value={lightness} onChange={e => setLightness(Number.parseInt(e.target.value))} className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1" style={{
    background: `linear-gradient(to right, 
                  hsl(${hue}, ${saturation}%, 0%), 
                  hsl(${hue}, ${saturation}%, 50%), 
                  hsl(${hue}, ${saturation}%, 100%))`
  }} />
          </label>
        </div>

        <div className="flex space-x-2">
          {colors.map((color, idx) => <div key={idx} className="h-16 rounded flex-1 cursor-pointer transition-transform hover:scale-105" style={{
    backgroundColor: color
  }} title={`Click to copy: ${color}`} onClick={() => copyToClipboard(color)} />)}
        </div>

        <div className="text-sm font-mono text-zinc-950/70 dark:text-white/70">
          <p>
            Base color: hsl({hue}, {saturation}%, {lightness}%)
          </p>
        </div>
      </div>
    </div>;
};

export const Counter = () => {
  const [count, setCount] = useState(0);
  const increment = () => setCount(count + 1);
  const decrement = () => setCount(count - 1);
  return <div className="flex items-center justify-center">
      <div className="flex items-center rounded-xl overflow-hidden border border-zinc-950/20 dark:border-white/20">
        <button onClick={decrement} className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-r border-zinc-950/20 dark:border-white/20" aria-label="Decrease">
          -
        </button>

        <div className="flex text-sm items-center justify-center h-8 px-6 text-zinc-950/80 dark:text-white/80 font-medium min-w-[4rem] text-center">
          {count}
        </div>

        <button onClick={increment} className="flex items-center justify-center h-8 w-8 text-zinc-950/80 dark:text-white/80 border-l border-zinc-950/20 dark:border-white/20" aria-label="Increase">
          +
        </button>
      </div>
    </div>;
};

[React components](https://react.dev) are a powerful way to create interactive and reusable elements in your documentation.

You can use React directly in your MDX files without any additional setup.

## Using React Components

You can build components directly in your MDX files using [React hooks](https://react.dev/reference/react/hooks).

### Basic Example

Here's a basic example of a counter component:

```mdx
export const Counter = () => {
  const [count, setCount] = useState(0);
  
  return (
    <div>
      <p>Current count: {count}</p>
      <button onClick={() => setCount(count + 1)}>
        +
      </button>
    </div>
  );
}
```

The `Counter` component can then be used in your MDX files like this:

```mdx
<Counter />
```

And the component will be rendered as a React component in the MDX file.

<Counter />

## Importing Components

Just like in regular React, you can import components from other files.

```mdx
import { ColorGenerator } from "/snippets/color-generator.jsx"
```

<Warning>
  But unlike regular React, you can't import components from every MDX file. Re-usable components can only be referenced from MDX files within the `snippets` folder.
</Warning>

After importing the component, you can use it in your MDX files like this:

```mdx
<ColorGenerator />
```

Learn more about [reusable snippets](/reusable-snippets).

### Complex Example

You can also build much more complex components. Here's an example of a color generator component that uses multiple React hooks:

```mdx /snippets/color-generator.jsx [expandable]
export const ColorGenerator = () => {
  const [hue, setHue] = useState(180)
  const [saturation, setSaturation] = useState(50)
  const [lightness, setLightness] = useState(50)
  const [colors, setColors] = useState([])

  useEffect(() => {
    const newColors = []
    for (let i = 0; i < 5; i++) {
      const l = Math.max(10, Math.min(90, lightness - 20 + i * 10))
      newColors.push(`hsl(${hue}, ${saturation}%, ${l}%)`)
    }
    setColors(newColors)
  }, [hue, saturation, lightness])

  const copyToClipboard = (color) => {
    navigator.clipboard
      .writeText(color)
      .then(() => {
        console.log(`Copied ${color} to clipboard!`)
      })
      .catch((err) => {
        console.error("Failed to copy: ", err)
      })
  }

  return (
    <div className="p-4 border dark:border-zinc-950/80 rounded-xl not-prose">
      <div className="space-y-4">
        <div className="space-y-2">
          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Hue: {hue}°
            <input
              type="range"
              min="0"
              max="360"
              value={hue}
              onChange={(e) => setHue(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(0, ${saturation}%, ${lightness}%), 
                  hsl(60, ${saturation}%, ${lightness}%), 
                  hsl(120, ${saturation}%, ${lightness}%), 
                  hsl(180, ${saturation}%, ${lightness}%), 
                  hsl(240, ${saturation}%, ${lightness}%), 
                  hsl(300, ${saturation}%, ${lightness}%), 
                  hsl(360, ${saturation}%, ${lightness}%))`,
              }}
            />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Saturation: {saturation}%
            <input
              type="range"
              min="0"
              max="100"
              value={saturation}
              onChange={(e) => setSaturation(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(${hue}, 0%, ${lightness}%), 
                  hsl(${hue}, 50%, ${lightness}%), 
                  hsl(${hue}, 100%, ${lightness}%))`,
              }}
            />
          </label>

          <label className="block text-sm text-zinc-950/70 dark:text-white/70">
            Lightness: {lightness}%
            <input
              type="range"
              min="0"
              max="100"
              value={lightness}
              onChange={(e) => setLightness(Number.parseInt(e.target.value))}
              className="w-full h-2 bg-zinc-950/20 rounded-lg appearance-none cursor-pointer dark:bg-white/20 mt-1"
              style={{
                background: `linear-gradient(to right, 
                  hsl(${hue}, ${saturation}%, 0%), 
                  hsl(${hue}, ${saturation}%, 50%), 
                  hsl(${hue}, ${saturation}%, 100%))`,
              }}
            />
          </label>
        </div>

        <div className="flex space-x-1">
          {colors.map((color, idx) => (
            <div
              key={idx}
              className="h-16 rounded flex-1 cursor-pointer transition-transform hover:scale-105"
              style={{ backgroundColor: color }}
              title={`Click to copy: ${color}`}
              onClick={() => copyToClipboard(color)}
            />
          ))}
        </div>

        <div className="text-sm font-mono text-zinc-950/70 dark:text-white/70">
          <p>
            Base color: hsl({hue}, {saturation}%, {lightness}%)
          </p>
        </div>
      </div>
    </div>
  )
}
```

The above component can then be used in your MDX files like this:

```mdx
<ColorGenerator />
```

And the component will be rendered as a React component in the MDX file.

<ColorGenerator />

## Considerations

<AccordionGroup>
  <Accordion title="Client-Side Rendering Impact">
    React hook components render on the client-side, which has several implications:

    * **SEO**: Search engines might not fully index dynamic content
    * **Initial Load**: Visitors may experience a flash of loading content before components render
    * **Accessibility**: Ensure dynamic content changes are announced to screen readers
  </Accordion>

  <Accordion title="Performance Best Practices">
    * **Optimize Dependency Arrays**: Include only necessary dependencies in your `useEffect` dependency arrays
    * **Memoize Complex Calculations**: Use `useMemo` or `useCallback` for expensive operations
    * **Reduce Re-renders**: Break large components into smaller ones to prevent cascading re-renders
    * **Lazy Loading**: Consider lazy loading complex components to improve initial page load time
  </Accordion>
</AccordionGroup>


# Reusable snippets
Source: https://mintlify.com/docs/reusable-snippets

Reusable, custom snippets to keep content in sync

One of the core principles of software development is DRY (Don't Repeat
Yourself), which applies to documentation as
well. If you find yourself repeating the same content in multiple places, you
should create a custom snippet to keep your content in sync.

## Creating a custom snippet

**Pre-condition**: You must create your snippet file in the `snippets` directory in order for the import to work.

Any page in the `snippets` directory will be treated as a snippet and will not
be rendered into a standalone page. If you want to create a standalone page
from the snippet, import the snippet into another file and call it as a
component.

### Default export

1. Add content to your snippet file that you want to re-use. Optionally, you can add variables that can be filled in via props
   when you import the snippet. In this example, our variable is word.

```typescript snippets/my-snippet.mdx
Hello world! This is my content I want to reuse across pages. 
```

2. Import the snippet into your destination file.

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet/>

```

### Exporting with variables

1. Optionally, you can add variables that can be filled in via props when you import the snippet. In this example, our variable is word.

```typescript snippets/my-snippet.mdx
My keyword of the day is {word}.
```

2. Import the snippet into your destination file with the variable. The property will fill in based on your specification.

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import MySnippet from '/snippets/path/to/my-snippet.mdx';

## Header

Lorem impsum dolor sit amet.

<MySnippet word="bananas" />

```

### Reusable variables

1. Export a variable from your snippet file:

```typescript snippets/path/to/custom-variables.mdx
export const myName = 'my name';

export const myObject = { fruit: 'strawberries' };
```

2. Import the snippet from your destination file and use the variable:

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import { myName, myObject } from '/snippets/path/to/custom-variables.mdx';

Hello, my name is {myName} and I like {myObject.fruit}.
```

### JSX snippets

1. Export a JSX component from your snippet file. (See [React components](/react-components) for more information):

```js icon=square-js snippets/my-jsx-snippet.jsx
export const MyJSXSnippet = () => {
  return (
    <div>
      <h1>Hello, world!</h1>
    </div>
  )
}
```

<Note>
  Important: When creating JSX snippets, use arrow function syntax (`=>`) rather than function declarations. The `function` keyword is not supported in this context.
</Note>

2. Import the snippet from your destination file and use the component:

```typescript destination-file.mdx
---
title: My title
description: My Description
---

import { MyJSXSnippet } from '/snippets/my-jsx-snippet.jsx';
```


# Global settings
Source: https://mintlify.com/docs/settings

Configure site-wide settings with the `docs.json` file

The `docs.json` file lets you turn a collection of Markdown files into a navigable, customized documentation site. This required configuration file controls styling, navigation, integrations, and more.

Settings in `docs.json` apply globally to all pages.

## Setting up your `docs.json`

To get started, you only need to specify `theme`, `name`, `colors.primary`, and `navigation`. Other fields are optional and you can add them as your documentation needs grow.

For the best editing experience, include the schema reference at the top of your `docs.json` file. This enables autocomplete, validation, and helpful tooltips in most code editors:

```json
{
  "$schema": "https://mintlify.com/docs.json",
  "theme": "mint",
  "name": "Your Docs",
  "colors": {
    "primary": "#ff0000"
  },
  "navigation": {
    // Your navigation structure
  }
  // The rest of your configuration
}
```

## Reference

This section contains the full reference for the `docs.json` file.

### Customization

<ResponseField name="theme" required>
  The layout theme of your site.

  One of the following: `mint`, `maple`, `palm`, `willow`, `linden`, `almond`, `aspen`.

  See [Themes](themes) for more information.
</ResponseField>

<ResponseField name="name" type="string" required>
  The name of your project, organization, or product.
</ResponseField>

<ResponseField name="colors" type="object" required>
  The colors to use in your documentation. A primary color is required. For example:

  ```json
  {
    "colors": {
      "primary": "#ff0000"
    }
  }
  ```

  <Expandable title="Colors">
    <ResponseField name="primary" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$" required>
      The primary color of your theme.

      Must be a hex code beginning with `#`.
    </ResponseField>

    <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
      Light color variant of your theme.

      Must be a hex code beginning with `#`.
    </ResponseField>

    <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
      Dark color variant of your theme.

      Must be a hex code beginning with `#`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="description" type="string">
  Description of your site for SEO and AI indexing.
</ResponseField>

<ResponseField name="logo" type="string or object">
  Your logo for both light and dark mode.

  <Expandable title="Logo">
    <ResponseField name="light" type="string" required>
      Path pointing to your logo file for light mode. Include the file extension. Example: `/logo.png`
    </ResponseField>

    <ResponseField name="dark" type="string" required>
      Path pointing to your logo file for dark mode. Include the file extension. Example: `/logo-dark.png`
    </ResponseField>

    <ResponseField name="href" type="string (uri)">
      The URL to redirect to when clicking the logo. If not provided, the logo will link to your homepage. Example: `https://mintlify.com`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="favicon" type="string or object">
  Path to your favicon file, including the file extension. Automatically resized to appropriate favicon sizes.
  Can be a single file or separate files for light and dark mode. Example: `/favicon.png`

  <Expandable title="Favicon">
    <ResponseField name="light" type="string" required>
      Path to your favicon file for light mode. Include the file extension. Example: `/favicon.png`
    </ResponseField>

    <ResponseField name="dark" type="string" required>
      Path to your favicon file for dark mode. Include the file extension. Example: `/favicon-dark.png`
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="thumbnails" type="object">
  Thumbnail customization for social media and page previews.

  <Expandable title="Thumbnails">
    <ResponseField name="appearance" type="&#x22;light&#x22; | &#x22;dark&#x22;">
      The visual theme of your thumbnails. If not specified, thumbnails use your site's color scheme defined by the `colors` field.
    </ResponseField>

    <ResponseField name="background" type="string">
      Background image for your thumbnails. Can be a relative path or absolute URL.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="styling" type="object">
  Visual styling configurations.

  <Expandable title="Styling">
    <ResponseField name="eyebrows" type="&#x22;section&#x22; | &#x22;breadcrumbs&#x22;">
      The style of the page eyebrow. Choose `section` to show the section name or `breadcrumbs` to show the full navigation path. Defaults to `section`.
    </ResponseField>

    <ResponseField name="codeblocks" type="&#x22;system&#x22; | &#x22;dark&#x22;">
      The theme of the code blocks. Choose `system` to match the site theme or `dark` for always dark code blocks. Defaults to `system`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="icons" type="object">
  Icon library settings.

  <Expandable title="Icons">
    <ResponseField name="library" type="&#x22;fontawesome&#x22; | &#x22;lucide&#x22;" required>
      Icon library to use throughout your documentation. Defaults to `fontawesome`.

      <Note>
        You can specify a URL for any individual icon, regardless of the library setting.
      </Note>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="fonts" type="object">
  Font configuration for your documentation. The default font is [Inter](https://fonts.google.com/specimen/Inter).

  <Expandable title="Fonts">
    <ResponseField name="family" type="string" required>
      Font family, such as "Open Sans", "Playfair Display."
    </ResponseField>

    <ResponseField name="weight" type="number">
      Font weight, such as 400 or 700. Variable fonts support precise weights  such as 550.
    </ResponseField>

    <ResponseField name="source" type="string (uri)">
      URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
    </ResponseField>

    <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
      Font file format.
    </ResponseField>

    <ResponseField name="heading" type="object">
      Override font settings specifically for headings.

      <Expandable title="Heading">
        <ResponseField name="family" type="string" required>
          Font family, such as "Open Sans", "Playfair Display."
        </ResponseField>

        <ResponseField name="weight" type="number">
          Font weight, such as 400, 700. Variable fonts support precise weights such as 550.
        </ResponseField>

        <ResponseField name="source" type="string (uri)">
          URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
        </ResponseField>

        <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
          Font file format.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="body" type="object">
      Override font settings specifically for body text.

      <Expandable title="Body">
        <ResponseField name="family" type="string" required>
          Font family, such as "Open Sans", "Playfair Display."
        </ResponseField>

        <ResponseField name="weight" type="number">
          Font weight, such as 400, 700. Variable fonts support precise weights such as 550.
        </ResponseField>

        <ResponseField name="source" type="string (uri)">
          URL to your font source, such as [https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2](https://mintlify-assets.b-cdn.net/fonts/Hubot-Sans.woff2). [Google Fonts](https://fonts.google.com) are loaded automatically when you specify a Google Font `family` name, so no source URL is needed.
        </ResponseField>

        <ResponseField name="format" type="&#x22;woff&#x22; | &#x22;woff2&#x22;">
          Font file format.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="appearance" type="object">
  Light/dark mode toggle settings.

  <Expandable title="Appearance">
    <ResponseField name="default" type="&#x22;system&#x22; | &#x22;light&#x22; | &#x22;dark&#x22;">
      Default theme mode. Choose `system` to match users' OS settings, or `light` or `dark` to force a specific mode. Defaults to `system`.
    </ResponseField>

    <ResponseField name="strict" type="boolean">
      Whether to hide the light/dark mode toggle. Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="background" type="object">
  Background color and decoration settings.

  <Expandable title="Background">
    <ResponseField name="image" type="string or object">
      Background image for your site. Can be a single file or separate files for light and dark mode.

      <Expandable title="Image">
        <ResponseField name="light" type="string" required>
          Path to your background image for light mode. Include the file extension. Example: `/background.png`.
        </ResponseField>

        <ResponseField name="dark" type="string" required>
          Path to your background image for dark mode. Include the file extension. Example: `/background-dark.png`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="decoration" type="&#x22;gradient&#x22; | &#x22;grid&#x22; | &#x22;windows&#x22;">
      Background decoration for your theme.
    </ResponseField>

    <ResponseField name="color" type="object">
      Custom background colors for light and dark modes.

      <Expandable title="Color">
        <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
          Background color for light mode.

          Must be a hex code beginning with `#`.
        </ResponseField>

        <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
          Background color for dark mode.

          Must be a hex code beginning with `#`.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### Structure

<ResponseField name="navbar" type="object">
  Navigation bar items.

  <Expandable title="Navbar">
    <ResponseField name="links" type="array of object">
      Links to display in the navbar

      <Expandable title="Links">
        <ResponseField name="label" type="string" required>
          Text for the link.
        </ResponseField>

        <ResponseField name="href" type="string (uri)" required>
          URL or path for the link destination.
        </ResponseField>

        <ResponseField name="icon" type="string | object">
          Icon for the link. Can be a URL (relative or external), Font Awesome icon, or Lucide icon.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="primary" type="object">
      Primary button in the navbar.

      <Expandable title="Primary">
        <ResponseField name="type" type="&#x22;button&#x22; | &#x22;github&#x22;" required>
          Button style. Choose `button` for a standard button with a label or `github` for a link to a GitHub repository with icon.
        </ResponseField>

        <ResponseField name="label" type="string" required>
          Button text. Only applies when `type` is `button`.
        </ResponseField>

        <ResponseField name="href" type="string (uri)" required>
          Button destination. Must be a valid path or external URL. If `type` is `github`, must be a GitHub repository URL.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="navigation" type="object" required>
  The navigation structure of your content.

  <Expandable title="Navigation">
    <ResponseField name="global" type="object">
      Global navigation elements that appear accross all pages and sections.

      <Expandable title="Global">
        <ResponseField name="languages" type="array of object">
          Language switcher configuration for multi-language sites.

          <Expandable title="Languages">
            <ResponseField name="language" type="&#x22;en&#x22; | &#x22;cn&#x22; | &#x22;zh&#x22; | &#x22;zh-Hans&#x22; | &#x22;zh-Hant&#x22; | &#x22;es&#x22; | &#x22;fr&#x22; | &#x22;ja&#x22; | &#x22;jp&#x22; | &#x22;pt&#x22; | &#x22;pt-BR&#x22; | &#x22;de&#x22; | &#x22;ko&#x22; | &#x22;it&#x22; | &#x22;ru&#x22; | &#x22;id&#x22; | &#x22;ar&#x22; | &#x22;tr&#x22;" required>
              Language code in ISO 639-1 format
            </ResponseField>

            <ResponseField name="default" type="boolean">
              Whether this is the default language.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this language option by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              A valid path or external link to this language version of your documentation.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="versions" type="array of object">
          Version switcher configuration for multi-version sites.

          <Expandable title="Versions">
            <ResponseField name="version" type="string" required>
              Display name of the version.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="default" type="boolean">
              Whether this is the default version.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this version option by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path to this version of your documentation.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="tabs" type="array of object">
          Top-level navigation tabs for organizing major sections.

          <Expandable title="Tabs">
            <ResponseField name="tab" type="string" required>
              Display name of the tab.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string or object">
              Icon for the tab. Can be a URL (relative or external), Font Awesome icon, or Lucide icon.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this tab by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the tab destination.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="anchors" type="array of object">
          Anchored links that appear prominently in the sidebar navigation.

          <Expandable title="Anchors">
            <ResponseField name="anchor" type="string" required>
              Display name of the anchor.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string or object">
              Icon for the anchor. Can be a URL (relative or external), Font Awesome icon, or Lucide icon.
            </ResponseField>

            <ResponseField name="color" type="object">
              Custom colors for the anchor.

              <Expandable title="Color">
                <ResponseField name="light" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
                  Anchor color for light mode.

                  Must be a hex code beginning with `#`.
                </ResponseField>

                <ResponseField name="dark" type="string matching ^#([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$">
                  Anchor color for dark mode.

                  Must be a hex code beginning with `#`.
                </ResponseField>
              </Expandable>
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this anchor by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the anchor destination.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="dropdowns" type="array of object">
          Dropdown menus for organizing related content.

          <Expandable title="Dropdowns">
            <ResponseField name="dropdown" type="string" required>
              Display name of the dropdown.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="icon" type="string or object">
              Icon for the dropdown. Can be a URL (relative or external), Font Awesome icon, or Lucide icon.
            </ResponseField>

            <ResponseField name="hidden" type="boolean">
              Whether to hide this dropdown by default.
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              URL or path for the dropdown destination.
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="languages" type="array of object">
      Language switcher for [multi-language](navigation#languages) sites.
    </ResponseField>

    <ResponseField name="versions" type="array of object">
      Version switcher for sites with multiple [versions](navigation#versions).
    </ResponseField>

    <ResponseField name="tabs" type="array of object">
      Top-level navigation [tabs](navigation#tabs).
    </ResponseField>

    <ResponseField name="anchors" type="array of object">
      Sidebar [anchors](navigation#anchors).
    </ResponseField>

    <ResponseField name="dropdowns" type="array of object">
      [Dropdowns](navigation#dropdowns) for grouping related content.
    </ResponseField>

    <ResponseField name="groups" type="array of object">
      [Groups](navigation#groups) for organizing content into sections.
    </ResponseField>

    <ResponseField name="pages" type="array of string or object">
      Individual [pages](navigation#pages) that make up your documentation.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="footer" type="object">
  Footer content and social media links.

  <Expandable title="Footer">
    <ResponseField name="socials" type="object">
      Social media profiles to display in the footer. Each key is a platform name and each value is your profile URL. For example:

      ```json
      {
        "x": "https://x.com/mintlify"
      }
      ```

      Valid property names: `x`, `website`, `facebook`, `youtube`, `discord`, `slack`, `github`, `linkedin`, `instagram`, `hacker-news`, `medium`, `telegram`, `twitter`, `x-twitter`, `earth-americas`, `bluesky`, `threads`, `reddit`, `podcast`
    </ResponseField>

    <ResponseField name="links" type="array of object">
      Links to display in the footer.

      <Expandable title="Links">
        <ResponseField name="header" type="string">
          Header title for the column.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="items" type="array of object" required>
          Links to display in the column.

          <Expandable title="Items">
            <ResponseField name="label" type="string" required>
              Link text.

              Minimum length: 1
            </ResponseField>

            <ResponseField name="href" type="string (uri)" required>
              Link destination URL.
            </ResponseField>
          </Expandable>
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="banner" type="object">
  Site-wide banner displayed at the top of pages.

  <Expandable title="Banner">
    <ResponseField name="content" type="string">
      The content of the banner. Supports plain text and Markdown formatting. For example:

      ```json
      {
        "content": "🚀 Banner is live! [Learn more](mintlify.com)"
      }
      ```
    </ResponseField>

    <ResponseField name="dismissible" type="boolean">
      Whether users can dismiss the banner. Defaults to `false`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="redirects" type="array of object">
  Redirects for moved, renamed, or deleted pages.

  <Expandable title="Redirects">
    <ResponseField name="source" type="string" required>
      Source path to redirect from. Example: `/old-page`
    </ResponseField>

    <ResponseField name="destination" type="string" required>
      Destination path to redirect to. Example: `/new-page`
    </ResponseField>

    <ResponseField name="permanent" type="boolean">
      Whether to use a permanent redirect (301). Defaults to `true`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="contextual" type="object">
  Contextual menu for AI-optimized content and integrations.

  <Expandable title="Contextual">
    <ResponseField name="options" type="array of &#x22;copy&#x22; | &#x22;view&#x22; | &#x22;chatgpt&#x22; | &#x22;claude&#x22;" required>
      Actions available in the contextual menu. The first option appears as the default.

      * `copy`: Copy the current page as Markdown to the clipboard.
      * `view`: View the current page as Markdown in a new tab.
      * `chatgpt`: Send the current page content to ChatGPT.
      * `claude`: Send the current page content to Claude.

      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/page-context-menu.png" alt="Contextual Menu" className="rounded-xl" />

      <Note>
        The contextual menu is only available on preview and production deployments.
      </Note>
    </ResponseField>
  </Expandable>
</ResponseField>

### API Configurations

<ResponseField name="api" type="object">
  API documentation and interactive playground settings.

  <Expandable title="Api">
    <ResponseField name="openapi" type="string or array or object">
      OpenAPI specification files for generating API documentation. Can be a single URL/path or an array of URLs/paths.

      <Expandable title="Openapi">
        <ResponseField name="source" type="string">
          URL or path to your OpenAPI specification file.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="directory" type="string">
          Directory to search for OpenAPI files.

          Do not include a leading slash.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="asyncapi" type="string or array or object">
      AsyncAPI specification files for generating API documentation. Can be a single URL/path or an array of URLs/paths.

      <Expandable title="Asyncapi">
        <ResponseField name="source" type="string">
          URL or path to your AsyncAPI specification file.

          Minimum length: 1
        </ResponseField>

        <ResponseField name="directory" type="string">
          Directory to search for AsyncAPI files.

          Do not include a leading slash.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="params" type="object">
      Display settings for API parameters.

      <Expandable title="Params">
        <ResponseField name="expanded" type="&#x22;all&#x22; | &#x22;closed&#x22;">
          Whether to expand all parameters by default. Defaults to `closed`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="playground" type="object">
      API playground settings.

      <Expandable title="Playground">
        <ResponseField name="display" type="&#x22;interactive&#x22; | &#x22;simple&#x22; | &#x22;none&#x22;">
          The display mode of the API playground. Defaults to `interactive`.
        </ResponseField>

        <ResponseField name="proxy" type="boolean">
          Whether to pass API requests through a proxy server. Defaults to `true`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="examples" type="object">
      Configurations for the autogenerated API examples.

      <Expandable title="Examples">
        <ResponseField name="languages" type="array of string">
          Example languages for the autogenerated API snippets
        </ResponseField>

        <ResponseField name="defaults" type="&#x22;required&#x22; | &#x22;all&#x22;">
          Whether to show optional parameters in API examples. Defaults to `all`.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="mdx" type="object">
      Configurations for API pages generated from `MDX` files.

      <Expandable title="Mdx">
        <ResponseField name="auth" type="object">
          Authentication configuration for MDX-based API requests.

          <Expandable title="Auth">
            <ResponseField name="method" type="&#x22;bearer&#x22; | &#x22;basic&#x22; | &#x22;key&#x22; | &#x22;cobo&#x22;">
              Authentication method for API requests.
            </ResponseField>

            <ResponseField name="name" type="string">
              Authentication name for API requests.
            </ResponseField>
          </Expandable>
        </ResponseField>

        <ResponseField name="server" type="string or array">
          Server configuration for API requests.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### SEO and search

<ResponseField name="seo" type="object">
  SEO indexing configurations.

  <Expandable title="Seo">
    <ResponseField name="metatags" type="object">
      Meta tags added to every page. Must be a valid key-value pair. See [common meta tags reference](/settings/seo#common-meta-tags-reference) for options.
    </ResponseField>

    <ResponseField name="indexing" type="&#x22;navigable&#x22; | &#x22;all&#x22;">
      Specify which pages search engines should index. Choose `navigable` to index only pages that are in your `docs.json` navigation or choose `all` to index every page. Defaults to `navigable`.
    </ResponseField>
  </Expandable>
</ResponseField>

<ResponseField name="search" type="object">
  Search display settings.

  <Expandable title="Search">
    <ResponseField name="prompt" type="string">
      Placeholder text to display in the search bar.
    </ResponseField>
  </Expandable>
</ResponseField>

### Integrations

<ResponseField name="integrations" type="object">
  Third-party integrations.

  <Expandable title="Integrations">
    <ResponseField name="amplitude" type="object">
      Amplitude analytics integration.

      <Expandable title="Amplitude">
        <ResponseField name="apiKey" type="string" required>
          Your Amplitude API key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="clearbit" type="object">
      Clearbit data enrichment integration.

      <Expandable title="Clearbit">
        <ResponseField name="publicApiKey" type="string" required>
          Your Clearbit API key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="fathom" type="object">
      Fathom analytics integration.

      <Expandable title="Fathom">
        <ResponseField name="siteId" type="string" required>
          Your Fathom site ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="frontchat" type="object">
      Front chat integration.

      <Expandable title="Frontchat">
        <ResponseField name="snippetId" type="string" required>
          Your Front chat snippet ID.

          Minimum length: 6
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="ga4" type="object">
      Google Analytics 4 integration.

      <Expandable title="Ga4">
        <ResponseField name="measurementId" type="string matching ^G" required>
          Your Google Analytics 4 measurement ID.

          Must match pattern: ^G
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="gtm" type="object">
      Google Tag Manager integration.

      <Expandable title="Gtm">
        <ResponseField name="tagId" type="string matching ^G" required>
          Your Google Tag Manager tag ID.

          Must match pattern: ^G
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="heap" type="object">
      Heap analytics integration.

      <Expandable title="Heap">
        <ResponseField name="appId" type="string" required>
          Your Heap app ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="hotjar" type="object">
      Hotjar integration.

      <Expandable title="Hotjar">
        <ResponseField name="hjid" type="string" required>
          Your Hotjar ID.
        </ResponseField>

        <ResponseField name="hjsv" type="string" required>
          Your Hotjar script version.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="intercom" type="object">
      Intercom integration.

      <Expandable title="Intercom">
        <ResponseField name="appId" type="string" required>
          Your Intercom app ID.

          Minimum length: 6
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="koala" type="object">
      Koala integration.

      <Expandable title="Koala">
        <ResponseField name="publicApiKey" type="string" required>
          Your Koala public API key.

          Minimum length: 2
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="logrocket" type="object">
      LogRocket integration.

      <Expandable title="Logrocket">
        <ResponseField name="appId" type="string" required>
          Your LogRocket app ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="mixpanel" type="object">
      Mixpanel integration.

      <Expandable title="Mixpanel">
        <ResponseField name="projectToken" type="string" required>
          Your Mixpanel project token.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="osano" type="object">
      Osano integration.

      <Expandable title="Osano">
        <ResponseField name="scriptSource" type="string" required>
          Your Osano script source.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="pirsch" type="object">
      Pirsch analytics integration.

      <Expandable title="Pirsch">
        <ResponseField name="id" type="string" required>
          Your Pirsch ID.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="posthog" type="object">
      PostHog integration.

      <Expandable title="Posthog">
        <ResponseField name="apiKey" type="string matching ^phc\_" required>
          Your PostHog API key.

          Must match pattern: ^phc\_
        </ResponseField>

        <ResponseField name="apiHost" type="string (uri)">
          Your PostHog API host.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="plausible" type="object">
      Plausible analytics integration.

      <Expandable title="Plausible">
        <ResponseField name="domain" type="string" required>
          Your Plausible domain.
        </ResponseField>

        <ResponseField name="server" type="string">
          Your Plausible server.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="segment" type="object">
      Segment integration.

      <Expandable title="Segment">
        <ResponseField name="key" type="string" required>
          Your Segment key.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="telemetry" type="object">
      Telemetry settings.

      <Expandable title="Telemetry">
        <ResponseField name="enabled" type="boolean">
          Whether to enable telemetry.
        </ResponseField>
      </Expandable>
    </ResponseField>

    <ResponseField name="cookies" type="object">
      Cookie settings.

      <Expandable title="Cookies">
        <ResponseField name="key" type="string">
          Key for cookies.
        </ResponseField>

        <ResponseField name="value" type="string">
          Value for cookies.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

### Errors

<ResponseField name="errors" type="object">
  Error handling settings.

  <Expandable title="Errors">
    <ResponseField name="404" type="object">
      404 "Page not found" error handling.

      <Expandable title="404">
        <ResponseField name="redirect" type="boolean">
          Whether to automatically redirect to the home page when a page is not
          found.
        </ResponseField>
      </Expandable>
    </ResponseField>
  </Expandable>
</ResponseField>

## Examples

<Tabs>
  <Tab title="Basic example">
    ```json title="docs.json" wrap lines
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "dropdowns": [
          {
            "dropdown": "Documentation",
            "icon": "book",
            "description": "How to use the Example Co. product",
            "groups": [
              {
                "group": "Getting started",
                "pages": [
                  "index",
                  "quickstart"
                ]
              },
              {
                "group": "Customization",
                "pages": [
                  "settings",
                  "users",
                  "features"
                ]
              },
              {
                "group": "Billing",
                "pages": [
                  "billing/overview",
                  "billing/payments",
                  "billing/subscriptions"
                ]
              }
            ]
          },
          {
            "dropdown": "Changelog",
            "icon": "history",
            "description": "Updates and changes",
            "pages": [
              "changelog"
            ]
          }
        ]
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": [
          "copy",
          "view",
          "chatgpt",
          "claude"
        ]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>

  <Tab title="Interactive API example">
    ```json title="docs.json" wrap lines highlight={43-61, 72-79}
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "dropdowns": [
          {
            "dropdown": "Documentation",
            "icon": "book",
            "description": "How to use the Example Co. product",
            "groups": [
              {
                "group": "Getting started",
                "pages": [
                  "index",
                  "quickstart"
                ]
              },
              {
                "group": "Customization",
                "pages": [
                  "settings",
                  "users",
                  "features"
                ]
              },
              {
                "group": "Billing",
                "pages": [
                  "billing/overview",
                  "billing/payments",
                  "billing/subscriptions"
                ]
              }
            ]
          },
          {
            "dropdown": "API reference",
            "icon": "terminal",
            "description": "How to use the Example Co. API",
            "groups": [
              {
                "group": "API reference",
                "pages": [
                  "api-reference/introduction"
                ]
              },
              {
                "group": "Endpoints",
                "openapi": {
                  "source": "openapi.json"
                }
              }
            ]
          },
          {
            "dropdown": "Changelog",
            "icon": "history",
            "description": "Updates and changes",
            "pages": [
              "changelog"
            ]
          }
        ]
      },
      "api": {
        "playground": {
          "display": "interactive"
        },
        "examples": {
          "languages": ["javascript", "curl", "python"]
        }
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": [
          "copy",
          "view",
          "chatgpt",
          "claude"
        ]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>

  <Tab title="Multi-language example">
    ```json title="docs.json" wrap lines
    {
      "$schema": "https://mintlify.com/docs.json",
      "theme": "maple",
      "name": "Example Co.",
      "description": "Example Co. is a company that provides example content and placeholder text.",
      "colors": {
        "primary": "#3B82F6",
        "light": "#F8FAFC",
        "dark": "#0F172A"
      },
      "navigation": {
        "global": {
          "anchors": [
            {
              "anchor": "Documentation",
              "href": "https://mintlify.com/docs"
            },
            {
              "anchor": "Changelog",
              "href": "https://mintlify.com/docs/changelog"
            }
          ]
        },
        "languages": [ // [!code highlight:3]
          {
            "language": "en",
            "dropdowns": [
              {
                "dropdown": "Documentation",
                "icon": "book",
                "description": "How to use the Example Co. product",
                "pages": [
                  {
                    "group": "Getting started",
                    "pages": ["index", "quickstart"]
                  },
                  {
                    "group": "Customization",
                    "pages": ["settings", "users", "features"]
                  },
                  {
                    "group": "Billing",
                    "pages": [
                      "billing/overview",
                      "billing/payments",
                      "billing/subscriptions"
                    ]
                  }
                ]
              },
              {
                "dropdown": "Changelog",
                "icon": "history",
                "description": "Updates and changes",
                "pages": ["changelog"]
              }
            ]
          },
          {
            "language": "es",// [!code highlight]
            "dropdowns": [
              {
                "dropdown": "Documentación",
                "icon": "book",
                "description": "Cómo usar el producto de Example Co.",
                "pages": [
                  {
                    "group": "Comenzando",
                    "pages": ["es/index", "es/quickstart"]
                  },
                  {
                    "group": "Personalización",
                    "pages": ["es/settings", "es/users", "es/features"]
                  },
                  {
                    "group": "Billing",
                    "pages": [
                      "es/billing/overview",
                      "es/billing/payments",
                      "es/billing/subscriptions"
                    ]
                  }
                ]
              },
              {
                "dropdown": "Changelog",
                "icon": "history",
                "description": "Actualizaciones y cambios",
                "pages": ["es/changelog"]
              }
            ]
          }
        ]
      },
      "logo": {
        "light": "/logo-light.svg",
        "dark": "/logo-dark.svg",
        "href": "https://example.com"
      },
      "navbar": {
        "links": [
          {
            "label": "Community",
            "href": "https://example.com/community"
          }
        ],
        "primary": {
          "type": "button",
          "label": "Get Started",
          "href": "https://example.com/start"
        }
      },
      "footer": {
        "socials": {
          "x": "https://x.com/example",
          "linkedin": "https://www.linkedin.com/company/example",
          "github": "https://github.com/example",
          "slack": "https://example.com/community"
        },
        "links": [
          {
            "header": "Resources",
            "items": [
              {
                "label": "Customers",
                "href": "https://example.com/customers"
              },
              {
                "label": "Enterprise",
                "href": "https://example.com/enterprise"
              },
              {
                "label": "Request Preview",
                "href": "https://example.com/preview"
              }
            ]
          },
          {
            "header": "Company",
            "items": [
              {
                "label": "Careers",
                "href": "https://example.com/careers"
              },
              {
                "label": "Blog",
                "href": "https://example.com/blog"
              },
              {
                "label": "Privacy Policy",
                "href": "https://example.com/legal/privacy"
              }
            ]
          }
        ]
      },
      "integrations": {
        "ga4": {
          "measurementId": "G-XXXXXXXXXX"
        },
        "koala": {
          "publicApiKey": "pk_example_key_123"
        },
        "telemetry": {
          "enabled": true
        },
        "cookies": {
          "key": "example_cookie_key",
          "value": "example_cookie_value"
        }
      },
      "contextual": {
        "options": ["copy", "view", "chatgpt", "claude"]
      },
      "errors": {
        "404": {
          "redirect": true
        }
      }
    }
    ```
  </Tab>
</Tabs>

## Upgrading from `mint.json`

If your docs project uses the deprecated `mint.json` file, follow these steps to upgrade to `docs.json`.

<Steps>
  <Step title="Install or update the CLI">
    If you haven't installed the [CLI](/installation), install it now:

    <CodeGroup>
      ```bash npm
      npm i -g mint
      ```

      ```bash yarn
      yarn global add mint
      ```

      ```bash pnpm
      pnpm add -g mint
      ```
    </CodeGroup>

    If you already have the CLI installed, make sure it is up to date:

    ```bash
    mint update
    ```
  </Step>

  <Step title="Create your docs.json file">
    In your docs repository, run:

    ```bash
    mint upgrade
    ```

    This command will create a `docs.json` file from your existing `mint.json`. Review the generated file to ensure all settings are correct.
  </Step>

  <Step title="Delete your mint.json file">
    After verifying your `docs.json` is configured properly, you can safely delete your old `mint.json` file.
  </Step>
</Steps>


# Redirects and broken links
Source: https://mintlify.com/docs/settings/broken-links

Tools to help prevent invalid links

When you change the path of a file in your docs folder, it will also change the path of the URL to that page. This may happen when restructuring your docs or changing the sidebar title.

## Broken Links

Catch broken links with our CLI. Simply [install the CLI](/installation) and run the command:

```bash
mint broken-links
```

The CLI will identify any relative links in your docs that don't exist.

## Redirects

Set up 301 redirects by adding the `redirects` field into your `docs.json` file.

```json
"redirects": [
  {
    "source": "/source/path",
    "destination": "/destination/path"
  }
]
```

This will permanently redirect `/source/path` to `/destination/path` so that you don't lose any previous SEO for the original page.

To match a wildcard path, use `*` after a parameter. In this example, `/beta/:slug*` will match `/beta/introduction` and redirects it to `/v2/introduction`.

```json
"redirects": [
  {
    "source": "/beta/:slug*",
    "destination": "/v2/:slug*"
  }
]
```


# CI checks
Source: https://mintlify.com/docs/settings/ci

Add checks for broken links, linting, and grammar to the updating process

<Info>
  CI checks are available on [Growth and Enterprise plans](https://mintlify.com/pricing?ref=docs-ci), an add-on for other plans, and for GitHub.
</Info>

Use CI checks to lint your docs for errors, and give you warnings before you deploy.

## Installation

To begin, you will need to have followed the steps on the [GitHub](/settings/github) page.

For GitHub Apps, you can choose to only give permissions to a single repository.
We highly recommend you do so as we only need access to the repository where
your docs are hosted.

## Configuration

You can configure the CI checks enabled for a deployment on the Mintlify dashboard by navigating to the 'Add-Ons' tab. There you can enable or disable the checks you'd like to run.

When enabling checks, you can choose to run them at a `Warning` or `Blocking` level.

<Note>
  A `Blocking` level check will provide a failure status if not passed, or changes are suggested.<br />

  A `Warning` level check will never provide a failure status, even if there is an error or suggestions.
</Note>

## When Do They Run?

CI checks are configured to run on commits to your configured deployment branch, or on pull requests against that branch.

## Available CI Checks

### Broken Links

Similarly to how the [CLI link checker](/settings/broken-links#broken-links) works on your local machine, we will automatically check your docs for broken links.
To see the results of this check, you can visit GitHub's check results page for a specific commit.

### Vale

[Vale](https://vale.sh/) is an open-source rule-based prose linter which supports a range of document types, including Markdown and MDX.

Mintlify supports automatically running Vale in a CI check, and displaying the results as a check status.

#### Configuration

If you have a `.vale.ini` file in the root the content directory for your deployment, we will automatically use that configuration file.
We will also automatically use any configuration files in your specified `stylesPath`.

<Tip>Don't have a Vale config or not sure where to get started? Don't worry, Mintlify has a default configuration that will automatically be used if one is not provided.</Tip>

<Warning>
  Please note that for security reasons, we are unable to support any absolute `stylesPath`, or `stylesPath` which include `..` values. Please use relative paths and include the `stylesPath` in your repository.
</Warning>

#### Packages

Vale supports a range of [packages](https://vale.sh/docs/keys/packages), which can be used to check for spelling and style errors.
Any packages you include in your repository under the correct `stylesPath` will be automatically installed and used in your Vale configuration.

For packages not included in your repository, you may specify any packages from the [Vale package registry](https://vale.sh/explorer), and they will automatically be downloaded and used in your Vale configuration.

<Warning>
  Please note that for security reasons, we are unable to support automatically downloading packages that are not from the [Vale package registry](https://vale.sh/explorer).
</Warning>

#### Vale with MDX

Vale does not natively support MDX, but Vale's author has provided a [custom extension](https://github.com/errata-ai/MDX) to support it.

If you'd prefer not to use this extension, we recommend the following lines in your `.vale.ini` file:

```ini
[formats]
mdx = md

[*.mdx]
CommentDelimiters = {/*, */}

TokenIgnores = (?sm)((?:import|export) .+?$), \
(?<!`)(<\w+ ?.+ ?\/>)(?!`), \
(<[A-Z]\w+>.+?<\/[A-Z]\w+>)

BlockIgnores = (?sm)^(<\w+\n .*\s\/>)$, \
(?sm)^({.+.*})
```

To use Vale's in-document comments, use MDX-style comments `{/* ... */}`.
If you use the `CommentDelimiters = {/*, */}` [setting](https://vale.sh/docs/keys/commentdelimiters) in your configuration, Vale will automatically interpret these comments while linting.
This means you can easily use Vale's in-built features, like skipping lines or sections.

```mdx
{/* vale off */}

This text will be ignored by Vale

{/* vale on */}
```

If you choose not to use `CommentDelimiters`, but still choose to use Vale's comments, you must wrap any Vale comments in MDX comments `{/* ... */}`. For example:

```mdx
{/* <!-- vale off --> */}

This text will be ignored by Vale

{/* <!-- vale on --> */}
```

Please note that these comment tags are not supported within Mintlify components, but can be used anywhere at the base level of a document.


# Custom domain
Source: https://mintlify.com/docs/settings/custom-domain

Host your documentation at your website's custom domain

To set up your documentation on a custom domain, you'll need to set your desired custom domain in your Mintlify settings and configure your DNS settings on your domain provider.

<Info>
  Looking to set up a custom subdirectory like `mintlify.com/docs`? See the [custom subdirectory](/advanced/subpath/cloudflare) docs.
</Info>

## Dashboard settings

1. Navigate to your [dashboard](https://dashboard.mintlify.com)
2. Select **Settings**
3. Select **Domain Setup**
4. Enter your desired custom domain. For example, `docs.mintlify.com`

<Frame>
  <img alt="Custom Domain" className="block dark:hidden" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/add-custom-domain-light.png" />

  <img alt="Custom Domain" className="hidden dark:block" src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/add-custom-domain-dark.png" />
</Frame>

## Configuring your DNS

1. Proceed to your domain's DNS settings on your domain provider's website.
2. Create a new DNS entry, inputting the following values:

```bash
CNAME | docs | cname.vercel-dns.com.
```

<Frame>
  <img alt="DNS" src="https://mintlify-assets.b-cdn.net/mintlify-dns.png" />
</Frame>

## Provider-specific settings

<AccordionGroup>
  <Accordion title="Vercel verification">
    If Vercel is your domain provider, you must add a verification `TXT` record. This information will show on your dashboard after submitting your custom domain, as well as be emailed to you.
  </Accordion>

  <Accordion title="Cloudflare security settings">
    If Cloudflare is your DNS provider, you must enable the "full strict" security option for the https setting.
  </Accordion>
</AccordionGroup>


# Custom scripts
Source: https://mintlify.com/docs/settings/custom-scripts

Fully customize your documentation with custom CSS and JS

Use CSS to style HTML elements or add custom CSS and JavaScript to fully customize the look and feel of your documentation.

## Styling with Tailwind CSS

Use Tailwind CSS v3 to style HTML elements. You can control layout, spacing, colors, and other visual properties. Some common classes are:

* `w-full` - Full width
* `aspect-video` - 16:9 aspect ratio
* `rounded-xl` - Large rounded corners
* `block`, `hidden` - Display control
* `dark:hidden`, `dark:block` - Dark mode visibility

Tailwind CSS arbitrary values are not supported. For custom values, use the `style` prop instead.

```html
<img style={{ width: '350px', margin: '12px auto' }} src="/path/image.jpg" />
```

## Custom CSS

Add CSS files to your repository and their defined class names will be applied and available in all of your `MDX` files.

### Adding `style.css`

For example, you can add the following `style.css` file to customize the styling of the navbar and footer.

```css
#navbar {
  background: "#fffff2";
  padding: 1rem;
}

footer {
  margin-top: 2rem;
}
```

### Using identifiers and selectors

Mintlify has a set of common identifiers and selectors to help you tag important elements of the UI.

<Tip>
  Use inspect element to find references to elements you're looking to customize.
</Tip>

<AccordionGroup>
  <Accordion title="Identifiers">
    * APIPlaygroundInput: `api-playground-input`
    * AssistantEntry: `assistant-entry`
    * AssistantEntryMobile: `assistant-entry-mobile`
    * Banner: `banner`
    * ChangelogFilters: `changelog-filters`
    * ChangelogFiltersContent: `changelog-filters-content`
    * ChatAssistantSheet: `chat-assistant-sheet`
    * ChatAssistantTextArea: `chat-assistant-textarea`
    * ContentArea: `content-area`
    * ContentContainer: `content-container`
    * ContentSideLayout: `content-side-layout`
    * Footer: `footer`
    * Header: `header`
    * NavBarTransition: `navbar-transition`
    * NavigationItems: `navigation-items`
    * Navbar: `navbar`
    * PageContextMenu: `page-context-menu`
    * PageContextMenuButton: `page-context-menu-button`
    * PageTitle: `page-title`
    * Pagination: `pagination`
    * Panel: `panel`
    * RequestExample: `request-example`
    * ResponseExample: `response-example`
    * SearchBarEntry: `search-bar-entry`
    * SearchBarEntryMobile: `search-bar-entry-mobile`
    * SearchInput: `search-input`
    * Sidebar: `sidebar`
    * SidebarContent: `sidebar-content`
    * TableOfContents: `table-of-contents`
    * TableOfContentsContent: `table-of-contents-content`
    * TableOfContentsLayout: `table-of-contents-layout`
    * TopbarCtaButton: `topbar-cta-button`
  </Accordion>

  <Accordion title="Selectors">
    * Accordion: `accordion`
    * AccordionGroup: `accordion-group`
    * AlmondLayout: `almond-layout`
    * AlmondNavBottomSection: `almond-nav-bottom-section`
    * AlmondNavBottomSectionDivider: `almond-nav-bottom-section-divider`
    * Anchor: `nav-anchor`
    * Anchors: `nav-anchors`
    * APISection: `api-section`
    * APISectionHeading: `api-section-heading`
    * APISectionHeadingSubtitle: `api-section-heading-subtitle`
    * APISectionHeadingTitle: `api-section-heading-title`
    * Callout: `callout`
    * Card: `card`
    * CardGroup: `card-group`
    * ChatAssistantSheet: `chat-assistant-sheet`
    * ChatAssistantSheetHeader: `chat-assistant-sheet-header`
    * ChatAssistantSheetContent: `chat-assistant-sheet-content`
    * ChatAssistantInput: `chat-assistant-input`
    * ChatAssistantSendButton: `chat-assistant-send-button`
    * CodeBlock: `code-block`
    * CodeGroup: `code-group`
    * Content: `mdx-content`
    * DropdownTrigger: `nav-dropdown-trigger`
    * DropdownContent: `nav-dropdown-content`
    * DropdownItem: `nav-dropdown-item`
    * DropdownItemTextContainer: `nav-dropdown-item-text-container`
    * DropdownItemTitle: `nav-dropdown-item-title`
    * DropdownItemDescription: `nav-dropdown-item-description`
    * DropdownItemIcon: `nav-dropdown-item-icon`
    * Expandable: `expandable`
    * Eyebrow: `eyebrow`
    * FeedbackToolbar: `feedback-toolbar`
    * Field: `field`
    * Frame: `frame`
    * Icon: `icon`
    * Link: `link`
    * LoginLink: `login-link`
    * Logo: `nav-logo`
    * Mermaid: `mermaid`
    * MethodNavPill: `method-nav-pill`
    * MethodPill: `method-pill`
    * NavBarLink: `navbar-link`
    * NavTagPill: `nav-tag-pill`
    * NavTagPillText: `nav-tag-pill-text`
    * OptionDropdown: `option-dropdown`
    * PaginationNext: `pagination-next`
    * PaginationPrev: `pagination-prev`
    * PaginationTitle: `pagination-title`
    * Panel: `panel`
    * SidebarGroup: `sidebar-group`
    * SidebarGroupIcon: `sidebar-group-icon`
    * SidebarGroupHeader: `sidebar-group-header`
    * SidebarTitle: `sidebar-title`
    * Step: `step`
    * Steps: `steps`
    * Tab: `tab`
    * Tabs: `tabs`
    * TabsBar: `nav-tabs`
    * TabsBarItem: `nav-tabs-item`
    * TableOfContents: `toc`
    * TableOfContentsItem: `toc-item`
    * Tooltip: `tooltip`
    * TopbarRightContainer: `topbar-right-container`
    * TryitButton: `tryit-button`
    * Update: `update`
  </Accordion>
</AccordionGroup>

<Warning>
  References and the styling of common elements are subject to change as the platform evolves. Please use custom styling with caution.
</Warning>

## Custom JavaScript

Custom JS allows you to add custom executable code globally. It is the equivalent of adding a `<script>` tag with JS code into every page.

### Adding custom JavaScript

Any `.js` file inside the content directory of your docs will be included in every documentation page. For example, you can add the following `ga.js` file to enable [Google Analytics](https://marketingplatform.google.com/about/analytics) across the entire documentation.

```js
window.dataLayer = window.dataLayer || [];
function gtag() {
  dataLayer.push(arguments);
}
gtag('js', new Date());

gtag('config', 'TAG_ID');
```

<Warning>
  Please use with caution to not introduce security vulnerabilities.
</Warning>


# GitHub
Source: https://mintlify.com/docs/settings/github

Sync your docs with a GitHub repo

Mintlify uses a GitHub App to automatically sync your documentation with your GitHub repository.

## Installing the GitHub App

Install the Mintlify GitHub App on the GitHub account or organization that owns your docs repository. You must have organization ownership or admin permissions in a repository to install the app. If you lack the necessary permissions, the repository owner must approve the installation request.

Install the Mintlify GitHub App through your [dashboard](https://dashboard.mintlify.com/settings/organization/github-app).

<Tip>
  We recommend granting access only to the repository where your docs are hosted.
</Tip>

<Frame>
  <img className="h-80" alt="Mintlify GitHub App installation page with the 'Only select repositories' option selected." src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/github/select-repos.png" />
</Frame>

## Permissions

When you install the GitHub app, you will be prompted to grant the following permissions:

Read permissions:

* `metadata`: Basic repository information

Read and write permissions:

* `checks`: Create status checks on pull requests
* `code`: Read file changes when you commit to your docs branch
* `deployments`: Generate preview deployments for pull requests
* `pull requests`: Create branches and pull requests from the web editor
* `workflows`: Manage GitHub Actions for docs deployments

<Info>
  The app only accesses repositories that you explicitly grant it access to. If you have branch protection rules enabled, the app cannot push directly to protected branches.
</Info>

## Managing repository access

When installing our GitHub App, you can grant access to all of your repositories or specific ones. We recommend only granting access to the repositories where your documentation is located. You can modify this selection anytime in your [GitHub app settings](https://github.com/apps/mintlify/installations/new).

## Configuring docs source

Change the organization, repository, or branch that your documentation is built from in the [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) section of your dashboard.

## Troubleshooting

If you encounter problems with the GitHub app, resetting the connection can solve most problems.

<Steps>
  <Step title="Uninstall the Mintlify app through GitHub.">
    1. In GitHub, go to [installations](https://github.com/settings/installations) and select **Configure** next to the Mintlify app. Scroll down and select **Uninstall**.
    2. Go to [Authorized GitHub Apps](https://github.com/settings/apps/authorizations) and select **Revoke** next to the Mintlify app.
  </Step>

  <Step title="Reinstall the Mintlify app.">
    1. In your Mintlify dashboard, go to [Git Settings](https://dashboard.mintlify.com/settings/deployment/git-settings) and install the GitHub app.
    2. Authorize your account in the [My Profile](https://dashboard.mintlify.com/settings/account) section of your dashboard.
  </Step>
</Steps>


# GitLab
Source: https://mintlify.com/docs/settings/gitlab

Sync your docs with a GitLab repo

We use a combination of Access tokens and Webhooks to authenticate and sync
changes between GitLab and Mintlify.

* We use Access tokens to pull information from GitLab.
* We use Webhooks so GitLab can notify Mintlify when changes are made.
  * This allows Mintlify to create preview deployments when a MR is created.

## Set up the connection

<Steps>
  <Step title="Find your project ID">
    Within your GitLab project, navigate to `Settings` > `General` and find the `Project ID`.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-project-id.png" />
    </Frame>
  </Step>

  <Step title="Generate an access token">
    a. Navigate to `Settings` > `Access Tokens`.

    b. Select `Add new token`.

    1. Name the token "Mintlify".
    2. If you have a private repo, you must set the role as `Maintainer`.
    3. Choose `api` and `read_api` for the scopes.

    c. Finally click `Create project access token` and copy the token.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-project-access-token.png" />
    </Frame>
  </Step>

  <Step title="Set up the connection">
    Within the [Mintlify dashboard](https://dashboard.mintlify.com/settings/deployment/git-settings), add the project ID and access token from the previous steps alongside the other configurations. Click "Save Changes" when you're done.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-config.png" />
    </Frame>
  </Step>
</Steps>

## Create the webhook

Webhooks allow us to receive events when changes are made so that we can
automatically trigger deployments.

<Steps>
  <Step title="Navigate to Settings > Webhooks and click 'Add new Webhook'">
    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-webhook.png" />
    </Frame>
  </Step>

  <Step title="Set up URL and webhook">
    In the "URL" field, enter the endpoint `https://leaves.mintlify.com/gitlab-webhook` and name the webhook "Mintlify".
  </Step>

  <Step title="Paste token">
    Paste the Webhook token generated after setting up the connection.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-show-webtoken.png" />
    </Frame>
  </Step>

  <Step title="Select events">
    Select the events you want to trigger the webhook:

    * Push events (All branches)
    * Merge requests events

    When you're done it should look like this:

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-project-webtoken.png" />
    </Frame>
  </Step>

  <Step title="Test the Webhook">
    After creating the Webhook, click the "Test" dropdown and select "Push events" to send a sample payload to ensure it's configured correctly. It'll say "Hook executed successfully: HTTP 200" if configured correctly.

    This will help you verify that everything is working correctly and that your documentation will sync properly with your GitLab repository.

    <Frame>
      <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/gitlab/gitlab-project-webtoken-test.png" />
    </Frame>
  </Step>
</Steps>

<Note>
  Reach out to the Mintlify team if you need help. Contact us
  [here](https://mintlify.com/enterprise).
</Note>

[git-settings]: https://dashboard.mintlify.com/settings/deployment/git-settings


# Preview deployments
Source: https://mintlify.com/docs/settings/preview-deployments

Preview changes to your docs in a live deployment

<Info>
  Preview deployments are available on [Growth and Enterprise plans](https://mintlify.com/pricing?ref=preview-deployments).
</Info>

Preview deployments let you see how changes to your docs will look before merging to production. Each preview creates a shareable URL that updates automatically as you push new changes.

## Creating preview deployments

Preview deployments are created automatically through pull requests or manually from your dashboard.

### Automatic previews

When you create a pull request, the Mintlify bot automatically adds a link to view the preview deployment in your pull request. The preview updates each time you push new commits to the branch.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/previews/preview-deployment-light.png" alt="Link to view deployment in the pull request timeline" className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/previews/preview-deployment-dark.png" alt="Link to view deployment in the pull request timeline" className="hidden dark:block" />
</Frame>

### Manual previews

You can manually create a preview for any branch if you are on a Growth or Enterprise plan or have the preview deployment add-on.

1. Go to your [dashboard](https://dashboard.mintlify.com/).
2. Select **Previews**.
3. Select **Create preview**.
4. Enter your branch name.
5. Select **Create deployment**.

## Redeploying a preview

Redeploy a preview to refresh content or retry after a failed deployment.

1. Select the preview from your [dashboard](https://dashboard.mintlify.com/).
2. Select **Redeploy**.

<Frame>
  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/previews/redeploy-preview-light.png" alt="The Previews menu with the deploy button emphasized by an orange rectangle." className="block dark:hidden" />

  <img src="https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/previews/redeploy-preview-dark.png" alt="The Previews menu with the deploy button emphasized by an orange rectangle." className="hidden dark:block" />
</Frame>

## Sharing preview deployments

Preview deployments can be publicly accessible or restricted to authenticated users.

**Public access**: Preview URLs are publicly viewable by default. Share a preview link with anyone who needs to review your changes.

**Restricted access**: Enable preview deployment authentication to limit preview access to authenticated Mintlify users only. See [Authentication Setup](/authentication-personalization/authentication-setup) for more information.


# SEO
Source: https://mintlify.com/docs/settings/seo

Extend default meta tags for better SEO

The platform automatically generates most meta tags.

However, you can fully customize them by adding the `metatags` field to your `docs.json` or the page's frontmatter.

## Global meta tags

You can set default meta tags by adding the `metadata` field to your `docs.json`.

```json
"seo": {
    "metatags": {
        "og:image": "link to your default meta tag image"
    }
}
```

## Page-specific meta tags

Add your meta tags to the page's metadata like so:

```mdx
---
title: 'Your Example Page Title'
'og:image': 'link to your meta tag image'
---
```

<Warning>
  Meta tags with colons need to be typed with quotes around them when you put them in the page metadata.
</Warning>

## Sitemaps

Mintlify automatically generates a `sitemap.xml` file and a `robots.txt` file. Simply navigate to `/sitemap.xml` to see your sitemap.

Only pages included in your `docs.json` are included by default. To include hidden links, add `seo.indexing` to your `docs.json`:

```json
"seo": {
    "indexing": all
}
```

## Disabling indexing

If you want to stop a page from being indexed by search engines, you can include the following in the [frontmatter](pages) of your page:

```
---
noindex: true
---
```

You can also specify `noindex` for all pages in your docs by setting the `metadata.robots` field to `"noindex"` in your `docs.json`:

```json
"seo": {
    "metatags": {
      "robots": "noindex"
    }
  }
```

## Common Meta Tags Reference

Below is a comprehensive list of meta tags you can add to your `docs.json`. These meta tags help improve your site's SEO, social sharing, and browser compatibility.

You can preview how your meta tags will appear on different platforms using [metatags.io](https://metatags.io/).

```json
"seo": {
    "metatags": {
      "robots": "noindex",
      "charset": "UTF-8",
      "viewport": "width=device-width, initial-scale=1.0",
      "description": "Page description",
      "keywords": "keyword1, keyword2, keyword3",
      "author": "Author Name",
      "robots": "index, follow",
      "googlebot": "index, follow",
      "google": "notranslate",
      "google-site-verification": "verification_token",
      "generator": "Mintlify",
      "theme-color": "#000000",
      "color-scheme": "light dark",
      "format-detection": "telephone=no",
      "referrer": "origin",
      "refresh": "30",
      "rating": "general",
      "revisit-after": "7 days",
      "language": "en",
      "copyright": "Copyright 2024",
      "reply-to": "email@example.com",
      "distribution": "global",
      "coverage": "Worldwide",
      "category": "Technology",
      "target": "all",
      "HandheldFriendly": "True",
      "MobileOptimized": "320",
      "apple-mobile-web-app-capable": "yes",
      "apple-mobile-web-app-status-bar-style": "black",
      "apple-mobile-web-app-title": "App Title",
      "application-name": "App Name",
      "msapplication-TileColor": "#000000",
      "msapplication-TileImage": "path/to/tile.png",
      "msapplication-config": "path/to/browserconfig.xml",
      "og:title": "Open Graph Title",
      "og:type": "website",
      "og:url": "https://example.com",
      "og:image": "https://example.com/image.jpg",
      "og:description": "Open Graph Description",
      "og:site_name": "Site Name",
      "og:locale": "en_US",
      "og:video": "https://example.com/video.mp4",
      "og:audio": "https://example.com/audio.mp3",
      "twitter:card": "summary",
      "twitter:site": "@username",
      "twitter:creator": "@username",
      "twitter:title": "Twitter Title",
      "twitter:description": "Twitter Description",
      "twitter:image": "https://example.com/image.jpg",
      "twitter:image:alt": "Image Description",
      "twitter:player": "https://example.com/player",
      "twitter:player:width": "480",
      "twitter:player:height": "480",
      "twitter:app:name:iphone": "App Name",
      "twitter:app:id:iphone": "12345",
      "twitter:app:url:iphone": "app://",
      "article:published_time": "2024-01-01T00:00:00+00:00",
      "article:modified_time": "2024-01-02T00:00:00+00:00",
      "article:expiration_time": "2024-12-31T00:00:00+00:00",
      "article:author": "Author Name",
      "article:section": "Technology",
      "article:tag": "tag1, tag2, tag3",
      "book:author": "Author Name",
      "book:isbn": "1234567890",
      "book:release_date": "2024-01-01",
      "book:tag": "tag1, tag2, tag3",
      "profile:first_name": "John",
      "profile:last_name": "Doe",
      "profile:username": "johndoe",
      "profile:gender": "male",
      "music:duration": "205",
      "music:album": "Album Name",
      "music:album:disc": "1",
      "music:album:track": "1",
      "music:musician": "Artist Name",
      "music:song": "Song Name",
      "music:song:disc": "1",
      "music:song:track": "1",
      "video:actor": "Actor Name",
      "video:actor:role": "Role Name",
      "video:director": "Director Name",
      "video:writer": "Writer Name",
      "video:duration": "120",
      "video:release_date": "2024-01-01",
      "video:tag": "tag1, tag2, tag3",
      "video:series": "Series Name"
  }
}
```


# Headers and text
Source: https://mintlify.com/docs/text

Learn how to format text, create headers, and style content

## Headers

Headers organize your content and create navigation anchors. They appear in the table of contents and help users scan your documentation.

### Creating headers

Use `#` symbols to create headers of different levels:

```mdx
## Main section header
### Subsection header
#### Sub-subsection header
```

<Tip>
  Use descriptive, keyword-rich headers that clearly indicate the content that follows. This improves both user navigation and search engine optimization.
</Tip>

## Text formatting

We support most Markdown formatting for emphasizing and styling text.

### Basic formatting

Apply these formatting styles to your text:

| Style             | Syntax     | Example                | Result                 |
| ----------------- | ---------- | ---------------------- | ---------------------- |
| **Bold**          | `**text**` | `**important note**`   | **important note**     |
| *Italic*          | `_text_`   | `_emphasis_`           | *emphasis*             |
| ~~Strikethrough~~ | `~text~`   | `~deprecated feature~` | ~~deprecated feature~~ |

### Combining formats

You can combine formatting styles:

```mdx
**_bold and italic_**
**~~bold and strikethrough~~**
*~~italic and strikethrough~~**
```

***bold and italic***<br />
**~~bold and strikethrough~~**<br />
*~~italic and strikethrough~~*

### Superscript and subscript

For mathematical expressions or footnotes, use HTML tags:

| Type        | Syntax            | Example               | Result              |
| ----------- | ----------------- | --------------------- | ------------------- |
| Superscript | `<sup>text</sup>` | `example<sup>2</sup>` | example<sup>2</sup> |
| Subscript   | `<sub>text</sub>` | `example<sub>n</sub>` | example<sub>n</sub> |

## Links

Links help users navigate between pages and access external resources. Use descriptive link text to improve accessibility and user experience.

### Internal links

Link to other pages in your documentation using root-relative paths:

```mdx
[Quickstart](/quickstart)
[Steps](/components/steps)
```

[Quickstart](/quickstart)<br />
[Steps](/components/steps)

<Note>
  Avoid relative links like `[page](../page)` as they load slower and cannot be optimized as effectively as root-relative links.
</Note>

### External links

For external resources, include the full URL:

```mdx
[Markdown Guide](https://www.markdownguide.org/)
```

[Markdown Guide](https://www.markdownguide.org/)

### Broken links

You can check for broken links in your documentation using the [CLI](/installation):

```bash
mint broken-links
```

## Blockquotes

Blockquotes highlight important information, quotes, or examples within your content.

### Single line blockquotes

Add `>` before text to create a blockquote:

```mdx
> This is a quote that stands out from the main content.
```

> This is a quote that stands out from the main content.

### Multi-line blockquotes

For longer quotes or multiple paragraphs:

```mdx
> This is the first paragraph of a multi-line blockquote.
>
> This is the second paragraph, separated by an empty line with `>`.
```

> This is the first paragraph of a multi-line blockquote.
>
> This is the second paragraph, separated by an empty line with `>`.

<Tip>
  Use blockquotes sparingly to maintain their visual impact and meaning. Consider using [callouts](/components/callouts) for notes, warnings, and other information.
</Tip>

## Mathematical expressions

We support LaTeX for rendering mathematical expressions and equations.

### Inline math

Use single dollar signs, `$`, for inline mathematical expressions:

```mdx
The Pythagorean theorem states that $(a^2 + b^2 = c^2)$ in a right triangle.
```

The Pythagorean theorem states that $(a^2 + b^2 = c^2)$ in a right triangle.

### Block equations

Use double dollar signs, `$$`, for standalone equations:

```mdx
$$
E = mc^2
$$
```

$$
E = mc^2
$$

<Info>
  LaTeX support requires proper mathematical syntax. Refer to the [LaTeX documentation](https://www.latex-project.org/help/documentation/) for comprehensive syntax guidelines.
</Info>

## Line breaks and spacing

Control spacing and line breaks to improve content readability.

### Paragraph breaks

Separate paragraphs with blank lines:

```mdx
This is the first paragraph.

This is the second paragraph, separated by a blank line.
```

This is the first paragraph.

This is the second paragraph, separated by a blank line.

### Manual line breaks

Use HTML `<br />` tags for forced line breaks within paragraphs:

```mdx
This line ends here.<br />
This line starts on a new line.
```

This line ends here.<br />
This line starts on a new line.

<Tip>
  In most cases, paragraph breaks with blank lines provide better readability than manual line breaks.
</Tip>

## Best practices

### Content organization

* Use headers to create clear content hierarchy
* Follow proper header hierarchy (don't skip from H2 to H4)
* Write descriptive, keyword-rich header text

### Text formatting

* Use bold for emphasis, not for entire paragraphs
* Reserve italics for terms, titles, or subtle emphasis
* Avoid over-formatting that distracts from content

### Links

* Write descriptive link text instead of "click here" or "read more"
* Use root-relative paths for internal links
* Test links regularly to prevent broken references


# Themes
Source: https://mintlify.com/docs/themes

Customize the appearance of your documentation

export const ThemeCard = ({title, value, description, href}) => {
  return <a className="mt-4 gap-10 group cursor-pointer" href={href}>
      <div>
        <img className="mt-0 rounded-2xl group-hover:scale-105 transition-all block dark:hidden" src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/themes/${value}-light.png`} alt={title} noZoom />
        <img className="mt-0 rounded-2xl group-hover:scale-105 transition-all hidden dark:block" src={`https://mintlify.s3.us-west-1.amazonaws.com/mintlify/images/themes/${value}-dark.png`} alt={title} noZoom />
      </div>
      <div>
        <div className="mt-4 flex space-x-2 items-center">
        <h4 className="text-base font-medium text-gray-900 dark:text-gray-200">{title}</h4>
        <label className="text-sm text-gray-500 dark:text-gray-400">"{value}"</label>
      </div>
        <div class="mt-1 prose-sm prose-gray mb-2 text-gray-500 dark:text-gray-400">{description}</div>
        <div className="flex items-center gap-1 mt-2 text-green-600 group-hover:text-green-800 dark:text-green-500 dark:group-hover:text-green-400">
          <span className="text-sm font-medium">
            See preview
          </span>
          <svg className="size-3 group-hover:translate-x-0.5 transition-all" width="14" height="15" viewBox="0 0 14 15" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M5.05566 2.70996L9.91678 7.57107L5.05566 12.4322" stroke="currentColor" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
          </svg>
        </div>
      </div>
    </a>;
};


<div className="pt-10 pb-24 px-4 px-4 max-w-3xl mx-auto prose prose-gray">
  <label className="eyebrow h-5 text-primary dark:text-primary-light text-sm font-semibold">Core Concepts</label>
  <h1 className="mt-1 mb-2 text-2xl sm:text-3xl text-gray-900 tracking-tight dark:text-gray-200 font-semibold">Themes</h1>
  <label className="text-lg prose prose-gray dark:prose-invert">Custom the appearance of your documentation<br /><br />Configure [theme](settings#param-theme) in docs.json using one of the following themes.</label>

  <br />

  <div className="mt-10 grid grid-cols-1 sm:grid-cols-2 gap-8 not-prose">
    <ThemeCard title="Mint" value="mint" description="Classic documentation theme with time-tested layouts and familiar navigation." href="https://mint.mintlify.app" />

    <ThemeCard title="Maple" value="maple" description="Modern, clean aesthetics perfect for AI and SaaS products." href="https://maple.mintlify.app" />

    <ThemeCard title="Palm" value="palm" description="Sophisticated fintech theme with deep customization for enterprise documentation." href="https://palm.mintlify.app" />

    <ThemeCard title="Willow" value="willow" description="Stripped-back essentials for distraction-free documentation." href="https://willow.mintlify.app" />

    <ThemeCard title="Linden" value="linden" description="Retro terminal vibes with monospace fonts for that 80s hacker aesthetic." href="https://linden.mintlify.app" />

    <ThemeCard title="Almond" value="almond" description="Card-based organization meets minimalist design for intuitive navigation." href="https://almond.mintlify.app" />

    <ThemeCard title="Aspen" value="aspen" description="Modern documentation crafted for complex navigation and custom components." href="https://aspen.mintlify.app" />
  </div>
</div>


